/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openvidu-browser";
exports.ids = ["vendor-chunks/openvidu-browser"];
exports.modules = {

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/LocalRecorderState.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/LocalRecorderState.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocalRecorderState = void 0;\nvar LocalRecorderState;\n(function (LocalRecorderState) {\n    LocalRecorderState[\"READY\"] = \"READY\";\n    LocalRecorderState[\"RECORDING\"] = \"RECORDING\";\n    LocalRecorderState[\"PAUSED\"] = \"PAUSED\";\n    LocalRecorderState[\"FINISHED\"] = \"FINISHED\";\n})(LocalRecorderState = exports.LocalRecorderState || (exports.LocalRecorderState = {}));\n//# sourceMappingURL=LocalRecorderState.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FbnVtcy9Mb2NhbFJlY29yZGVyU3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzREFBc0QsMEJBQTBCLEtBQUs7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0VudW1zL0xvY2FsUmVjb3JkZXJTdGF0ZS5qcz82NGY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvY2FsUmVjb3JkZXJTdGF0ZSA9IHZvaWQgMDtcbnZhciBMb2NhbFJlY29yZGVyU3RhdGU7XG4oZnVuY3Rpb24gKExvY2FsUmVjb3JkZXJTdGF0ZSkge1xuICAgIExvY2FsUmVjb3JkZXJTdGF0ZVtcIlJFQURZXCJdID0gXCJSRUFEWVwiO1xuICAgIExvY2FsUmVjb3JkZXJTdGF0ZVtcIlJFQ09SRElOR1wiXSA9IFwiUkVDT1JESU5HXCI7XG4gICAgTG9jYWxSZWNvcmRlclN0YXRlW1wiUEFVU0VEXCJdID0gXCJQQVVTRURcIjtcbiAgICBMb2NhbFJlY29yZGVyU3RhdGVbXCJGSU5JU0hFRFwiXSA9IFwiRklOSVNIRURcIjtcbn0pKExvY2FsUmVjb3JkZXJTdGF0ZSA9IGV4cG9ydHMuTG9jYWxSZWNvcmRlclN0YXRlIHx8IChleHBvcnRzLkxvY2FsUmVjb3JkZXJTdGF0ZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb2NhbFJlY29yZGVyU3RhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/LocalRecorderState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenViduError = exports.OpenViduErrorName = void 0;\n/**\n * Defines property {@link OpenViduError.name}\n */\nvar OpenViduErrorName;\n(function (OpenViduErrorName) {\n    /**\n     * Browser is not supported by OpenVidu.\n     * Returned upon unsuccessful {@link Session.connect}\n     */\n    OpenViduErrorName[\"BROWSER_NOT_SUPPORTED\"] = \"BROWSER_NOT_SUPPORTED\";\n    /**\n     * The user hasn't granted permissions to the required input device when the browser asked for them.\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"DEVICE_ACCESS_DENIED\"] = \"DEVICE_ACCESS_DENIED\";\n    /**\n     * The required input device is probably being used by other process when the browser asked for it.\n     * This error can also be triggered when the user granted permission to use the devices but a hardware\n     * error occurred at the OS, browser or web page level, which prevented access to the device.\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"DEVICE_ALREADY_IN_USE\"] = \"DEVICE_ALREADY_IN_USE\";\n    /**\n     * The user hasn't granted permissions to capture some desktop screen when the browser asked for them.\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"SCREEN_CAPTURE_DENIED\"] = \"SCREEN_CAPTURE_DENIED\";\n    /**\n     * Browser does not support screen sharing.\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"SCREEN_SHARING_NOT_SUPPORTED\"] = \"SCREEN_SHARING_NOT_SUPPORTED\";\n    /**\n     * Only for Chrome, there's no screen sharing extension installed\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"SCREEN_EXTENSION_NOT_INSTALLED\"] = \"SCREEN_EXTENSION_NOT_INSTALLED\";\n    /**\n     * Only for Chrome, the screen sharing extension is installed but is disabled\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"SCREEN_EXTENSION_DISABLED\"] = \"SCREEN_EXTENSION_DISABLED\";\n    /**\n     * No video input device found with the provided deviceId (property {@link PublisherProperties.videoSource})\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"INPUT_VIDEO_DEVICE_NOT_FOUND\"] = \"INPUT_VIDEO_DEVICE_NOT_FOUND\";\n    /**\n     * No audio input device found with the provided deviceId (property {@link PublisherProperties.audioSource})\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"INPUT_AUDIO_DEVICE_NOT_FOUND\"] = \"INPUT_AUDIO_DEVICE_NOT_FOUND\";\n    /**\n     * There was an unknown error when trying to access the specified audio device\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"INPUT_AUDIO_DEVICE_GENERIC_ERROR\"] = \"INPUT_AUDIO_DEVICE_GENERIC_ERROR\";\n    /**\n     * Method {@link OpenVidu.initPublisher} or  {@link OpenVidu.getUserMedia} has been called with properties `videoSource` and `audioSource` of\n     * {@link PublisherProperties} parameter both set to *false* or *null*\n     */\n    OpenViduErrorName[\"NO_INPUT_SOURCE_SET\"] = \"NO_INPUT_SOURCE_SET\";\n    /**\n     * Some media property of {@link PublisherProperties} such as `frameRate` or `resolution` is not supported\n     * by the input devices (whenever it is possible they are automatically adjusted to the most similar value).\n     * Returned upon unsuccessful {@link OpenVidu.initPublisher} or {@link OpenVidu.getUserMedia}\n     */\n    OpenViduErrorName[\"PUBLISHER_PROPERTIES_ERROR\"] = \"PUBLISHER_PROPERTIES_ERROR\";\n    /**\n     * The client tried to call a method without the required permissions. This can occur for methods {@link Session.publish},\n     * {@link Session.forceUnpublish}, {@link Session.forceDisconnect}, {@link Stream.applyFilter}, {@link Stream.removeFilter}\n     */\n    OpenViduErrorName[\"OPENVIDU_PERMISSION_DENIED\"] = \"OPENVIDU_PERMISSION_DENIED\";\n    /**\n     * There is no connection to the Session. This error will be thrown when any method requiring a connection to\n     * openvidu-server is called before successfully calling method {@link Session.connect}\n     */\n    OpenViduErrorName[\"OPENVIDU_NOT_CONNECTED\"] = \"OPENVIDU_NOT_CONNECTED\";\n    /**\n     * Error related to [Virtual Background](/en/stable/advanced-features/virtual-background/)\n     */\n    OpenViduErrorName[\"VIRTUAL_BACKGROUND_ERROR\"] = \"VIRTUAL_BACKGROUND_ERROR\";\n    /**\n     * Generic error\n     */\n    OpenViduErrorName[\"GENERIC_ERROR\"] = \"GENERIC_ERROR\";\n})(OpenViduErrorName = exports.OpenViduErrorName || (exports.OpenViduErrorName = {}));\n/**\n * Simple object to identify runtime errors on the client side\n */\nvar OpenViduError = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function OpenViduError(name, message) {\n        this.name = name;\n        this.message = message;\n    }\n    return OpenViduError;\n}());\nexports.OpenViduError = OpenViduError;\n//# sourceMappingURL=OpenViduError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/TypeOfVideo.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/TypeOfVideo.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TypeOfVideo = void 0;\nvar TypeOfVideo;\n(function (TypeOfVideo) {\n    TypeOfVideo[\"CAMERA\"] = \"CAMERA\";\n    TypeOfVideo[\"SCREEN\"] = \"SCREEN\";\n    TypeOfVideo[\"CUSTOM\"] = \"CUSTOM\";\n    TypeOfVideo[\"IPCAM\"] = \"IPCAM\";\n})(TypeOfVideo = exports.TypeOfVideo || (exports.TypeOfVideo = {}));\n//# sourceMappingURL=TypeOfVideo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FbnVtcy9UeXBlT2ZWaWRlby5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QyxtQkFBbUIsS0FBSztBQUNqRSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvRW51bXMvVHlwZU9mVmlkZW8uanM/OTY1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAoQykgQ29weXJpZ2h0IDIwMTctMjAyMiBPcGVuVmlkdSAoaHR0cHM6Ly9vcGVudmlkdS5pbylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlT2ZWaWRlbyA9IHZvaWQgMDtcbnZhciBUeXBlT2ZWaWRlbztcbihmdW5jdGlvbiAoVHlwZU9mVmlkZW8pIHtcbiAgICBUeXBlT2ZWaWRlb1tcIkNBTUVSQVwiXSA9IFwiQ0FNRVJBXCI7XG4gICAgVHlwZU9mVmlkZW9bXCJTQ1JFRU5cIl0gPSBcIlNDUkVFTlwiO1xuICAgIFR5cGVPZlZpZGVvW1wiQ1VTVE9NXCJdID0gXCJDVVNUT01cIjtcbiAgICBUeXBlT2ZWaWRlb1tcIklQQ0FNXCJdID0gXCJJUENBTVwiO1xufSkoVHlwZU9mVmlkZW8gPSBleHBvcnRzLlR5cGVPZlZpZGVvIHx8IChleHBvcnRzLlR5cGVPZlZpZGVvID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVR5cGVPZlZpZGVvLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/TypeOfVideo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VideoInsertMode = void 0;\n/**\n * How the video will be inserted in the DOM for Publishers and Subscribers. See {@link PublisherProperties.insertMode} and {@link SubscriberProperties.insertMode}\n */\nvar VideoInsertMode;\n(function (VideoInsertMode) {\n    /**\n     * Video inserted after the target element (as next sibling)\n     */\n    VideoInsertMode[\"AFTER\"] = \"AFTER\";\n    /**\n     * Video inserted as last child of the target element\n     */\n    VideoInsertMode[\"APPEND\"] = \"APPEND\";\n    /**\n     * Video inserted before the target element (as previous sibling)\n     */\n    VideoInsertMode[\"BEFORE\"] = \"BEFORE\";\n    /**\n     * Video inserted as first child of the target element\n     */\n    VideoInsertMode[\"PREPEND\"] = \"PREPEND\";\n    /**\n     * Video replaces target element\n     */\n    VideoInsertMode[\"REPLACE\"] = \"REPLACE\";\n})(VideoInsertMode = exports.VideoInsertMode || (exports.VideoInsertMode = {}));\n//# sourceMappingURL=VideoInsertMode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FbnVtcy9WaWRlb0luc2VydE1vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkI7QUFDQSxrRkFBa0Ysc0NBQXNDLEtBQUs7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdELHVCQUF1QixLQUFLO0FBQzdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FbnVtcy9WaWRlb0luc2VydE1vZGUuanM/MzkzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAoQykgQ29weXJpZ2h0IDIwMTctMjAyMiBPcGVuVmlkdSAoaHR0cHM6Ly9vcGVudmlkdS5pbylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WaWRlb0luc2VydE1vZGUgPSB2b2lkIDA7XG4vKipcbiAqIEhvdyB0aGUgdmlkZW8gd2lsbCBiZSBpbnNlcnRlZCBpbiB0aGUgRE9NIGZvciBQdWJsaXNoZXJzIGFuZCBTdWJzY3JpYmVycy4gU2VlIHtAbGluayBQdWJsaXNoZXJQcm9wZXJ0aWVzLmluc2VydE1vZGV9IGFuZCB7QGxpbmsgU3Vic2NyaWJlclByb3BlcnRpZXMuaW5zZXJ0TW9kZX1cbiAqL1xudmFyIFZpZGVvSW5zZXJ0TW9kZTtcbihmdW5jdGlvbiAoVmlkZW9JbnNlcnRNb2RlKSB7XG4gICAgLyoqXG4gICAgICogVmlkZW8gaW5zZXJ0ZWQgYWZ0ZXIgdGhlIHRhcmdldCBlbGVtZW50IChhcyBuZXh0IHNpYmxpbmcpXG4gICAgICovXG4gICAgVmlkZW9JbnNlcnRNb2RlW1wiQUZURVJcIl0gPSBcIkFGVEVSXCI7XG4gICAgLyoqXG4gICAgICogVmlkZW8gaW5zZXJ0ZWQgYXMgbGFzdCBjaGlsZCBvZiB0aGUgdGFyZ2V0IGVsZW1lbnRcbiAgICAgKi9cbiAgICBWaWRlb0luc2VydE1vZGVbXCJBUFBFTkRcIl0gPSBcIkFQUEVORFwiO1xuICAgIC8qKlxuICAgICAqIFZpZGVvIGluc2VydGVkIGJlZm9yZSB0aGUgdGFyZ2V0IGVsZW1lbnQgKGFzIHByZXZpb3VzIHNpYmxpbmcpXG4gICAgICovXG4gICAgVmlkZW9JbnNlcnRNb2RlW1wiQkVGT1JFXCJdID0gXCJCRUZPUkVcIjtcbiAgICAvKipcbiAgICAgKiBWaWRlbyBpbnNlcnRlZCBhcyBmaXJzdCBjaGlsZCBvZiB0aGUgdGFyZ2V0IGVsZW1lbnRcbiAgICAgKi9cbiAgICBWaWRlb0luc2VydE1vZGVbXCJQUkVQRU5EXCJdID0gXCJQUkVQRU5EXCI7XG4gICAgLyoqXG4gICAgICogVmlkZW8gcmVwbGFjZXMgdGFyZ2V0IGVsZW1lbnRcbiAgICAgKi9cbiAgICBWaWRlb0luc2VydE1vZGVbXCJSRVBMQUNFXCJdID0gXCJSRVBMQUNFXCI7XG59KShWaWRlb0luc2VydE1vZGUgPSBleHBvcnRzLlZpZGVvSW5zZXJ0TW9kZSB8fCAoZXhwb3J0cy5WaWRlb0luc2VydE1vZGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmlkZW9JbnNlcnRNb2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionEvent.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionEvent.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by:\n * - {@link SessionEventMap.connectionCreated}\n * - {@link SessionEventMap.connectionDestroyed}\n */\nvar ConnectionEvent = /** @class */ (function (_super) {\n    __extends(ConnectionEvent, _super);\n    /**\n     * @hidden\n     */\n    function ConnectionEvent(cancelable, target, type, connection, reason) {\n        var _this = _super.call(this, cancelable, target, type) || this;\n        _this.connection = connection;\n        _this.reason = reason;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    ConnectionEvent.prototype.callDefaultBehavior = function () { };\n    return ConnectionEvent;\n}(Event_1.Event));\nexports.ConnectionEvent = ConnectionEvent;\n//# sourceMappingURL=ConnectionEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvQ29ubmVjdGlvbkV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGNBQWMsbUJBQU8sQ0FBQywyRkFBUztBQUMvQjtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvQ29ubmVjdGlvbkV2ZW50LmpzP2IzMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogKEMpIENvcHlyaWdodCAyMDE3LTIwMjIgT3BlblZpZHUgKGh0dHBzOi8vb3BlbnZpZHUuaW8pXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpb25FdmVudCA9IHZvaWQgMDtcbnZhciBFdmVudF8xID0gcmVxdWlyZShcIi4vRXZlbnRcIik7XG4vKipcbiAqIFRyaWdnZXJlZCBieTpcbiAqIC0ge0BsaW5rIFNlc3Npb25FdmVudE1hcC5jb25uZWN0aW9uQ3JlYXRlZH1cbiAqIC0ge0BsaW5rIFNlc3Npb25FdmVudE1hcC5jb25uZWN0aW9uRGVzdHJveWVkfVxuICovXG52YXIgQ29ubmVjdGlvbkV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb25uZWN0aW9uRXZlbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25FdmVudChjYW5jZWxhYmxlLCB0YXJnZXQsIHR5cGUsIGNvbm5lY3Rpb24sIHJlYXNvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjYW5jZWxhYmxlLCB0YXJnZXQsIHR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICBfdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxuICAgIENvbm5lY3Rpb25FdmVudC5wcm90b3R5cGUuY2FsbERlZmF1bHRCZWhhdmlvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICByZXR1cm4gQ29ubmVjdGlvbkV2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLkNvbm5lY3Rpb25FdmVudCA9IENvbm5lY3Rpb25FdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3Rpb25FdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionPropertyChangedEvent.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionPropertyChangedEvent.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPropertyChangedEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * **This feature is part of OpenVidu\n * <a href=\"https://docs.openvidu.io/en/stable/openvidu-pro/\" style=\"display: inline-block; background-color: rgb(0, 136, 170); color: white; font-weight: bold; padding: 0px 5px; margin: 0 2px 0 2px; border-radius: 3px; font-size: 13px; line-height:21px; text-decoration: none; font-family: Montserrat, sans-serif\">PRO</a>\n * and\n * <a href=\"https://docs.openvidu.io/en/stable/openvidu-enterprise/\" style=\"display: inline-block; background-color: rgb(156, 39, 176); color: white; font-weight: bold; padding: 0px 5px; margin: 0 2px 0 2px; border-radius: 3px; font-size: 13px; line-height:21px; text-decoration: none; font-family: Montserrat, sans-serif\">ENTERPRISE</a>\n * editions**\n *\n * Triggered by {@link SessionEventMap.connectionPropertyChanged}\n */\nvar ConnectionPropertyChangedEvent = /** @class */ (function (_super) {\n    __extends(ConnectionPropertyChangedEvent, _super);\n    /**\n     * @hidden\n     */\n    function ConnectionPropertyChangedEvent(target, connection, changedProperty, newValue, oldValue) {\n        var _this = _super.call(this, false, target, 'connectionPropertyChanged') || this;\n        _this.connection = connection;\n        _this.changedProperty = changedProperty;\n        _this.newValue = newValue;\n        _this.oldValue = oldValue;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    ConnectionPropertyChangedEvent.prototype.callDefaultBehavior = function () { };\n    return ConnectionPropertyChangedEvent;\n}(Event_1.Event));\nexports.ConnectionPropertyChangedEvent = ConnectionPropertyChangedEvent;\n//# sourceMappingURL=ConnectionPropertyChangedEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvQ29ubmVjdGlvblByb3BlcnR5Q2hhbmdlZEV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQywyRkFBUztBQUMvQjtBQUNBO0FBQ0EsNEZBQTRGLG9DQUFvQyxjQUFjLG1CQUFtQixrQkFBa0IscUJBQXFCLG9CQUFvQixpQkFBaUIsa0JBQWtCLHVCQUF1QjtBQUN0UjtBQUNBLG1HQUFtRyxxQ0FBcUMsY0FBYyxtQkFBbUIsa0JBQWtCLHFCQUFxQixvQkFBb0IsaUJBQWlCLGtCQUFrQix1QkFBdUI7QUFDOVI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHNDQUFzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvRXZlbnRzL0Nvbm5lY3Rpb25Qcm9wZXJ0eUNoYW5nZWRFdmVudC5qcz8zYWQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0aW9uUHJvcGVydHlDaGFuZ2VkRXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xuLyoqXG4gKiAqKlRoaXMgZmVhdHVyZSBpcyBwYXJ0IG9mIE9wZW5WaWR1XG4gKiA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm9wZW52aWR1LmlvL2VuL3N0YWJsZS9vcGVudmlkdS1wcm8vXCIgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAxMzYsIDE3MCk7IGNvbG9yOiB3aGl0ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7IHBhZGRpbmc6IDBweCA1cHg7IG1hcmdpbjogMCAycHggMCAycHg7IGJvcmRlci1yYWRpdXM6IDNweDsgZm9udC1zaXplOiAxM3B4OyBsaW5lLWhlaWdodDoyMXB4OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGZvbnQtZmFtaWx5OiBNb250c2VycmF0LCBzYW5zLXNlcmlmXCI+UFJPPC9hPlxuICogYW5kXG4gKiA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm9wZW52aWR1LmlvL2VuL3N0YWJsZS9vcGVudmlkdS1lbnRlcnByaXNlL1wiIHN0eWxlPVwiZGlzcGxheTogaW5saW5lLWJsb2NrOyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTU2LCAzOSwgMTc2KTsgY29sb3I6IHdoaXRlOyBmb250LXdlaWdodDogYm9sZDsgcGFkZGluZzogMHB4IDVweDsgbWFyZ2luOiAwIDJweCAwIDJweDsgYm9yZGVyLXJhZGl1czogM3B4OyBmb250LXNpemU6IDEzcHg7IGxpbmUtaGVpZ2h0OjIxcHg7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQsIHNhbnMtc2VyaWZcIj5FTlRFUlBSSVNFPC9hPlxuICogZWRpdGlvbnMqKlxuICpcbiAqIFRyaWdnZXJlZCBieSB7QGxpbmsgU2Vzc2lvbkV2ZW50TWFwLmNvbm5lY3Rpb25Qcm9wZXJ0eUNoYW5nZWR9XG4gKi9cbnZhciBDb25uZWN0aW9uUHJvcGVydHlDaGFuZ2VkRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbm5lY3Rpb25Qcm9wZXJ0eUNoYW5nZWRFdmVudCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvblByb3BlcnR5Q2hhbmdlZEV2ZW50KHRhcmdldCwgY29ubmVjdGlvbiwgY2hhbmdlZFByb3BlcnR5LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZmFsc2UsIHRhcmdldCwgJ2Nvbm5lY3Rpb25Qcm9wZXJ0eUNoYW5nZWQnKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgX3RoaXMuY2hhbmdlZFByb3BlcnR5ID0gY2hhbmdlZFByb3BlcnR5O1xuICAgICAgICBfdGhpcy5uZXdWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBfdGhpcy5vbGRWYWx1ZSA9IG9sZFZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHlcbiAgICBDb25uZWN0aW9uUHJvcGVydHlDaGFuZ2VkRXZlbnQucHJvdG90eXBlLmNhbGxEZWZhdWx0QmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgcmV0dXJuIENvbm5lY3Rpb25Qcm9wZXJ0eUNoYW5nZWRFdmVudDtcbn0oRXZlbnRfMS5FdmVudCkpO1xuZXhwb3J0cy5Db25uZWN0aW9uUHJvcGVydHlDaGFuZ2VkRXZlbnQgPSBDb25uZWN0aW9uUHJvcGVydHlDaGFuZ2VkRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25uZWN0aW9uUHJvcGVydHlDaGFuZ2VkRXZlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionPropertyChangedEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js":
/*!****************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Event = void 0;\nvar Event = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Event(cancelable, target, type) {\n        /**\n         * @hidden\n         */\n        this.hasBeenPrevented = false;\n        this.cancelable = cancelable;\n        this.target = target;\n        this.type = type;\n    }\n    /**\n     * Whether the default beahivour of the event has been prevented or not. Call {@link Event.preventDefault} to prevent it\n     */\n    Event.prototype.isDefaultPrevented = function () {\n        return this.hasBeenPrevented;\n    };\n    /**\n     * Prevents the default behavior of the event. The following events have a default behavior:\n     *\n     * - `sessionDisconnected`: dispatched by {@link Session} object, automatically unsubscribes the leaving participant from every Subscriber object of the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n     * and also deletes any HTML video element associated to each Subscriber (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement` in method {@link Session.subscribe} or\n     * by calling {@link Subscriber.createVideoElement}). For every video removed, each Subscriber object will also dispatch a `videoElementDestroyed` event.\n     *\n     * - `streamDestroyed`:\n     *   - If dispatched by a {@link Publisher} (*you* have unpublished): automatically stops all media tracks and deletes any HTML video element associated to it (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement`\n     * in method {@link OpenVidu.initPublisher} or by calling {@link Publisher.createVideoElement}). For every video removed, the Publisher object will also dispatch a `videoElementDestroyed` event.\n     *   - If dispatched by {@link Session} (*other user* has unpublished): automatically unsubscribes the proper Subscriber object from the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n     * and also deletes any HTML video element associated to that Subscriber (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement` in method {@link Session.subscribe} or\n     * by calling {@link Subscriber.createVideoElement}). For every video removed, the Subscriber object will also dispatch a `videoElementDestroyed` event.\n     */\n    Event.prototype.preventDefault = function () {\n        // tslint:disable-next-line:no-empty\n        this.callDefaultBehavior = function () { };\n        this.hasBeenPrevented = true;\n    };\n    return Event;\n}());\nexports.Event = Event;\n//# sourceMappingURL=Event.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvRXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRiw0QkFBNEI7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsZUFBZTtBQUM5RCx3TEFBd0wseUJBQXlCO0FBQ2pOLG1CQUFtQixvQ0FBb0M7QUFDdkQ7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQsa0JBQWtCLDhCQUE4QixlQUFlLG1DQUFtQztBQUNsRyw2QkFBNkIsZUFBZTtBQUM1Qyx3TEFBd0wseUJBQXlCO0FBQ2pOLG1CQUFtQixvQ0FBb0M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvRXZlbnQuanM/ZjFkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAoQykgQ29weXJpZ2h0IDIwMTctMjAyMiBPcGVuVmlkdSAoaHR0cHM6Ly9vcGVudmlkdS5pbylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FdmVudCA9IHZvaWQgMDtcbnZhciBFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gRXZlbnQoY2FuY2VsYWJsZSwgdGFyZ2V0LCB0eXBlKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaGlkZGVuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhc0JlZW5QcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGRlZmF1bHQgYmVhaGl2b3VyIG9mIHRoZSBldmVudCBoYXMgYmVlbiBwcmV2ZW50ZWQgb3Igbm90LiBDYWxsIHtAbGluayBFdmVudC5wcmV2ZW50RGVmYXVsdH0gdG8gcHJldmVudCBpdFxuICAgICAqL1xuICAgIEV2ZW50LnByb3RvdHlwZS5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0JlZW5QcmV2ZW50ZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQcmV2ZW50cyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgZXZlbnQuIFRoZSBmb2xsb3dpbmcgZXZlbnRzIGhhdmUgYSBkZWZhdWx0IGJlaGF2aW9yOlxuICAgICAqXG4gICAgICogLSBgc2Vzc2lvbkRpc2Nvbm5lY3RlZGA6IGRpc3BhdGNoZWQgYnkge0BsaW5rIFNlc3Npb259IG9iamVjdCwgYXV0b21hdGljYWxseSB1bnN1YnNjcmliZXMgdGhlIGxlYXZpbmcgcGFydGljaXBhbnQgZnJvbSBldmVyeSBTdWJzY3JpYmVyIG9iamVjdCBvZiB0aGUgc2Vzc2lvbiAodGhpcyBpbmNsdWRlcyBjbG9zaW5nIHRoZSBSVENQZWVyQ29ubmVjdGlvbiBhbmQgZGlzcG9zaW5nIGFsbCBNZWRpYVN0cmVhbVRyYWNrcylcbiAgICAgKiBhbmQgYWxzbyBkZWxldGVzIGFueSBIVE1MIHZpZGVvIGVsZW1lbnQgYXNzb2NpYXRlZCB0byBlYWNoIFN1YnNjcmliZXIgKG9ubHkgdGhvc2UgY3JlYXRlZCBieSBPcGVuVmlkdSBCcm93c2VyLCBlaXRoZXIgYnkgcGFzc2luZyBhIHZhbGlkIHBhcmFtZXRlciBhcyBgdGFyZ2V0RWxlbWVudGAgaW4gbWV0aG9kIHtAbGluayBTZXNzaW9uLnN1YnNjcmliZX0gb3JcbiAgICAgKiBieSBjYWxsaW5nIHtAbGluayBTdWJzY3JpYmVyLmNyZWF0ZVZpZGVvRWxlbWVudH0pLiBGb3IgZXZlcnkgdmlkZW8gcmVtb3ZlZCwgZWFjaCBTdWJzY3JpYmVyIG9iamVjdCB3aWxsIGFsc28gZGlzcGF0Y2ggYSBgdmlkZW9FbGVtZW50RGVzdHJveWVkYCBldmVudC5cbiAgICAgKlxuICAgICAqIC0gYHN0cmVhbURlc3Ryb3llZGA6XG4gICAgICogICAtIElmIGRpc3BhdGNoZWQgYnkgYSB7QGxpbmsgUHVibGlzaGVyfSAoKnlvdSogaGF2ZSB1bnB1Ymxpc2hlZCk6IGF1dG9tYXRpY2FsbHkgc3RvcHMgYWxsIG1lZGlhIHRyYWNrcyBhbmQgZGVsZXRlcyBhbnkgSFRNTCB2aWRlbyBlbGVtZW50IGFzc29jaWF0ZWQgdG8gaXQgKG9ubHkgdGhvc2UgY3JlYXRlZCBieSBPcGVuVmlkdSBCcm93c2VyLCBlaXRoZXIgYnkgcGFzc2luZyBhIHZhbGlkIHBhcmFtZXRlciBhcyBgdGFyZ2V0RWxlbWVudGBcbiAgICAgKiBpbiBtZXRob2Qge0BsaW5rIE9wZW5WaWR1LmluaXRQdWJsaXNoZXJ9IG9yIGJ5IGNhbGxpbmcge0BsaW5rIFB1Ymxpc2hlci5jcmVhdGVWaWRlb0VsZW1lbnR9KS4gRm9yIGV2ZXJ5IHZpZGVvIHJlbW92ZWQsIHRoZSBQdWJsaXNoZXIgb2JqZWN0IHdpbGwgYWxzbyBkaXNwYXRjaCBhIGB2aWRlb0VsZW1lbnREZXN0cm95ZWRgIGV2ZW50LlxuICAgICAqICAgLSBJZiBkaXNwYXRjaGVkIGJ5IHtAbGluayBTZXNzaW9ufSAoKm90aGVyIHVzZXIqIGhhcyB1bnB1Ymxpc2hlZCk6IGF1dG9tYXRpY2FsbHkgdW5zdWJzY3JpYmVzIHRoZSBwcm9wZXIgU3Vic2NyaWJlciBvYmplY3QgZnJvbSB0aGUgc2Vzc2lvbiAodGhpcyBpbmNsdWRlcyBjbG9zaW5nIHRoZSBSVENQZWVyQ29ubmVjdGlvbiBhbmQgZGlzcG9zaW5nIGFsbCBNZWRpYVN0cmVhbVRyYWNrcylcbiAgICAgKiBhbmQgYWxzbyBkZWxldGVzIGFueSBIVE1MIHZpZGVvIGVsZW1lbnQgYXNzb2NpYXRlZCB0byB0aGF0IFN1YnNjcmliZXIgKG9ubHkgdGhvc2UgY3JlYXRlZCBieSBPcGVuVmlkdSBCcm93c2VyLCBlaXRoZXIgYnkgcGFzc2luZyBhIHZhbGlkIHBhcmFtZXRlciBhcyBgdGFyZ2V0RWxlbWVudGAgaW4gbWV0aG9kIHtAbGluayBTZXNzaW9uLnN1YnNjcmliZX0gb3JcbiAgICAgKiBieSBjYWxsaW5nIHtAbGluayBTdWJzY3JpYmVyLmNyZWF0ZVZpZGVvRWxlbWVudH0pLiBGb3IgZXZlcnkgdmlkZW8gcmVtb3ZlZCwgdGhlIFN1YnNjcmliZXIgb2JqZWN0IHdpbGwgYWxzbyBkaXNwYXRjaCBhIGB2aWRlb0VsZW1lbnREZXN0cm95ZWRgIGV2ZW50LlxuICAgICAqL1xuICAgIEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XG4gICAgICAgIHRoaXMuY2FsbERlZmF1bHRCZWhhdmlvciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgdGhpcy5oYXNCZWVuUHJldmVudGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVudDtcbn0oKSk7XG5leHBvcnRzLkV2ZW50ID0gRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExceptionEvent = exports.ExceptionEventName = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Defines property {@link ExceptionEvent.name}\n */\nvar ExceptionEventName;\n(function (ExceptionEventName) {\n    /**\n     * There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Session} object.\n     */\n    ExceptionEventName[\"ICE_CANDIDATE_ERROR\"] = \"ICE_CANDIDATE_ERROR\";\n    /**\n     * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n     * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `failed` status.\n     *\n     * This is a terminal error that won't have any kind of possible recovery. If the client is still connected to OpenVidu Server,\n     * then an automatic reconnection process of the media stream is immediately performed. If the ICE connection has broken due to\n     * a total network drop, then no automatic reconnection process will be possible.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Stream} object.\n     */\n    ExceptionEventName[\"ICE_CONNECTION_FAILED\"] = \"ICE_CONNECTION_FAILED\";\n    /**\n     * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n     * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `disconnected` status.\n     *\n     * This is not a terminal error, and it is possible for the ICE connection to be reconnected. If the client is still connected to\n     * OpenVidu Server and after certain timeout the ICE connection has not reached a success or terminal status, then an automatic\n     * reconnection process of the media stream is performed. If the ICE connection has broken due to a total network drop, then no\n     * automatic reconnection process will be possible.\n     *\n     * You can customize the timeout for the reconnection attempt with property {@link OpenViduAdvancedConfiguration.iceConnectionDisconnectedExceptionTimeout},\n     * which by default is 4000 milliseconds.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Stream} object.\n     */\n    ExceptionEventName[\"ICE_CONNECTION_DISCONNECTED\"] = \"ICE_CONNECTION_DISCONNECTED\";\n    /**\n     * A {@link Subscriber} object has not fired event `streamPlaying` after certain timeout. `streamPlaying` event belongs to {@link StreamManagerEvent}\n     * category. It wraps Web API native event [canplay](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).\n     *\n     * OpenVidu Browser can take care of the video players (see [here](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)),\n     * or you can take care of video players on your own (see [here](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)).\n     * Either way, whenever a {@link Subscriber} object is commanded to attach its {@link Stream} to a video element, it is supposed to fire `streamPlaying`\n     * event shortly after. If it does not, then we can safely assume that something wrong has happened while playing the remote video and the\n     * application may be notified through this specific ExceptionEvent.\n     *\n     * The timeout can be configured with property {@link OpenViduAdvancedConfiguration.noStreamPlayingEventExceptionTimeout}. By default it is 4000 milliseconds.\n     *\n     * This is just an informative exception. It only means that a remote Stream that is supposed to be playing by a video player has not done so\n     * in a reasonable time. But the lack of the event can be caused by multiple reasons. If a Subscriber is not playing its Stream, the origin\n     * of the problem could be located at the Publisher side. Or may be caused by a transient network problem. But it also could be a problem with\n     * autoplay permissions. Bottom line, the cause can be very varied, and depending on the application the lack of the event could even be expected.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Subscriber} object.\n     */\n    ExceptionEventName[\"NO_STREAM_PLAYING_EVENT\"] = \"NO_STREAM_PLAYING_EVENT\";\n    /**\n     * There has been a server-side disconnection of the Speech To Text module. From the moment this exception is fired to the moment method\n     * {@link Session.subscribeToSpeechToText} is called again, the transcription of the audio stream will not be available and no {@link SpeechToTextEvent}\n     * will be fired.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Session} object.\n     */\n    ExceptionEventName[\"SPEECH_TO_TEXT_DISCONNECTED\"] = \"SPEECH_TO_TEXT_DISCONNECTED\";\n})(ExceptionEventName = exports.ExceptionEventName || (exports.ExceptionEventName = {}));\n/**\n * Triggered by {@link SessionEventMap.exception}\n */\nvar ExceptionEvent = /** @class */ (function (_super) {\n    __extends(ExceptionEvent, _super);\n    /**\n     * @hidden\n     */\n    function ExceptionEvent(session, name, origin, message, data) {\n        var _this = _super.call(this, false, session, 'exception') || this;\n        _this.name = name;\n        _this.origin = origin;\n        _this.message = message;\n        _this.data = data;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    ExceptionEvent.prototype.callDefaultBehavior = function () { };\n    return ExceptionEvent;\n}(Event_1.Event));\nexports.ExceptionEvent = ExceptionEvent;\n//# sourceMappingURL=ExceptionEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/FilterEvent.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/FilterEvent.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FilterEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Defines every event dispatched by audio/video stream filters. You can subscribe to filter events by calling {@link Filter.addEventListener}\n */\nvar FilterEvent = /** @class */ (function (_super) {\n    __extends(FilterEvent, _super);\n    /**\n     * @hidden\n     */\n    function FilterEvent(target, eventType, data) {\n        var _this = _super.call(this, false, target, eventType) || this;\n        _this.data = data;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    FilterEvent.prototype.callDefaultBehavior = function () { };\n    return FilterEvent;\n}(Event_1.Event));\nexports.FilterEvent = FilterEvent;\n//# sourceMappingURL=FilterEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvRmlsdGVyRXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsY0FBYyxtQkFBTyxDQUFDLDJGQUFTO0FBQy9CO0FBQ0EsZ0hBQWdIO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvRmlsdGVyRXZlbnQuanM/YzVjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAoQykgQ29weXJpZ2h0IDIwMTctMjAyMiBPcGVuVmlkdSAoaHR0cHM6Ly9vcGVudmlkdS5pbylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmlsdGVyRXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xuLyoqXG4gKiBEZWZpbmVzIGV2ZXJ5IGV2ZW50IGRpc3BhdGNoZWQgYnkgYXVkaW8vdmlkZW8gc3RyZWFtIGZpbHRlcnMuIFlvdSBjYW4gc3Vic2NyaWJlIHRvIGZpbHRlciBldmVudHMgYnkgY2FsbGluZyB7QGxpbmsgRmlsdGVyLmFkZEV2ZW50TGlzdGVuZXJ9XG4gKi9cbnZhciBGaWx0ZXJFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsdGVyRXZlbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEZpbHRlckV2ZW50KHRhcmdldCwgZXZlbnRUeXBlLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZhbHNlLCB0YXJnZXQsIGV2ZW50VHlwZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxuICAgIEZpbHRlckV2ZW50LnByb3RvdHlwZS5jYWxsRGVmYXVsdEJlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBGaWx0ZXJFdmVudDtcbn0oRXZlbnRfMS5FdmVudCkpO1xuZXhwb3J0cy5GaWx0ZXJFdmVudCA9IEZpbHRlckV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsdGVyRXZlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/FilterEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/NetworkQualityLevelChangedEvent.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/NetworkQualityLevelChangedEvent.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NetworkQualityLevelChangedEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by {@link SessionEventMap.networkQualityLevelChanged}\n */\nvar NetworkQualityLevelChangedEvent = /** @class */ (function (_super) {\n    __extends(NetworkQualityLevelChangedEvent, _super);\n    /**\n     * @hidden\n     */\n    function NetworkQualityLevelChangedEvent(target, newValue, oldValue, connection) {\n        var _this = _super.call(this, false, target, 'networkQualityLevelChanged') || this;\n        _this.newValue = newValue;\n        _this.oldValue = oldValue;\n        _this.connection = connection;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    NetworkQualityLevelChangedEvent.prototype.callDefaultBehavior = function () { };\n    return NetworkQualityLevelChangedEvent;\n}(Event_1.Event));\nexports.NetworkQualityLevelChangedEvent = NetworkQualityLevelChangedEvent;\n//# sourceMappingURL=NetworkQualityLevelChangedEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvTmV0d29ya1F1YWxpdHlMZXZlbENoYW5nZWRFdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVDQUF1QztBQUN2QyxjQUFjLG1CQUFPLENBQUMsMkZBQVM7QUFDL0I7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUNBQXVDO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvTmV0d29ya1F1YWxpdHlMZXZlbENoYW5nZWRFdmVudC5qcz85MTA4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50ID0gdm9pZCAwO1xudmFyIEV2ZW50XzEgPSByZXF1aXJlKFwiLi9FdmVudFwiKTtcbi8qKlxuICogVHJpZ2dlcmVkIGJ5IHtAbGluayBTZXNzaW9uRXZlbnRNYXAubmV0d29ya1F1YWxpdHlMZXZlbENoYW5nZWR9XG4gKi9cbnZhciBOZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBOZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50KHRhcmdldCwgbmV3VmFsdWUsIG9sZFZhbHVlLCBjb25uZWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZhbHNlLCB0YXJnZXQsICduZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZCcpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5ld1ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIF90aGlzLm9sZFZhbHVlID0gb2xkVmFsdWU7XG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHlcbiAgICBOZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50LnByb3RvdHlwZS5jYWxsRGVmYXVsdEJlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBOZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLk5ldHdvcmtRdWFsaXR5TGV2ZWxDaGFuZ2VkRXZlbnQgPSBOZXR3b3JrUXVhbGl0eUxldmVsQ2hhbmdlZEV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmV0d29ya1F1YWxpdHlMZXZlbENoYW5nZWRFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/NetworkQualityLevelChangedEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/PublisherSpeakingEvent.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/PublisherSpeakingEvent.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PublisherSpeakingEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by:\n * - `publisherStartSpeaking` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#publisherStartSpeaking) and [StreamManager](/en/stable/api/openvidu-browser/interfaces/StreamManagerEventMap.html#publisherStartSpeaking) objects)\n * - `publisherStopSpeaking` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#publisherStopSpeaking) and [StreamManager](/en/stable/api/openvidu-browser/interfaces/StreamManagerEventMap.html#publisherStopSpeaking) objects)\n */\nvar PublisherSpeakingEvent = /** @class */ (function (_super) {\n    __extends(PublisherSpeakingEvent, _super);\n    /**\n     * @hidden\n     */\n    function PublisherSpeakingEvent(target, type, connection, streamId) {\n        var _this = _super.call(this, false, target, type) || this;\n        _this.type = type;\n        _this.connection = connection;\n        _this.streamId = streamId;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    PublisherSpeakingEvent.prototype.callDefaultBehavior = function () { };\n    return PublisherSpeakingEvent;\n}(Event_1.Event));\nexports.PublisherSpeakingEvent = PublisherSpeakingEvent;\n//# sourceMappingURL=PublisherSpeakingEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvUHVibGlzaGVyU3BlYWtpbmdFdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixjQUFjLG1CQUFPLENBQUMsMkZBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0V2ZW50cy9QdWJsaXNoZXJTcGVha2luZ0V2ZW50LmpzPzJhNjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogKEMpIENvcHlyaWdodCAyMDE3LTIwMjIgT3BlblZpZHUgKGh0dHBzOi8vb3BlbnZpZHUuaW8pXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB1Ymxpc2hlclNwZWFraW5nRXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xuLyoqXG4gKiBUcmlnZ2VyZWQgYnk6XG4gKiAtIGBwdWJsaXNoZXJTdGFydFNwZWFraW5nYCAoYXZhaWxhYmxlIGZvciBbU2Vzc2lvbl0oL2VuL3N0YWJsZS9hcGkvb3BlbnZpZHUtYnJvd3Nlci9pbnRlcmZhY2VzL1Nlc3Npb25FdmVudE1hcC5odG1sI3B1Ymxpc2hlclN0YXJ0U3BlYWtpbmcpIGFuZCBbU3RyZWFtTWFuYWdlcl0oL2VuL3N0YWJsZS9hcGkvb3BlbnZpZHUtYnJvd3Nlci9pbnRlcmZhY2VzL1N0cmVhbU1hbmFnZXJFdmVudE1hcC5odG1sI3B1Ymxpc2hlclN0YXJ0U3BlYWtpbmcpIG9iamVjdHMpXG4gKiAtIGBwdWJsaXNoZXJTdG9wU3BlYWtpbmdgIChhdmFpbGFibGUgZm9yIFtTZXNzaW9uXSgvZW4vc3RhYmxlL2FwaS9vcGVudmlkdS1icm93c2VyL2ludGVyZmFjZXMvU2Vzc2lvbkV2ZW50TWFwLmh0bWwjcHVibGlzaGVyU3RvcFNwZWFraW5nKSBhbmQgW1N0cmVhbU1hbmFnZXJdKC9lbi9zdGFibGUvYXBpL29wZW52aWR1LWJyb3dzZXIvaW50ZXJmYWNlcy9TdHJlYW1NYW5hZ2VyRXZlbnRNYXAuaHRtbCNwdWJsaXNoZXJTdG9wU3BlYWtpbmcpIG9iamVjdHMpXG4gKi9cbnZhciBQdWJsaXNoZXJTcGVha2luZ0V2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQdWJsaXNoZXJTcGVha2luZ0V2ZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQdWJsaXNoZXJTcGVha2luZ0V2ZW50KHRhcmdldCwgdHlwZSwgY29ubmVjdGlvbiwgc3RyZWFtSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZmFsc2UsIHRhcmdldCwgdHlwZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICBfdGhpcy5zdHJlYW1JZCA9IHN0cmVhbUlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHlcbiAgICBQdWJsaXNoZXJTcGVha2luZ0V2ZW50LnByb3RvdHlwZS5jYWxsRGVmYXVsdEJlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBQdWJsaXNoZXJTcGVha2luZ0V2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLlB1Ymxpc2hlclNwZWFraW5nRXZlbnQgPSBQdWJsaXNoZXJTcGVha2luZ0V2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHVibGlzaGVyU3BlYWtpbmdFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/PublisherSpeakingEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/RecordingEvent.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/RecordingEvent.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RecordingEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by:\n * - {@link SessionEventMap.recordingStarted}\n * - {@link SessionEventMap.recordingStopped}\n */\nvar RecordingEvent = /** @class */ (function (_super) {\n    __extends(RecordingEvent, _super);\n    /**\n     * @hidden\n     */\n    function RecordingEvent(target, type, id, name, reason) {\n        var _this = _super.call(this, false, target, type) || this;\n        _this.id = id;\n        if (name !== id) {\n            _this.name = name;\n        }\n        _this.reason = reason;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    RecordingEvent.prototype.callDefaultBehavior = function () { };\n    return RecordingEvent;\n}(Event_1.Event));\nexports.RecordingEvent = RecordingEvent;\n//# sourceMappingURL=RecordingEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvUmVjb3JkaW5nRXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsY0FBYyxtQkFBTyxDQUFDLDJGQUFTO0FBQy9CO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0V2ZW50cy9SZWNvcmRpbmdFdmVudC5qcz8wZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWNvcmRpbmdFdmVudCA9IHZvaWQgMDtcbnZhciBFdmVudF8xID0gcmVxdWlyZShcIi4vRXZlbnRcIik7XG4vKipcbiAqIFRyaWdnZXJlZCBieTpcbiAqIC0ge0BsaW5rIFNlc3Npb25FdmVudE1hcC5yZWNvcmRpbmdTdGFydGVkfVxuICogLSB7QGxpbmsgU2Vzc2lvbkV2ZW50TWFwLnJlY29yZGluZ1N0b3BwZWR9XG4gKi9cbnZhciBSZWNvcmRpbmdFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVjb3JkaW5nRXZlbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFJlY29yZGluZ0V2ZW50KHRhcmdldCwgdHlwZSwgaWQsIG5hbWUsIHJlYXNvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmYWxzZSwgdGFyZ2V0LCB0eXBlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pZCA9IGlkO1xuICAgICAgICBpZiAobmFtZSAhPT0gaWQpIHtcbiAgICAgICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XG4gICAgUmVjb3JkaW5nRXZlbnQucHJvdG90eXBlLmNhbGxEZWZhdWx0QmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgcmV0dXJuIFJlY29yZGluZ0V2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLlJlY29yZGluZ0V2ZW50ID0gUmVjb3JkaW5nRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWNvcmRpbmdFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/RecordingEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SessionDisconnectedEvent.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SessionDisconnectedEvent.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SessionDisconnectedEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Triggered by {@link SessionEventMap.sessionDisconnected}\n */\nvar SessionDisconnectedEvent = /** @class */ (function (_super) {\n    __extends(SessionDisconnectedEvent, _super);\n    /**\n     * @hidden\n     */\n    function SessionDisconnectedEvent(target, reason) {\n        var _this = _super.call(this, true, target, 'sessionDisconnected') || this;\n        _this.reason = reason;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    SessionDisconnectedEvent.prototype.callDefaultBehavior = function () {\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n        var session = this.target;\n        // Dispose and delete all remote Connections\n        session.remoteConnections.forEach(function (remoteConnection) {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            var connectionId = remoteConnection.connectionId;\n            if (!!((_a = session.remoteConnections.get(connectionId)) === null || _a === void 0 ? void 0 : _a.stream)) {\n                (_b = session.remoteConnections.get(connectionId)) === null || _b === void 0 ? void 0 : _b.stream.disposeWebRtcPeer();\n                (_c = session.remoteConnections.get(connectionId)) === null || _c === void 0 ? void 0 : _c.stream.disposeMediaStream();\n                if ((_d = session.remoteConnections.get(connectionId)) === null || _d === void 0 ? void 0 : _d.stream.streamManager) {\n                    (_e = session.remoteConnections.get(connectionId)) === null || _e === void 0 ? void 0 : _e.stream.streamManager.removeAllVideos();\n                }\n                var streamId = (_g = (_f = session.remoteConnections.get(connectionId)) === null || _f === void 0 ? void 0 : _f.stream) === null || _g === void 0 ? void 0 : _g.streamId;\n                if (!!streamId) {\n                    session.remoteStreamsCreated.delete(streamId);\n                }\n                (_h = session.remoteConnections.get(connectionId)) === null || _h === void 0 ? void 0 : _h.dispose();\n            }\n            session.remoteConnections.delete(connectionId);\n        });\n    };\n    return SessionDisconnectedEvent;\n}(Event_1.Event));\nexports.SessionDisconnectedEvent = SessionDisconnectedEvent;\n//# sourceMappingURL=SessionDisconnectedEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvU2Vzc2lvbkRpc2Nvbm5lY3RlZEV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQywyRkFBUztBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyxxSEFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNELGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvRXZlbnRzL1Nlc3Npb25EaXNjb25uZWN0ZWRFdmVudC5qcz80YjRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXNzaW9uRGlzY29ubmVjdGVkRXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xudmFyIE9wZW5WaWR1TG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vTG9nZ2VyL09wZW5WaWR1TG9nZ2VyXCIpO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBsb2dnZXIgPSBPcGVuVmlkdUxvZ2dlcl8xLk9wZW5WaWR1TG9nZ2VyLmdldEluc3RhbmNlKCk7XG4vKipcbiAqIFRyaWdnZXJlZCBieSB7QGxpbmsgU2Vzc2lvbkV2ZW50TWFwLnNlc3Npb25EaXNjb25uZWN0ZWR9XG4gKi9cbnZhciBTZXNzaW9uRGlzY29ubmVjdGVkRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNlc3Npb25EaXNjb25uZWN0ZWRFdmVudCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2Vzc2lvbkRpc2Nvbm5lY3RlZEV2ZW50KHRhcmdldCwgcmVhc29uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHRydWUsIHRhcmdldCwgJ3Nlc3Npb25EaXNjb25uZWN0ZWQnKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIFNlc3Npb25EaXNjb25uZWN0ZWRFdmVudC5wcm90b3R5cGUuY2FsbERlZmF1bHRCZWhhdmlvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJDYWxsaW5nIGRlZmF1bHQgYmVoYXZpb3IgdXBvbiAnXCIgKyB0aGlzLnR5cGUgKyBcIicgZXZlbnQgZGlzcGF0Y2hlZCBieSAnU2Vzc2lvbidcIik7XG4gICAgICAgIHZhciBzZXNzaW9uID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIC8vIERpc3Bvc2UgYW5kIGRlbGV0ZSBhbGwgcmVtb3RlIENvbm5lY3Rpb25zXG4gICAgICAgIHNlc3Npb24ucmVtb3RlQ29ubmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocmVtb3RlQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uSWQgPSByZW1vdGVDb25uZWN0aW9uLmNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgIGlmICghISgoX2EgPSBzZXNzaW9uLnJlbW90ZUNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RyZWFtKSkge1xuICAgICAgICAgICAgICAgIChfYiA9IHNlc3Npb24ucmVtb3RlQ29ubmVjdGlvbnMuZ2V0KGNvbm5lY3Rpb25JZCkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdHJlYW0uZGlzcG9zZVdlYlJ0Y1BlZXIoKTtcbiAgICAgICAgICAgICAgICAoX2MgPSBzZXNzaW9uLnJlbW90ZUNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc3RyZWFtLmRpc3Bvc2VNZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgICAgIGlmICgoX2QgPSBzZXNzaW9uLnJlbW90ZUNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc3RyZWFtLnN0cmVhbU1hbmFnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9lID0gc2Vzc2lvbi5yZW1vdGVDb25uZWN0aW9ucy5nZXQoY29ubmVjdGlvbklkKSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnN0cmVhbS5zdHJlYW1NYW5hZ2VyLnJlbW92ZUFsbFZpZGVvcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RyZWFtSWQgPSAoX2cgPSAoX2YgPSBzZXNzaW9uLnJlbW90ZUNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Yuc3RyZWFtKSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cuc3RyZWFtSWQ7XG4gICAgICAgICAgICAgICAgaWYgKCEhc3RyZWFtSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5yZW1vdGVTdHJlYW1zQ3JlYXRlZC5kZWxldGUoc3RyZWFtSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoX2ggPSBzZXNzaW9uLnJlbW90ZUNvbm5lY3Rpb25zLmdldChjb25uZWN0aW9uSWQpKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Vzc2lvbi5yZW1vdGVDb25uZWN0aW9ucy5kZWxldGUoY29ubmVjdGlvbklkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2Vzc2lvbkRpc2Nvbm5lY3RlZEV2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLlNlc3Npb25EaXNjb25uZWN0ZWRFdmVudCA9IFNlc3Npb25EaXNjb25uZWN0ZWRFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlc3Npb25EaXNjb25uZWN0ZWRFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SessionDisconnectedEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SignalEvent.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SignalEvent.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SignalEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by {@link SessionEventMap.signal}\n */\nvar SignalEvent = /** @class */ (function (_super) {\n    __extends(SignalEvent, _super);\n    /**\n     * @hidden\n     */\n    function SignalEvent(target, type, data, from) {\n        var _this = _super.call(this, false, target, 'signal') || this;\n        if (!!type) {\n            _this.type = 'signal:' + type;\n        }\n        _this.data = data;\n        _this.from = from;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    SignalEvent.prototype.callDefaultBehavior = function () { };\n    return SignalEvent;\n}(Event_1.Event));\nexports.SignalEvent = SignalEvent;\n//# sourceMappingURL=SignalEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvU2lnbmFsRXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsY0FBYyxtQkFBTyxDQUFDLDJGQUFTO0FBQy9CO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0V2ZW50cy9TaWduYWxFdmVudC5qcz9mOTkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaWduYWxFdmVudCA9IHZvaWQgMDtcbnZhciBFdmVudF8xID0gcmVxdWlyZShcIi4vRXZlbnRcIik7XG4vKipcbiAqIFRyaWdnZXJlZCBieSB7QGxpbmsgU2Vzc2lvbkV2ZW50TWFwLnNpZ25hbH1cbiAqL1xudmFyIFNpZ25hbEV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaWduYWxFdmVudCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2lnbmFsRXZlbnQodGFyZ2V0LCB0eXBlLCBkYXRhLCBmcm9tKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZhbHNlLCB0YXJnZXQsICdzaWduYWwnKSB8fCB0aGlzO1xuICAgICAgICBpZiAoISF0eXBlKSB7XG4gICAgICAgICAgICBfdGhpcy50eXBlID0gJ3NpZ25hbDonICsgdHlwZTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgX3RoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxuICAgIFNpZ25hbEV2ZW50LnByb3RvdHlwZS5jYWxsRGVmYXVsdEJlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBTaWduYWxFdmVudDtcbn0oRXZlbnRfMS5FdmVudCkpO1xuZXhwb3J0cy5TaWduYWxFdmVudCA9IFNpZ25hbEV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2lnbmFsRXZlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SignalEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SpeechToTextEvent.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SpeechToTextEvent.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpeechToTextEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by {@link SessionEventMap.speechToTextMessage}\n */\nvar SpeechToTextEvent = /** @class */ (function (_super) {\n    __extends(SpeechToTextEvent, _super);\n    /**\n     * @hidden\n     */\n    function SpeechToTextEvent(target, connection, text, reason, raw, lang) {\n        var _this = _super.call(this, false, target, 'speechToTextMessage') || this;\n        _this.connection = connection;\n        _this.text = text;\n        _this.reason = reason;\n        _this.raw = raw;\n        _this.lang = lang;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    SpeechToTextEvent.prototype.callDefaultBehavior = function () { };\n    return SpeechToTextEvent;\n}(Event_1.Event));\nexports.SpeechToTextEvent = SpeechToTextEvent;\n//# sourceMappingURL=SpeechToTextEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvU3BlZWNoVG9UZXh0RXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsY0FBYyxtQkFBTyxDQUFDLDJGQUFTO0FBQy9CO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0V2ZW50cy9TcGVlY2hUb1RleHRFdmVudC5qcz9mY2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TcGVlY2hUb1RleHRFdmVudCA9IHZvaWQgMDtcbnZhciBFdmVudF8xID0gcmVxdWlyZShcIi4vRXZlbnRcIik7XG4vKipcbiAqIFRyaWdnZXJlZCBieSB7QGxpbmsgU2Vzc2lvbkV2ZW50TWFwLnNwZWVjaFRvVGV4dE1lc3NhZ2V9XG4gKi9cbnZhciBTcGVlY2hUb1RleHRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoVG9UZXh0RXZlbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNwZWVjaFRvVGV4dEV2ZW50KHRhcmdldCwgY29ubmVjdGlvbiwgdGV4dCwgcmVhc29uLCByYXcsIGxhbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZmFsc2UsIHRhcmdldCwgJ3NwZWVjaFRvVGV4dE1lc3NhZ2UnKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgX3RoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIF90aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgX3RoaXMucmF3ID0gcmF3O1xuICAgICAgICBfdGhpcy5sYW5nID0gbGFuZztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XG4gICAgU3BlZWNoVG9UZXh0RXZlbnQucHJvdG90eXBlLmNhbGxEZWZhdWx0QmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgcmV0dXJuIFNwZWVjaFRvVGV4dEV2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLlNwZWVjaFRvVGV4dEV2ZW50ID0gU3BlZWNoVG9UZXh0RXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hUb1RleHRFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SpeechToTextEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamEvent.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamEvent.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\nvar Publisher_1 = __webpack_require__(/*! ../../OpenVidu/Publisher */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Publisher.js\");\nvar Session_1 = __webpack_require__(/*! ../../OpenVidu/Session */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Session.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Triggered by:\n * - `streamCreated` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamCreated) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamCreated) objects)\n * - `streamDestroyed` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamDestroyed) and [Publisher](/en/stable/api/openvidu-browser/interfaces/PublisherEventMap.html#streamDestroyed) objects)\n */\nvar StreamEvent = /** @class */ (function (_super) {\n    __extends(StreamEvent, _super);\n    /**\n     * @hidden\n     */\n    function StreamEvent(cancelable, target, type, stream, reason) {\n        var _this = _super.call(this, cancelable, target, type) || this;\n        _this.stream = stream;\n        _this.reason = reason;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    StreamEvent.prototype.callDefaultBehavior = function () {\n        if (this.type === 'streamDestroyed') {\n            if (this.target instanceof Session_1.Session) {\n                // Remote Stream\n                logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n                this.stream.disposeWebRtcPeer();\n            }\n            else if (this.target instanceof Publisher_1.Publisher) {\n                // Local Stream\n                logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Publisher'\");\n                clearInterval(this.target.screenShareResizeInterval);\n                this.stream.isLocalStreamReadyToPublish = false;\n                // Delete Publisher object from OpenVidu publishers array\n                var openviduPublishers = this.target.openvidu.publishers;\n                for (var i = 0; i < openviduPublishers.length; i++) {\n                    if (openviduPublishers[i] === this.target) {\n                        openviduPublishers.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n            // Dispose the MediaStream local object\n            this.stream.disposeMediaStream();\n            // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined\n            // (method Session.subscribe must have been called)\n            if (this.stream.streamManager)\n                this.stream.streamManager.removeAllVideos();\n            // Delete stream from Session.remoteStreamsCreated map\n            this.stream.session.remoteStreamsCreated.delete(this.stream.streamId);\n            // Delete StreamOptionsServer from remote Connection\n            var remoteConnection = this.stream.session.remoteConnections.get(this.stream.connection.connectionId);\n            if (!!remoteConnection && !!remoteConnection.remoteOptions) {\n                var streamOptionsServer = remoteConnection.remoteOptions.streams;\n                for (var i = streamOptionsServer.length - 1; i >= 0; --i) {\n                    if (streamOptionsServer[i].id === this.stream.streamId) {\n                        streamOptionsServer.splice(i, 1);\n                    }\n                }\n            }\n        }\n    };\n    return StreamEvent;\n}(Event_1.Event));\nexports.StreamEvent = StreamEvent;\n//# sourceMappingURL=StreamEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamManagerEvent.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamManagerEvent.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamManagerEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by:\n * - {@link StreamManagerEventMap.streamPlaying}\n * - {@link StreamManagerEventMap.streamAudioVolumeChange}\n */\nvar StreamManagerEvent = /** @class */ (function (_super) {\n    __extends(StreamManagerEvent, _super);\n    /**\n     * @hidden\n     */\n    function StreamManagerEvent(target, type, value) {\n        var _this = _super.call(this, false, target, type) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    StreamManagerEvent.prototype.callDefaultBehavior = function () { };\n    return StreamManagerEvent;\n}(Event_1.Event));\nexports.StreamManagerEvent = StreamManagerEvent;\n//# sourceMappingURL=StreamManagerEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvU3RyZWFtTWFuYWdlckV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGNBQWMsbUJBQU8sQ0FBQywyRkFBUztBQUMvQjtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvRXZlbnRzL1N0cmVhbU1hbmFnZXJFdmVudC5qcz85MDliIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1NYW5hZ2VyRXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xuLyoqXG4gKiBUcmlnZ2VyZWQgYnk6XG4gKiAtIHtAbGluayBTdHJlYW1NYW5hZ2VyRXZlbnRNYXAuc3RyZWFtUGxheWluZ31cbiAqIC0ge0BsaW5rIFN0cmVhbU1hbmFnZXJFdmVudE1hcC5zdHJlYW1BdWRpb1ZvbHVtZUNoYW5nZX1cbiAqL1xudmFyIFN0cmVhbU1hbmFnZXJFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3RyZWFtTWFuYWdlckV2ZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdHJlYW1NYW5hZ2VyRXZlbnQodGFyZ2V0LCB0eXBlLCB2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmYWxzZSwgdGFyZ2V0LCB0eXBlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHlcbiAgICBTdHJlYW1NYW5hZ2VyRXZlbnQucHJvdG90eXBlLmNhbGxEZWZhdWx0QmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgcmV0dXJuIFN0cmVhbU1hbmFnZXJFdmVudDtcbn0oRXZlbnRfMS5FdmVudCkpO1xuZXhwb3J0cy5TdHJlYW1NYW5hZ2VyRXZlbnQgPSBTdHJlYW1NYW5hZ2VyRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdHJlYW1NYW5hZ2VyRXZlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamManagerEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamPropertyChangedEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by `streamPropertyChanged` (available for [Session](/en/stable/api/openvidu-browser/interfaces/SessionEventMap.html#streamPropertyChanged) and [StreamManager](/en/stable/api/openvidu-browser/interfaces/StreamManagerEventMap.html#streamPropertyChanged) objects)\n */\nvar StreamPropertyChangedEvent = /** @class */ (function (_super) {\n    __extends(StreamPropertyChangedEvent, _super);\n    /**\n     * @hidden\n     */\n    function StreamPropertyChangedEvent(target, stream, changedProperty, newValue, oldValue, reason) {\n        var _this = _super.call(this, false, target, 'streamPropertyChanged') || this;\n        _this.stream = stream;\n        _this.changedProperty = changedProperty;\n        _this.newValue = newValue;\n        _this.oldValue = oldValue;\n        _this.reason = reason;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    StreamPropertyChangedEvent.prototype.callDefaultBehavior = function () { };\n    return StreamPropertyChangedEvent;\n}(Event_1.Event));\nexports.StreamPropertyChangedEvent = StreamPropertyChangedEvent;\n//# sourceMappingURL=StreamPropertyChangedEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvU3RyZWFtUHJvcGVydHlDaGFuZ2VkRXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEMsY0FBYyxtQkFBTyxDQUFDLDJGQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvU3RyZWFtUHJvcGVydHlDaGFuZ2VkRXZlbnQuanM/ZTkzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAoQykgQ29weXJpZ2h0IDIwMTctMjAyMiBPcGVuVmlkdSAoaHR0cHM6Ly9vcGVudmlkdS5pbylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtUHJvcGVydHlDaGFuZ2VkRXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xuLyoqXG4gKiBUcmlnZ2VyZWQgYnkgYHN0cmVhbVByb3BlcnR5Q2hhbmdlZGAgKGF2YWlsYWJsZSBmb3IgW1Nlc3Npb25dKC9lbi9zdGFibGUvYXBpL29wZW52aWR1LWJyb3dzZXIvaW50ZXJmYWNlcy9TZXNzaW9uRXZlbnRNYXAuaHRtbCNzdHJlYW1Qcm9wZXJ0eUNoYW5nZWQpIGFuZCBbU3RyZWFtTWFuYWdlcl0oL2VuL3N0YWJsZS9hcGkvb3BlbnZpZHUtYnJvd3Nlci9pbnRlcmZhY2VzL1N0cmVhbU1hbmFnZXJFdmVudE1hcC5odG1sI3N0cmVhbVByb3BlcnR5Q2hhbmdlZCkgb2JqZWN0cylcbiAqL1xudmFyIFN0cmVhbVByb3BlcnR5Q2hhbmdlZEV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdHJlYW1Qcm9wZXJ0eUNoYW5nZWRFdmVudCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RyZWFtUHJvcGVydHlDaGFuZ2VkRXZlbnQodGFyZ2V0LCBzdHJlYW0sIGNoYW5nZWRQcm9wZXJ0eSwgbmV3VmFsdWUsIG9sZFZhbHVlLCByZWFzb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZmFsc2UsIHRhcmdldCwgJ3N0cmVhbVByb3BlcnR5Q2hhbmdlZCcpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgX3RoaXMuY2hhbmdlZFByb3BlcnR5ID0gY2hhbmdlZFByb3BlcnR5O1xuICAgICAgICBfdGhpcy5uZXdWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBfdGhpcy5vbGRWYWx1ZSA9IG9sZFZhbHVlO1xuICAgICAgICBfdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxuICAgIFN0cmVhbVByb3BlcnR5Q2hhbmdlZEV2ZW50LnByb3RvdHlwZS5jYWxsRGVmYXVsdEJlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBTdHJlYW1Qcm9wZXJ0eUNoYW5nZWRFdmVudDtcbn0oRXZlbnRfMS5FdmVudCkpO1xuZXhwb3J0cy5TdHJlYW1Qcm9wZXJ0eUNoYW5nZWRFdmVudCA9IFN0cmVhbVByb3BlcnR5Q2hhbmdlZEV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RyZWFtUHJvcGVydHlDaGFuZ2VkRXZlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Types/Types.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Types/Types.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=Types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvVHlwZXMvVHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0V2ZW50cy9UeXBlcy9UeXBlcy5qcz9jMTQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Types/Types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/VideoElementEvent.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Events/VideoElementEvent.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VideoElementEvent = void 0;\nvar Event_1 = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\n/**\n * Triggered by:\n * - {@link StreamManagerEventMap.videoElementCreated}\n * - {@link StreamManagerEventMap.videoElementDestroyed}\n */\nvar VideoElementEvent = /** @class */ (function (_super) {\n    __extends(VideoElementEvent, _super);\n    /**\n     * @hidden\n     */\n    function VideoElementEvent(element, target, type) {\n        var _this = _super.call(this, false, target, type) || this;\n        _this.element = element;\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    VideoElementEvent.prototype.callDefaultBehavior = function () { };\n    return VideoElementEvent;\n}(Event_1.Event));\nexports.VideoElementEvent = VideoElementEvent;\n//# sourceMappingURL=VideoElementEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvVmlkZW9FbGVtZW50RXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDdkYsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsY0FBYyxtQkFBTyxDQUFDLDJGQUFTO0FBQy9CO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9FdmVudHMvVmlkZW9FbGVtZW50RXZlbnQuanM/ZjAyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiAoQykgQ29weXJpZ2h0IDIwMTctMjAyMiBPcGVuVmlkdSAoaHR0cHM6Ly9vcGVudmlkdS5pbylcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmlkZW9FbGVtZW50RXZlbnQgPSB2b2lkIDA7XG52YXIgRXZlbnRfMSA9IHJlcXVpcmUoXCIuL0V2ZW50XCIpO1xuLyoqXG4gKiBUcmlnZ2VyZWQgYnk6XG4gKiAtIHtAbGluayBTdHJlYW1NYW5hZ2VyRXZlbnRNYXAudmlkZW9FbGVtZW50Q3JlYXRlZH1cbiAqIC0ge0BsaW5rIFN0cmVhbU1hbmFnZXJFdmVudE1hcC52aWRlb0VsZW1lbnREZXN0cm95ZWR9XG4gKi9cbnZhciBWaWRlb0VsZW1lbnRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVmlkZW9FbGVtZW50RXZlbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFZpZGVvRWxlbWVudEV2ZW50KGVsZW1lbnQsIHRhcmdldCwgdHlwZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmYWxzZSwgdGFyZ2V0LCB0eXBlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XG4gICAgVmlkZW9FbGVtZW50RXZlbnQucHJvdG90eXBlLmNhbGxEZWZhdWx0QmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgcmV0dXJuIFZpZGVvRWxlbWVudEV2ZW50O1xufShFdmVudF8xLkV2ZW50KSk7XG5leHBvcnRzLlZpZGVvRWxlbWVudEV2ZW50ID0gVmlkZW9FbGVtZW50RXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaWRlb0VsZW1lbnRFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/VideoElementEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/Mapper.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/Mapper.js ***!
  \***************************************************************************************************/
/***/ ((module) => {

eval("function Mapper() {\n    var sources = {};\n    this.forEach = function (callback) {\n        for (var key in sources) {\n            var source = sources[key];\n            for (var key2 in source)\n                callback(source[key2]);\n        }\n    };\n    this.get = function (id, source) {\n        var ids = sources[source];\n        if (ids == undefined)\n            return undefined;\n        return ids[id];\n    };\n    this.remove = function (id, source) {\n        var ids = sources[source];\n        if (ids == undefined)\n            return;\n        delete ids[id];\n        for (var i in ids) {\n            return false;\n        }\n        delete sources[source];\n    };\n    this.set = function (value, id, source) {\n        if (value == undefined)\n            return this.remove(id, source);\n        var ids = sources[source];\n        if (ids == undefined)\n            sources[source] = ids = {};\n        ids[id] = value;\n    };\n}\nMapper.prototype.pop = function (id, source) {\n    var value = this.get(id, source);\n    if (value == undefined)\n        return undefined;\n    this.remove(id, source);\n    return value;\n};\nmodule.exports = Mapper;\n//# sourceMappingURL=Mapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL01hcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvS3VyZW50b1V0aWxzL2t1cmVudG8tanNvbnJwYy9NYXBwZXIuanM/MWMzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBNYXBwZXIoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICB0aGlzLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZXMpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2tleV07XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkyIGluIHNvdXJjZSlcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhzb3VyY2Vba2V5Ml0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldCA9IGZ1bmN0aW9uIChpZCwgc291cmNlKSB7XG4gICAgICAgIHZhciBpZHMgPSBzb3VyY2VzW3NvdXJjZV07XG4gICAgICAgIGlmIChpZHMgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGlkc1tpZF07XG4gICAgfTtcbiAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChpZCwgc291cmNlKSB7XG4gICAgICAgIHZhciBpZHMgPSBzb3VyY2VzW3NvdXJjZV07XG4gICAgICAgIGlmIChpZHMgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZWxldGUgaWRzW2lkXTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBpZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc291cmNlc1tzb3VyY2VdO1xuICAgIH07XG4gICAgdGhpcy5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIGlkLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZShpZCwgc291cmNlKTtcbiAgICAgICAgdmFyIGlkcyA9IHNvdXJjZXNbc291cmNlXTtcbiAgICAgICAgaWYgKGlkcyA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzb3VyY2VzW3NvdXJjZV0gPSBpZHMgPSB7fTtcbiAgICAgICAgaWRzW2lkXSA9IHZhbHVlO1xuICAgIH07XG59XG5NYXBwZXIucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uIChpZCwgc291cmNlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoaWQsIHNvdXJjZSk7XG4gICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0aGlzLnJlbW92ZShpZCwgc291cmNlKTtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/Mapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var JsonRpcClient = __webpack_require__(/*! ./jsonrpcclient */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/jsonrpcclient.js\");\nexports.JsonRpcClient = JsonRpcClient;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL2NsaWVudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CLG1CQUFPLENBQUMseUlBQWlCO0FBQzdDLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvS3VyZW50b1V0aWxzL2t1cmVudG8tanNvbnJwYy9jbGllbnRzL2luZGV4LmpzP2Q5ZGYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEpzb25ScGNDbGllbnQgPSByZXF1aXJlKCcuL2pzb25ycGNjbGllbnQnKTtcbmV4cG9ydHMuSnNvblJwY0NsaWVudCA9IEpzb25ScGNDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/jsonrpcclient.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/jsonrpcclient.js ***!
  \******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var RpcBuilder = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/index.js\");\nvar WebSocketWithReconnection = __webpack_require__(/*! ./transports/webSocketWithReconnection */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/webSocketWithReconnection.js\");\nvar OpenViduLogger = (__webpack_require__(/*! ../../../Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\").OpenViduLogger);\nDate.now =\n    Date.now ||\n        function () {\n            return +new Date();\n        };\nvar PING_INTERVAL = 5000;\nvar RECONNECTING = 'RECONNECTING';\nvar CONNECTED = 'CONNECTED';\nvar DISCONNECTED = 'DISCONNECTED';\nvar Logger = OpenViduLogger.getInstance();\nfunction JsonRpcClient(configuration) {\n    var self = this;\n    var wsConfig = configuration.ws;\n    var notReconnectIfNumLessThan = -1;\n    var pingNextNum = 0;\n    var enabledPings = true;\n    var pingPongStarted = false;\n    var pingInterval;\n    var status = DISCONNECTED;\n    var onreconnecting = wsConfig.onreconnecting;\n    var onreconnected = wsConfig.onreconnected;\n    var onconnected = wsConfig.onconnected;\n    var onerror = wsConfig.onerror;\n    configuration.rpc.pull = function (params, request) {\n        request.reply(null, 'push');\n    };\n    wsConfig.onreconnecting = function () {\n        Logger.debug('--------- ONRECONNECTING -----------');\n        if (status === RECONNECTING) {\n            Logger.error('Websocket already in RECONNECTING state when receiving a new ONRECONNECTING message. Ignoring it');\n            return;\n        }\n        stopPing();\n        status = RECONNECTING;\n        if (onreconnecting) {\n            onreconnecting();\n        }\n    };\n    wsConfig.onreconnected = function () {\n        Logger.debug('--------- ONRECONNECTED -----------');\n        if (status === CONNECTED) {\n            Logger.error('Websocket already in CONNECTED state when receiving a new ONRECONNECTED message. Ignoring it');\n            return;\n        }\n        status = CONNECTED;\n        updateNotReconnectIfLessThan();\n        if (onreconnected) {\n            onreconnected();\n        }\n    };\n    wsConfig.onconnected = function () {\n        Logger.debug('--------- ONCONNECTED -----------');\n        if (status === CONNECTED) {\n            Logger.error('Websocket already in CONNECTED state when receiving a new ONCONNECTED message. Ignoring it');\n            return;\n        }\n        status = CONNECTED;\n        enabledPings = true;\n        usePing();\n        if (onconnected) {\n            onconnected();\n        }\n    };\n    wsConfig.onerror = function (error) {\n        Logger.debug('--------- ONERROR -----------');\n        status = DISCONNECTED;\n        stopPing();\n        if (onerror) {\n            onerror(error);\n        }\n    };\n    var ws = new WebSocketWithReconnection(wsConfig);\n    Logger.debug('Connecting websocket to URI: ' + wsConfig.uri);\n    var rpcBuilderOptions = {\n        request_timeout: configuration.rpc.requestTimeout,\n        ping_request_timeout: configuration.rpc.heartbeatRequestTimeout\n    };\n    var rpc = new RpcBuilder(RpcBuilder.packers.JsonRPC, rpcBuilderOptions, ws, function (request) {\n        Logger.debug('Received request: ' + JSON.stringify(request));\n        try {\n            var func = configuration.rpc[request.method];\n            if (func === undefined) {\n                Logger.error('Method ' + request.method + ' not registered in client');\n            }\n            else {\n                func(request.params, request);\n            }\n        }\n        catch (err) {\n            Logger.error('Exception processing request: ' + JSON.stringify(request));\n            Logger.error(err);\n        }\n    });\n    this.send = function (method, params, callback) {\n        var requestTime = Date.now();\n        rpc.encode(method, params, function (error, result) {\n            if (error) {\n                try {\n                    Logger.error('ERROR:' +\n                        error.message +\n                        ' in Request: method:' +\n                        method +\n                        ' params:' +\n                        JSON.stringify(params) +\n                        ' request:' +\n                        error.request);\n                    if (error.data) {\n                        Logger.error('ERROR DATA:' + JSON.stringify(error.data));\n                    }\n                }\n                catch (e) { }\n                error.requestTime = requestTime;\n            }\n            if (callback) {\n                if (result != undefined && result.value !== 'pong') {\n                    Logger.debug('Response: ' + JSON.stringify(result));\n                }\n                callback(error, result);\n            }\n        });\n    };\n    function updateNotReconnectIfLessThan() {\n        Logger.debug('notReconnectIfNumLessThan = ' + pingNextNum + ' (old=' + notReconnectIfNumLessThan + ')');\n        notReconnectIfNumLessThan = pingNextNum;\n    }\n    function sendPing() {\n        if (enabledPings) {\n            var params = null;\n            if (pingNextNum == 0 || pingNextNum == notReconnectIfNumLessThan) {\n                params = {\n                    interval: configuration.heartbeat || PING_INTERVAL\n                };\n            }\n            pingNextNum++;\n            self.send('ping', params, (function (pingNum) {\n                return function (error, result) {\n                    if (error) {\n                        Logger.debug('Error in ping request #' + pingNum + ' (' + error.message + ')');\n                        if (pingNum > notReconnectIfNumLessThan) {\n                            enabledPings = false;\n                            updateNotReconnectIfLessThan();\n                            Logger.debug('Server did not respond to ping message #' + pingNum + '. Reconnecting... ');\n                            ws.reconnectWs();\n                        }\n                    }\n                };\n            })(pingNextNum));\n        }\n        else {\n            Logger.debug('Trying to send ping, but ping is not enabled');\n        }\n    }\n    function usePing() {\n        if (!pingPongStarted) {\n            Logger.debug('Starting ping (if configured)');\n            pingPongStarted = true;\n            if (configuration.heartbeat != undefined) {\n                pingInterval = setInterval(sendPing, configuration.heartbeat);\n                sendPing();\n            }\n        }\n    }\n    function stopPing() {\n        clearInterval(pingInterval);\n        pingPongStarted = false;\n        enabledPings = false;\n        pingNextNum = -1;\n        rpc.cancel();\n    }\n    this.close = function (code, reason) {\n        Logger.debug('Closing  with code: ' + code + ' because: ' + reason);\n        if (pingInterval != undefined) {\n            Logger.debug('Clearing ping interval');\n            clearInterval(pingInterval);\n        }\n        pingPongStarted = false;\n        enabledPings = false;\n        ws.close(code, reason);\n    };\n    this.reconnect = function () {\n        ws.reconnectWs();\n    };\n    this.resetPing = function () {\n        enabledPings = true;\n        pingNextNum = 0;\n        usePing();\n    };\n    this.getReadyState = function () {\n        return ws.getReadyState();\n    };\n}\nmodule.exports = JsonRpcClient;\n//# sourceMappingURL=jsonrpcclient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL2NsaWVudHMvanNvbnJwY2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyw2R0FBSztBQUM5QixnQ0FBZ0MsbUJBQU8sQ0FBQyx1TEFBd0M7QUFDaEYscUJBQXFCLGlLQUF3RDtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvS3VyZW50b1V0aWxzL2t1cmVudG8tanNvbnJwYy9jbGllbnRzL2pzb25ycGNjbGllbnQuanM/NDMzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUnBjQnVpbGRlciA9IHJlcXVpcmUoJy4uLycpO1xudmFyIFdlYlNvY2tldFdpdGhSZWNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvd2ViU29ja2V0V2l0aFJlY29ubmVjdGlvbicpO1xudmFyIE9wZW5WaWR1TG9nZ2VyID0gcmVxdWlyZSgnLi4vLi4vLi4vTG9nZ2VyL09wZW5WaWR1TG9nZ2VyJykuT3BlblZpZHVMb2dnZXI7XG5EYXRlLm5vdyA9XG4gICAgRGF0ZS5ub3cgfHxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICtuZXcgRGF0ZSgpO1xuICAgICAgICB9O1xudmFyIFBJTkdfSU5URVJWQUwgPSA1MDAwO1xudmFyIFJFQ09OTkVDVElORyA9ICdSRUNPTk5FQ1RJTkcnO1xudmFyIENPTk5FQ1RFRCA9ICdDT05ORUNURUQnO1xudmFyIERJU0NPTk5FQ1RFRCA9ICdESVNDT05ORUNURUQnO1xudmFyIExvZ2dlciA9IE9wZW5WaWR1TG9nZ2VyLmdldEluc3RhbmNlKCk7XG5mdW5jdGlvbiBKc29uUnBjQ2xpZW50KGNvbmZpZ3VyYXRpb24pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHdzQ29uZmlnID0gY29uZmlndXJhdGlvbi53cztcbiAgICB2YXIgbm90UmVjb25uZWN0SWZOdW1MZXNzVGhhbiA9IC0xO1xuICAgIHZhciBwaW5nTmV4dE51bSA9IDA7XG4gICAgdmFyIGVuYWJsZWRQaW5ncyA9IHRydWU7XG4gICAgdmFyIHBpbmdQb25nU3RhcnRlZCA9IGZhbHNlO1xuICAgIHZhciBwaW5nSW50ZXJ2YWw7XG4gICAgdmFyIHN0YXR1cyA9IERJU0NPTk5FQ1RFRDtcbiAgICB2YXIgb25yZWNvbm5lY3RpbmcgPSB3c0NvbmZpZy5vbnJlY29ubmVjdGluZztcbiAgICB2YXIgb25yZWNvbm5lY3RlZCA9IHdzQ29uZmlnLm9ucmVjb25uZWN0ZWQ7XG4gICAgdmFyIG9uY29ubmVjdGVkID0gd3NDb25maWcub25jb25uZWN0ZWQ7XG4gICAgdmFyIG9uZXJyb3IgPSB3c0NvbmZpZy5vbmVycm9yO1xuICAgIGNvbmZpZ3VyYXRpb24ucnBjLnB1bGwgPSBmdW5jdGlvbiAocGFyYW1zLCByZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3QucmVwbHkobnVsbCwgJ3B1c2gnKTtcbiAgICB9O1xuICAgIHdzQ29uZmlnLm9ucmVjb25uZWN0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBMb2dnZXIuZGVidWcoJy0tLS0tLS0tLSBPTlJFQ09OTkVDVElORyAtLS0tLS0tLS0tLScpO1xuICAgICAgICBpZiAoc3RhdHVzID09PSBSRUNPTk5FQ1RJTkcpIHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcignV2Vic29ja2V0IGFscmVhZHkgaW4gUkVDT05ORUNUSU5HIHN0YXRlIHdoZW4gcmVjZWl2aW5nIGEgbmV3IE9OUkVDT05ORUNUSU5HIG1lc3NhZ2UuIElnbm9yaW5nIGl0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RvcFBpbmcoKTtcbiAgICAgICAgc3RhdHVzID0gUkVDT05ORUNUSU5HO1xuICAgICAgICBpZiAob25yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgIG9ucmVjb25uZWN0aW5nKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHdzQ29uZmlnLm9ucmVjb25uZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIExvZ2dlci5kZWJ1ZygnLS0tLS0tLS0tIE9OUkVDT05ORUNURUQgLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gQ09OTkVDVEVEKSB7XG4gICAgICAgICAgICBMb2dnZXIuZXJyb3IoJ1dlYnNvY2tldCBhbHJlYWR5IGluIENPTk5FQ1RFRCBzdGF0ZSB3aGVuIHJlY2VpdmluZyBhIG5ldyBPTlJFQ09OTkVDVEVEIG1lc3NhZ2UuIElnbm9yaW5nIGl0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdHVzID0gQ09OTkVDVEVEO1xuICAgICAgICB1cGRhdGVOb3RSZWNvbm5lY3RJZkxlc3NUaGFuKCk7XG4gICAgICAgIGlmIChvbnJlY29ubmVjdGVkKSB7XG4gICAgICAgICAgICBvbnJlY29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHdzQ29uZmlnLm9uY29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBMb2dnZXIuZGVidWcoJy0tLS0tLS0tLSBPTkNPTk5FQ1RFRCAtLS0tLS0tLS0tLScpO1xuICAgICAgICBpZiAoc3RhdHVzID09PSBDT05ORUNURUQpIHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcignV2Vic29ja2V0IGFscmVhZHkgaW4gQ09OTkVDVEVEIHN0YXRlIHdoZW4gcmVjZWl2aW5nIGEgbmV3IE9OQ09OTkVDVEVEIG1lc3NhZ2UuIElnbm9yaW5nIGl0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdHVzID0gQ09OTkVDVEVEO1xuICAgICAgICBlbmFibGVkUGluZ3MgPSB0cnVlO1xuICAgICAgICB1c2VQaW5nKCk7XG4gICAgICAgIGlmIChvbmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgb25jb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgd3NDb25maWcub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBMb2dnZXIuZGVidWcoJy0tLS0tLS0tLSBPTkVSUk9SIC0tLS0tLS0tLS0tJyk7XG4gICAgICAgIHN0YXR1cyA9IERJU0NPTk5FQ1RFRDtcbiAgICAgICAgc3RvcFBpbmcoKTtcbiAgICAgICAgaWYgKG9uZXJyb3IpIHtcbiAgICAgICAgICAgIG9uZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgd3MgPSBuZXcgV2ViU29ja2V0V2l0aFJlY29ubmVjdGlvbih3c0NvbmZpZyk7XG4gICAgTG9nZ2VyLmRlYnVnKCdDb25uZWN0aW5nIHdlYnNvY2tldCB0byBVUkk6ICcgKyB3c0NvbmZpZy51cmkpO1xuICAgIHZhciBycGNCdWlsZGVyT3B0aW9ucyA9IHtcbiAgICAgICAgcmVxdWVzdF90aW1lb3V0OiBjb25maWd1cmF0aW9uLnJwYy5yZXF1ZXN0VGltZW91dCxcbiAgICAgICAgcGluZ19yZXF1ZXN0X3RpbWVvdXQ6IGNvbmZpZ3VyYXRpb24ucnBjLmhlYXJ0YmVhdFJlcXVlc3RUaW1lb3V0XG4gICAgfTtcbiAgICB2YXIgcnBjID0gbmV3IFJwY0J1aWxkZXIoUnBjQnVpbGRlci5wYWNrZXJzLkpzb25SUEMsIHJwY0J1aWxkZXJPcHRpb25zLCB3cywgZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgTG9nZ2VyLmRlYnVnKCdSZWNlaXZlZCByZXF1ZXN0OiAnICsgSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBjb25maWd1cmF0aW9uLnJwY1tyZXF1ZXN0Lm1ldGhvZF07XG4gICAgICAgICAgICBpZiAoZnVuYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdNZXRob2QgJyArIHJlcXVlc3QubWV0aG9kICsgJyBub3QgcmVnaXN0ZXJlZCBpbiBjbGllbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZ1bmMocmVxdWVzdC5wYXJhbXMsIHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcignRXhjZXB0aW9uIHByb2Nlc3NpbmcgcmVxdWVzdDogJyArIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKTtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZW5kID0gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBycGMuZW5jb2RlKG1ldGhvZCwgcGFyYW1zLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdFUlJPUjonICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBpbiBSZXF1ZXN0OiBtZXRob2Q6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBwYXJhbXM6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwYXJhbXMpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgcmVxdWVzdDonICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdFUlJPUiBEQVRBOicgKyBKU09OLnN0cmluZ2lmeShlcnJvci5kYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgICAgIGVycm9yLnJlcXVlc3RUaW1lID0gcmVxdWVzdFRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IHVuZGVmaW5lZCAmJiByZXN1bHQudmFsdWUgIT09ICdwb25nJykge1xuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuZGVidWcoJ1Jlc3BvbnNlOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZU5vdFJlY29ubmVjdElmTGVzc1RoYW4oKSB7XG4gICAgICAgIExvZ2dlci5kZWJ1Zygnbm90UmVjb25uZWN0SWZOdW1MZXNzVGhhbiA9ICcgKyBwaW5nTmV4dE51bSArICcgKG9sZD0nICsgbm90UmVjb25uZWN0SWZOdW1MZXNzVGhhbiArICcpJyk7XG4gICAgICAgIG5vdFJlY29ubmVjdElmTnVtTGVzc1RoYW4gPSBwaW5nTmV4dE51bTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VuZFBpbmcoKSB7XG4gICAgICAgIGlmIChlbmFibGVkUGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHBpbmdOZXh0TnVtID09IDAgfHwgcGluZ05leHROdW0gPT0gbm90UmVjb25uZWN0SWZOdW1MZXNzVGhhbikge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IGNvbmZpZ3VyYXRpb24uaGVhcnRiZWF0IHx8IFBJTkdfSU5URVJWQUxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGluZ05leHROdW0rKztcbiAgICAgICAgICAgIHNlbGYuc2VuZCgncGluZycsIHBhcmFtcywgKGZ1bmN0aW9uIChwaW5nTnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmRlYnVnKCdFcnJvciBpbiBwaW5nIHJlcXVlc3QgIycgKyBwaW5nTnVtICsgJyAoJyArIGVycm9yLm1lc3NhZ2UgKyAnKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBpbmdOdW0gPiBub3RSZWNvbm5lY3RJZk51bUxlc3NUaGFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZFBpbmdzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90UmVjb25uZWN0SWZMZXNzVGhhbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5kZWJ1ZygnU2VydmVyIGRpZCBub3QgcmVzcG9uZCB0byBwaW5nIG1lc3NhZ2UgIycgKyBwaW5nTnVtICsgJy4gUmVjb25uZWN0aW5nLi4uICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdzLnJlY29ubmVjdFdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkocGluZ05leHROdW0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZ2dlci5kZWJ1ZygnVHJ5aW5nIHRvIHNlbmQgcGluZywgYnV0IHBpbmcgaXMgbm90IGVuYWJsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1c2VQaW5nKCkge1xuICAgICAgICBpZiAoIXBpbmdQb25nU3RhcnRlZCkge1xuICAgICAgICAgICAgTG9nZ2VyLmRlYnVnKCdTdGFydGluZyBwaW5nIChpZiBjb25maWd1cmVkKScpO1xuICAgICAgICAgICAgcGluZ1BvbmdTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLmhlYXJ0YmVhdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwaW5nSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChzZW5kUGluZywgY29uZmlndXJhdGlvbi5oZWFydGJlYXQpO1xuICAgICAgICAgICAgICAgIHNlbmRQaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcFBpbmcoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocGluZ0ludGVydmFsKTtcbiAgICAgICAgcGluZ1BvbmdTdGFydGVkID0gZmFsc2U7XG4gICAgICAgIGVuYWJsZWRQaW5ncyA9IGZhbHNlO1xuICAgICAgICBwaW5nTmV4dE51bSA9IC0xO1xuICAgICAgICBycGMuY2FuY2VsKCk7XG4gICAgfVxuICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbiAoY29kZSwgcmVhc29uKSB7XG4gICAgICAgIExvZ2dlci5kZWJ1ZygnQ2xvc2luZyAgd2l0aCBjb2RlOiAnICsgY29kZSArICcgYmVjYXVzZTogJyArIHJlYXNvbik7XG4gICAgICAgIGlmIChwaW5nSW50ZXJ2YWwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBMb2dnZXIuZGVidWcoJ0NsZWFyaW5nIHBpbmcgaW50ZXJ2YWwnKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocGluZ0ludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICBwaW5nUG9uZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgZW5hYmxlZFBpbmdzID0gZmFsc2U7XG4gICAgICAgIHdzLmNsb3NlKGNvZGUsIHJlYXNvbik7XG4gICAgfTtcbiAgICB0aGlzLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd3MucmVjb25uZWN0V3MoKTtcbiAgICB9O1xuICAgIHRoaXMucmVzZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBlbmFibGVkUGluZ3MgPSB0cnVlO1xuICAgICAgICBwaW5nTmV4dE51bSA9IDA7XG4gICAgICAgIHVzZVBpbmcoKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0UmVhZHlTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdzLmdldFJlYWR5U3RhdGUoKTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBKc29uUnBjQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbnJwY2NsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/jsonrpcclient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/index.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/index.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var WebSocketWithReconnection = __webpack_require__(/*! ./webSocketWithReconnection */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/webSocketWithReconnection.js\");\nexports.WebSocketWithReconnection = WebSocketWithReconnection;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL2NsaWVudHMvdHJhbnNwb3J0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0MsbUJBQU8sQ0FBQyw0S0FBNkI7QUFDckUsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL2NsaWVudHMvdHJhbnNwb3J0cy9pbmRleC5qcz9jYWY1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBXZWJTb2NrZXRXaXRoUmVjb25uZWN0aW9uID0gcmVxdWlyZSgnLi93ZWJTb2NrZXRXaXRoUmVjb25uZWN0aW9uJyk7XG5leHBvcnRzLldlYlNvY2tldFdpdGhSZWNvbm5lY3Rpb24gPSBXZWJTb2NrZXRXaXRoUmVjb25uZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/webSocketWithReconnection.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/webSocketWithReconnection.js ***!
  \*****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar OpenViduLogger = (__webpack_require__(/*! ../../../../Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\").OpenViduLogger);\nvar Logger = OpenViduLogger.getInstance();\nvar MAX_RETRIES = 2000;\nvar RETRY_TIME_MS = 3000;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSING = 2;\nvar CLOSED = 3;\nfunction WebSocketWithReconnection(config) {\n    var closing = false;\n    var registerMessageHandler;\n    var wsUri = config.uri;\n    var reconnecting = false;\n    var ws = new WebSocket(wsUri);\n    ws.onopen = function () {\n        Logger.debug('WebSocket connected to ' + wsUri);\n        if (config.onconnected) {\n            config.onconnected();\n        }\n    };\n    ws.onerror = function (error) {\n        Logger.error('Could not connect to ' + wsUri + ' (invoking onerror if defined)', error);\n        if (config.onerror) {\n            config.onerror(error);\n        }\n    };\n    var reconnectionOnClose = function () {\n        if (ws.readyState === CLOSED) {\n            if (closing) {\n                Logger.debug('Connection closed by user');\n            }\n            else {\n                if (config.ismasternodecrashed()) {\n                    Logger.error('Master Node has crashed. Stopping reconnection process');\n                }\n                else {\n                    Logger.debug('Connection closed unexpectedly. Reconnecting...');\n                    reconnect(MAX_RETRIES, 1);\n                }\n            }\n        }\n        else {\n            Logger.debug('Close callback from previous websocket. Ignoring it');\n        }\n    };\n    ws.onclose = reconnectionOnClose;\n    function reconnect(maxRetries, numRetries) {\n        Logger.debug('reconnect (attempt #' + numRetries + ', max=' + maxRetries + ')');\n        if (numRetries === 1) {\n            if (reconnecting) {\n                Logger.warn('Trying to reconnect when already reconnecting... Ignoring this reconnection.');\n                return;\n            }\n            else {\n                reconnecting = true;\n            }\n            if (config.onreconnecting) {\n                config.onreconnecting();\n            }\n        }\n        reconnectAux(maxRetries, numRetries);\n    }\n    function addReconnectionQueryParamsIfMissing(uriString) {\n        var searchParams = new URLSearchParams(new URL(uriString).search);\n        if (!searchParams.has('reconnect')) {\n            uriString = Array.from(searchParams).length > 0 ? uriString + '&reconnect=true' : uriString + '?reconnect=true';\n        }\n        return uriString;\n    }\n    function reconnectAux(maxRetries, numRetries) {\n        Logger.debug('Reconnection attempt #' + numRetries);\n        ws.close(4104, 'Connection closed for reconnection');\n        wsUri = addReconnectionQueryParamsIfMissing(wsUri);\n        ws = new WebSocket(wsUri);\n        ws.onopen = function () {\n            Logger.debug('Reconnected to ' + wsUri + ' after ' + numRetries + ' attempts...');\n            reconnecting = false;\n            registerMessageHandler();\n            if (config.onreconnected) {\n                config.onreconnected();\n            }\n            ws.onclose = reconnectionOnClose;\n        };\n        ws.onerror = function (error) {\n            Logger.warn('Reconnection error: ', error);\n            if (numRetries === maxRetries) {\n                if (config.ondisconnect) {\n                    config.ondisconnect();\n                }\n            }\n            else {\n                setTimeout(function () {\n                    reconnect(maxRetries, numRetries + 1);\n                }, RETRY_TIME_MS);\n            }\n        };\n    }\n    this.close = function (code, reason) {\n        closing = true;\n        ws.close(code, reason);\n    };\n    this.reconnectWs = function () {\n        Logger.debug('reconnectWs');\n        reconnect(MAX_RETRIES, 1);\n    };\n    this.send = function (message) {\n        ws.send(message);\n    };\n    this.addEventListener = function (type, callback) {\n        registerMessageHandler = function () {\n            ws.addEventListener(type, callback);\n        };\n        registerMessageHandler();\n    };\n    this.getReadyState = function () {\n        return ws.readyState;\n    };\n}\nmodule.exports = WebSocketWithReconnection;\n//# sourceMappingURL=webSocketWithReconnection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL2NsaWVudHMvdHJhbnNwb3J0cy93ZWJTb2NrZXRXaXRoUmVjb25uZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IscUJBQXFCLG9LQUEyRDtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0t1cmVudG9VdGlscy9rdXJlbnRvLWpzb25ycGMvY2xpZW50cy90cmFuc3BvcnRzL3dlYlNvY2tldFdpdGhSZWNvbm5lY3Rpb24uanM/OTZkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgT3BlblZpZHVMb2dnZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9Mb2dnZXIvT3BlblZpZHVMb2dnZXInKS5PcGVuVmlkdUxvZ2dlcjtcbnZhciBMb2dnZXIgPSBPcGVuVmlkdUxvZ2dlci5nZXRJbnN0YW5jZSgpO1xudmFyIE1BWF9SRVRSSUVTID0gMjAwMDtcbnZhciBSRVRSWV9USU1FX01TID0gMzAwMDtcbnZhciBDT05ORUNUSU5HID0gMDtcbnZhciBPUEVOID0gMTtcbnZhciBDTE9TSU5HID0gMjtcbnZhciBDTE9TRUQgPSAzO1xuZnVuY3Rpb24gV2ViU29ja2V0V2l0aFJlY29ubmVjdGlvbihjb25maWcpIHtcbiAgICB2YXIgY2xvc2luZyA9IGZhbHNlO1xuICAgIHZhciByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyO1xuICAgIHZhciB3c1VyaSA9IGNvbmZpZy51cmk7XG4gICAgdmFyIHJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQod3NVcmkpO1xuICAgIHdzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgTG9nZ2VyLmRlYnVnKCdXZWJTb2NrZXQgY29ubmVjdGVkIHRvICcgKyB3c1VyaSk7XG4gICAgICAgIGlmIChjb25maWcub25jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbmZpZy5vbmNvbm5lY3RlZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB3cy5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIExvZ2dlci5lcnJvcignQ291bGQgbm90IGNvbm5lY3QgdG8gJyArIHdzVXJpICsgJyAoaW52b2tpbmcgb25lcnJvciBpZiBkZWZpbmVkKScsIGVycm9yKTtcbiAgICAgICAgaWYgKGNvbmZpZy5vbmVycm9yKSB7XG4gICAgICAgICAgICBjb25maWcub25lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWNvbm5lY3Rpb25PbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gQ0xPU0VEKSB7XG4gICAgICAgICAgICBpZiAoY2xvc2luZykge1xuICAgICAgICAgICAgICAgIExvZ2dlci5kZWJ1ZygnQ29ubmVjdGlvbiBjbG9zZWQgYnkgdXNlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5pc21hc3Rlcm5vZGVjcmFzaGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKCdNYXN0ZXIgTm9kZSBoYXMgY3Jhc2hlZC4gU3RvcHBpbmcgcmVjb25uZWN0aW9uIHByb2Nlc3MnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5kZWJ1ZygnQ29ubmVjdGlvbiBjbG9zZWQgdW5leHBlY3RlZGx5LiBSZWNvbm5lY3RpbmcuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0KE1BWF9SRVRSSUVTLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2dnZXIuZGVidWcoJ0Nsb3NlIGNhbGxiYWNrIGZyb20gcHJldmlvdXMgd2Vic29ja2V0LiBJZ25vcmluZyBpdCcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB3cy5vbmNsb3NlID0gcmVjb25uZWN0aW9uT25DbG9zZTtcbiAgICBmdW5jdGlvbiByZWNvbm5lY3QobWF4UmV0cmllcywgbnVtUmV0cmllcykge1xuICAgICAgICBMb2dnZXIuZGVidWcoJ3JlY29ubmVjdCAoYXR0ZW1wdCAjJyArIG51bVJldHJpZXMgKyAnLCBtYXg9JyArIG1heFJldHJpZXMgKyAnKScpO1xuICAgICAgICBpZiAobnVtUmV0cmllcyA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIExvZ2dlci53YXJuKCdUcnlpbmcgdG8gcmVjb25uZWN0IHdoZW4gYWxyZWFkeSByZWNvbm5lY3RpbmcuLi4gSWdub3JpbmcgdGhpcyByZWNvbm5lY3Rpb24uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcub25yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25maWcub25yZWNvbm5lY3RpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWNvbm5lY3RBdXgobWF4UmV0cmllcywgbnVtUmV0cmllcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFJlY29ubmVjdGlvblF1ZXJ5UGFyYW1zSWZNaXNzaW5nKHVyaVN0cmluZykge1xuICAgICAgICB2YXIgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMKHVyaVN0cmluZykuc2VhcmNoKTtcbiAgICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKCdyZWNvbm5lY3QnKSkge1xuICAgICAgICAgICAgdXJpU3RyaW5nID0gQXJyYXkuZnJvbShzZWFyY2hQYXJhbXMpLmxlbmd0aCA+IDAgPyB1cmlTdHJpbmcgKyAnJnJlY29ubmVjdD10cnVlJyA6IHVyaVN0cmluZyArICc/cmVjb25uZWN0PXRydWUnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmlTdHJpbmc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlY29ubmVjdEF1eChtYXhSZXRyaWVzLCBudW1SZXRyaWVzKSB7XG4gICAgICAgIExvZ2dlci5kZWJ1ZygnUmVjb25uZWN0aW9uIGF0dGVtcHQgIycgKyBudW1SZXRyaWVzKTtcbiAgICAgICAgd3MuY2xvc2UoNDEwNCwgJ0Nvbm5lY3Rpb24gY2xvc2VkIGZvciByZWNvbm5lY3Rpb24nKTtcbiAgICAgICAgd3NVcmkgPSBhZGRSZWNvbm5lY3Rpb25RdWVyeVBhcmFtc0lmTWlzc2luZyh3c1VyaSk7XG4gICAgICAgIHdzID0gbmV3IFdlYlNvY2tldCh3c1VyaSk7XG4gICAgICAgIHdzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIExvZ2dlci5kZWJ1ZygnUmVjb25uZWN0ZWQgdG8gJyArIHdzVXJpICsgJyBhZnRlciAnICsgbnVtUmV0cmllcyArICcgYXR0ZW1wdHMuLi4nKTtcbiAgICAgICAgICAgIHJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcigpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5vbnJlY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLm9ucmVjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdzLm9uY2xvc2UgPSByZWNvbm5lY3Rpb25PbkNsb3NlO1xuICAgICAgICB9O1xuICAgICAgICB3cy5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBMb2dnZXIud2FybignUmVjb25uZWN0aW9uIGVycm9yOiAnLCBlcnJvcik7XG4gICAgICAgICAgICBpZiAobnVtUmV0cmllcyA9PT0gbWF4UmV0cmllcykge1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcub25kaXNjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0KG1heFJldHJpZXMsIG51bVJldHJpZXMgKyAxKTtcbiAgICAgICAgICAgICAgICB9LCBSRVRSWV9USU1FX01TKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uIChjb2RlLCByZWFzb24pIHtcbiAgICAgICAgY2xvc2luZyA9IHRydWU7XG4gICAgICAgIHdzLmNsb3NlKGNvZGUsIHJlYXNvbik7XG4gICAgfTtcbiAgICB0aGlzLnJlY29ubmVjdFdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBMb2dnZXIuZGVidWcoJ3JlY29ubmVjdFdzJyk7XG4gICAgICAgIHJlY29ubmVjdChNQVhfUkVUUklFUywgMSk7XG4gICAgfTtcbiAgICB0aGlzLnNlbmQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB3cy5zZW5kKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcigpO1xuICAgIH07XG4gICAgdGhpcy5nZXRSZWFkeVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gd3MucmVhZHlTdGF0ZTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXRXaXRoUmVjb25uZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViU29ja2V0V2l0aFJlY29ubmVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/webSocketWithReconnection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/index.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var defineProperty_IE8 = false;\nif (Object.defineProperty) {\n    try {\n        Object.defineProperty({}, 'x', {});\n    }\n    catch (e) {\n        defineProperty_IE8 = true;\n    }\n}\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== 'function') {\n            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n        var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function () { }, fBound = function () {\n            return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar packers = __webpack_require__(/*! ./packers */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/index.js\");\nvar Mapper = __webpack_require__(/*! ./Mapper */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/Mapper.js\");\nvar BASE_TIMEOUT = 5000;\nfunction unifyResponseMethods(responseMethods) {\n    if (!responseMethods)\n        return {};\n    for (var key in responseMethods) {\n        var value = responseMethods[key];\n        if (typeof value == 'string')\n            responseMethods[key] = {\n                response: value\n            };\n    }\n    return responseMethods;\n}\nfunction unifyTransport(transport) {\n    if (!transport)\n        return;\n    if (transport instanceof Function)\n        return {\n            send: transport\n        };\n    if (transport.send instanceof Function)\n        return transport;\n    if (transport.postMessage instanceof Function) {\n        transport.send = transport.postMessage;\n        return transport;\n    }\n    if (transport.write instanceof Function) {\n        transport.send = transport.write;\n        return transport;\n    }\n    if (transport.onmessage !== undefined)\n        return;\n    if (transport.pause instanceof Function)\n        return;\n    throw new SyntaxError('Transport is not a function nor a valid object');\n}\nfunction RpcNotification(method, params) {\n    if (defineProperty_IE8) {\n        this.method = method;\n        this.params = params;\n    }\n    else {\n        Object.defineProperty(this, 'method', {\n            value: method,\n            enumerable: true\n        });\n        Object.defineProperty(this, 'params', {\n            value: params,\n            enumerable: true\n        });\n    }\n}\nfunction RpcBuilder(packer, options, transport, onRequest) {\n    var self = this;\n    if (!packer)\n        throw new SyntaxError('Packer is not defined');\n    if (!packer.pack || !packer.unpack)\n        throw new SyntaxError('Packer is invalid');\n    var responseMethods = unifyResponseMethods(packer.responseMethods);\n    if (options instanceof Function) {\n        if (transport != undefined)\n            throw new SyntaxError(\"There can't be parameters after onRequest\");\n        onRequest = options;\n        transport = undefined;\n        options = undefined;\n    }\n    if (options && options.send instanceof Function) {\n        if (transport && !(transport instanceof Function))\n            throw new SyntaxError('Only a function can be after transport');\n        onRequest = transport;\n        transport = options;\n        options = undefined;\n    }\n    if (transport instanceof Function) {\n        if (onRequest != undefined)\n            throw new SyntaxError(\"There can't be parameters after onRequest\");\n        onRequest = transport;\n        transport = undefined;\n    }\n    if (transport && transport.send instanceof Function)\n        if (onRequest && !(onRequest instanceof Function))\n            throw new SyntaxError('Only a function can be after transport');\n    options = options || {};\n    EventEmitter.call(this);\n    if (onRequest)\n        this.on('request', onRequest);\n    if (defineProperty_IE8)\n        this.peerID = options.peerID;\n    else\n        Object.defineProperty(this, 'peerID', {\n            value: options.peerID\n        });\n    var max_retries = options.max_retries || 0;\n    function transportMessage(event) {\n        self.decode(event.data || event);\n    }\n    this.getTransport = function () {\n        return transport;\n    };\n    this.setTransport = function (value) {\n        if (transport) {\n            if (transport.removeEventListener)\n                transport.removeEventListener('message', transportMessage);\n            else if (transport.removeListener)\n                transport.removeListener('data', transportMessage);\n        }\n        if (value) {\n            if (value.addEventListener)\n                value.addEventListener('message', transportMessage);\n            else if (value.addListener)\n                value.addListener('data', transportMessage);\n        }\n        transport = unifyTransport(value);\n    };\n    if (!defineProperty_IE8)\n        Object.defineProperty(this, 'transport', {\n            get: this.getTransport.bind(this),\n            set: this.setTransport.bind(this)\n        });\n    this.setTransport(transport);\n    var request_timeout = options.request_timeout || BASE_TIMEOUT;\n    var ping_request_timeout = options.ping_request_timeout || request_timeout;\n    var response_timeout = options.response_timeout || BASE_TIMEOUT;\n    var duplicates_timeout = options.duplicates_timeout || BASE_TIMEOUT;\n    var requestID = 0;\n    var requests = new Mapper();\n    var responses = new Mapper();\n    var processedResponses = new Mapper();\n    var message2Key = {};\n    function storeResponse(message, id, dest) {\n        var response = {\n            message: message,\n            timeout: setTimeout(function () {\n                responses.remove(id, dest);\n            }, response_timeout)\n        };\n        responses.set(response, id, dest);\n    }\n    function storeProcessedResponse(ack, from) {\n        var timeout = setTimeout(function () {\n            processedResponses.remove(ack, from);\n        }, duplicates_timeout);\n        processedResponses.set(timeout, ack, from);\n    }\n    function RpcRequest(method, params, id, from, transport) {\n        RpcNotification.call(this, method, params);\n        this.getTransport = function () {\n            return transport;\n        };\n        this.setTransport = function (value) {\n            transport = unifyTransport(value);\n        };\n        if (!defineProperty_IE8)\n            Object.defineProperty(this, 'transport', {\n                get: this.getTransport.bind(this),\n                set: this.setTransport.bind(this)\n            });\n        var response = responses.get(id, from);\n        if (!(transport || self.getTransport())) {\n            if (defineProperty_IE8)\n                this.duplicated = Boolean(response);\n            else\n                Object.defineProperty(this, 'duplicated', {\n                    value: Boolean(response)\n                });\n        }\n        var responseMethod = responseMethods[method];\n        this.pack = packer.pack.bind(packer, this, id);\n        this.reply = function (error, result, transport) {\n            if (error instanceof Function || (error && error.send instanceof Function)) {\n                if (result != undefined)\n                    throw new SyntaxError(\"There can't be parameters after callback\");\n                transport = error;\n                result = null;\n                error = undefined;\n            }\n            else if (result instanceof Function || (result && result.send instanceof Function)) {\n                if (transport != undefined)\n                    throw new SyntaxError(\"There can't be parameters after callback\");\n                transport = result;\n                result = null;\n            }\n            transport = unifyTransport(transport);\n            if (response)\n                clearTimeout(response.timeout);\n            if (from != undefined) {\n                if (error)\n                    error.dest = from;\n                if (result)\n                    result.dest = from;\n            }\n            var message;\n            if (error || result != undefined) {\n                if (self.peerID != undefined) {\n                    if (error)\n                        error.from = self.peerID;\n                    else\n                        result.from = self.peerID;\n                }\n                if (responseMethod) {\n                    if (responseMethod.error == undefined && error)\n                        message = {\n                            error: error\n                        };\n                    else {\n                        var method = error ? responseMethod.error : responseMethod.response;\n                        message = {\n                            method: method,\n                            params: error || result\n                        };\n                    }\n                }\n                else\n                    message = {\n                        error: error,\n                        result: result\n                    };\n                message = packer.pack(message, id);\n            }\n            else if (response)\n                message = response.message;\n            else\n                message = packer.pack({\n                    result: null\n                }, id);\n            storeResponse(message, id, from);\n            transport = transport || this.getTransport() || self.getTransport();\n            if (transport)\n                return transport.send(message);\n            return message;\n        };\n    }\n    inherits(RpcRequest, RpcNotification);\n    function cancel(message) {\n        var key = message2Key[message];\n        if (!key)\n            return;\n        delete message2Key[message];\n        var request = requests.pop(key.id, key.dest);\n        if (!request)\n            return;\n        clearTimeout(request.timeout);\n        storeProcessedResponse(key.id, key.dest);\n    }\n    this.cancel = function (message) {\n        if (message)\n            return cancel(message);\n        for (var message in message2Key)\n            cancel(message);\n    };\n    this.close = function () {\n        var transport = this.getTransport();\n        if (transport && transport.close)\n            transport.close(4003, 'Cancel request');\n        this.cancel();\n        processedResponses.forEach(clearTimeout);\n        responses.forEach(function (response) {\n            clearTimeout(response.timeout);\n        });\n    };\n    this.encode = function (method, params, dest, transport, callback) {\n        if (params instanceof Function) {\n            if (dest != undefined)\n                throw new SyntaxError(\"There can't be parameters after callback\");\n            callback = params;\n            transport = undefined;\n            dest = undefined;\n            params = undefined;\n        }\n        else if (dest instanceof Function) {\n            if (transport != undefined)\n                throw new SyntaxError(\"There can't be parameters after callback\");\n            callback = dest;\n            transport = undefined;\n            dest = undefined;\n        }\n        else if (transport instanceof Function) {\n            if (callback != undefined)\n                throw new SyntaxError(\"There can't be parameters after callback\");\n            callback = transport;\n            transport = undefined;\n        }\n        if (self.peerID != undefined) {\n            params = params || {};\n            params.from = self.peerID;\n        }\n        if (dest != undefined) {\n            params = params || {};\n            params.dest = dest;\n        }\n        var message = {\n            method: method,\n            params: params\n        };\n        if (callback) {\n            var id = requestID++;\n            var retried = 0;\n            message = packer.pack(message, id);\n            function dispatchCallback(error, result) {\n                self.cancel(message);\n                callback(error, result);\n            }\n            var request = {\n                message: message,\n                callback: dispatchCallback,\n                responseMethods: responseMethods[method] || {}\n            };\n            var encode_transport = unifyTransport(transport);\n            function sendRequest(transport) {\n                var rt = method === 'ping' ? ping_request_timeout : request_timeout;\n                request.timeout = setTimeout(timeout, rt * Math.pow(2, retried++));\n                message2Key[message] = {\n                    id: id,\n                    dest: dest\n                };\n                requests.set(request, id, dest);\n                transport = transport || encode_transport || self.getTransport();\n                if (transport)\n                    return transport.send(message);\n                return message;\n            }\n            function retry(transport) {\n                transport = unifyTransport(transport);\n                console.warn(retried + ' retry for request message:', message);\n                var timeout = processedResponses.pop(id, dest);\n                clearTimeout(timeout);\n                return sendRequest(transport);\n            }\n            function timeout() {\n                if (retried < max_retries)\n                    return retry(transport);\n                var error = new Error('Request has timed out');\n                error.request = message;\n                error.retry = retry;\n                dispatchCallback(error);\n            }\n            return sendRequest(transport);\n        }\n        message = packer.pack(message);\n        transport = transport || this.getTransport();\n        if (transport)\n            return transport.send(message);\n        return message;\n    };\n    this.decode = function (message, transport) {\n        if (!message)\n            throw new TypeError('Message is not defined');\n        try {\n            message = packer.unpack(message);\n        }\n        catch (e) {\n            return console.debug(e, message);\n        }\n        var id = message.id;\n        var ack = message.ack;\n        var method = message.method;\n        var params = message.params || {};\n        var from = params.from;\n        var dest = params.dest;\n        if (self.peerID != undefined && from == self.peerID)\n            return;\n        if (id == undefined && ack == undefined) {\n            var notification = new RpcNotification(method, params);\n            if (self.emit('request', notification))\n                return;\n            return notification;\n        }\n        function processRequest() {\n            transport = unifyTransport(transport) || self.getTransport();\n            if (transport) {\n                var response = responses.get(id, from);\n                if (response)\n                    return transport.send(response.message);\n            }\n            var idAck = id != undefined ? id : ack;\n            var request = new RpcRequest(method, params, idAck, from, transport);\n            if (self.emit('request', request))\n                return;\n            return request;\n        }\n        function processResponse(request, error, result) {\n            request.callback(error, result);\n        }\n        function duplicatedResponse(timeout) {\n            console.warn('Response already processed', message);\n            clearTimeout(timeout);\n            storeProcessedResponse(ack, from);\n        }\n        if (method) {\n            if (dest == undefined || dest == self.peerID) {\n                var request = requests.get(ack, from);\n                if (request) {\n                    var responseMethods = request.responseMethods;\n                    if (method == responseMethods.error)\n                        return processResponse(request, params);\n                    if (method == responseMethods.response)\n                        return processResponse(request, null, params);\n                    return processRequest();\n                }\n                var processed = processedResponses.get(ack, from);\n                if (processed)\n                    return duplicatedResponse(processed);\n            }\n            return processRequest();\n        }\n        var error = message.error;\n        var result = message.result;\n        if (error && error.dest && error.dest != self.peerID)\n            return;\n        if (result && result.dest && result.dest != self.peerID)\n            return;\n        var request = requests.get(ack, from);\n        if (!request) {\n            var processed = processedResponses.get(ack, from);\n            if (processed)\n                return duplicatedResponse(processed);\n            return console.warn('No callback was defined for this message', message);\n        }\n        processResponse(request, error, result);\n    };\n}\ninherits(RpcBuilder, EventEmitter);\nRpcBuilder.RpcNotification = RpcNotification;\nmodule.exports = RpcBuilder;\nvar clients = __webpack_require__(/*! ./clients */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/index.js\");\nvar transports = __webpack_require__(/*! ./clients/transports */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/clients/transports/index.js\");\nRpcBuilder.clients = clients;\nRpcBuilder.clients.transports = transports;\nRpcBuilder.packers = packers;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/JsonRPC.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/JsonRPC.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function pack(message, id) {\n    var result = {\n        jsonrpc: '2.0'\n    };\n    if (message.method) {\n        result.method = message.method;\n        if (message.params)\n            result.params = message.params;\n        if (id != undefined)\n            result.id = id;\n    }\n    else if (id != undefined) {\n        if (message.error) {\n            if (message.result !== undefined)\n                throw new TypeError('Both result and error are defined');\n            result.error = message.error;\n        }\n        else if (message.result !== undefined)\n            result.result = message.result;\n        else\n            throw new TypeError('No result or error is defined');\n        result.id = id;\n    }\n    return JSON.stringify(result);\n}\nfunction unpack(message) {\n    var result = message;\n    if (typeof message === 'string' || message instanceof String) {\n        result = JSON.parse(message);\n    }\n    var version = result.jsonrpc;\n    if (version !== '2.0')\n        throw new TypeError(\"Invalid JsonRPC version '\" + version + \"': \" + message);\n    if (result.method == undefined) {\n        if (result.id == undefined)\n            throw new TypeError('Invalid message: ' + message);\n        var result_defined = result.result !== undefined;\n        var error_defined = result.error !== undefined;\n        if (result_defined && error_defined)\n            throw new TypeError('Both result and error are defined: ' + message);\n        if (!result_defined && !error_defined)\n            throw new TypeError('No result or error is defined: ' + message);\n        result.ack = result.id;\n        delete result.id;\n    }\n    return result;\n}\nexports.pack = pack;\nexports.unpack = unpack;\n//# sourceMappingURL=JsonRPC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL3BhY2tlcnMvSnNvblJQQy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW52aWR1LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL29wZW52aWR1LWJyb3dzZXIvbGliL09wZW5WaWR1SW50ZXJuYWwvS3VyZW50b1V0aWxzL2t1cmVudG8tanNvbnJwYy9wYWNrZXJzL0pzb25SUEMuanM/MDBhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBwYWNrKG1lc3NhZ2UsIGlkKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAganNvbnJwYzogJzIuMCdcbiAgICB9O1xuICAgIGlmIChtZXNzYWdlLm1ldGhvZCkge1xuICAgICAgICByZXN1bHQubWV0aG9kID0gbWVzc2FnZS5tZXRob2Q7XG4gICAgICAgIGlmIChtZXNzYWdlLnBhcmFtcylcbiAgICAgICAgICAgIHJlc3VsdC5wYXJhbXMgPSBtZXNzYWdlLnBhcmFtcztcbiAgICAgICAgaWYgKGlkICE9IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlc3VsdC5pZCA9IGlkO1xuICAgIH1cbiAgICBlbHNlIGlmIChpZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvdGggcmVzdWx0IGFuZCBlcnJvciBhcmUgZGVmaW5lZCcpO1xuICAgICAgICAgICAgcmVzdWx0LmVycm9yID0gbWVzc2FnZS5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVzdWx0LnJlc3VsdCA9IG1lc3NhZ2UucmVzdWx0O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyByZXN1bHQgb3IgZXJyb3IgaXMgZGVmaW5lZCcpO1xuICAgICAgICByZXN1bHQuaWQgPSBpZDtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG59XG5mdW5jdGlvbiB1bnBhY2sobWVzc2FnZSkge1xuICAgIHZhciByZXN1bHQgPSBtZXNzYWdlO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycgfHwgbWVzc2FnZSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB2YXIgdmVyc2lvbiA9IHJlc3VsdC5qc29ucnBjO1xuICAgIGlmICh2ZXJzaW9uICE9PSAnMi4wJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgSnNvblJQQyB2ZXJzaW9uICdcIiArIHZlcnNpb24gKyBcIic6IFwiICsgbWVzc2FnZSk7XG4gICAgaWYgKHJlc3VsdC5tZXRob2QgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChyZXN1bHQuaWQgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtZXNzYWdlOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIHZhciByZXN1bHRfZGVmaW5lZCA9IHJlc3VsdC5yZXN1bHQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGVycm9yX2RlZmluZWQgPSByZXN1bHQuZXJyb3IgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdF9kZWZpbmVkICYmIGVycm9yX2RlZmluZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb3RoIHJlc3VsdCBhbmQgZXJyb3IgYXJlIGRlZmluZWQ6ICcgKyBtZXNzYWdlKTtcbiAgICAgICAgaWYgKCFyZXN1bHRfZGVmaW5lZCAmJiAhZXJyb3JfZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIHJlc3VsdCBvciBlcnJvciBpcyBkZWZpbmVkOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIHJlc3VsdC5hY2sgPSByZXN1bHQuaWQ7XG4gICAgICAgIGRlbGV0ZSByZXN1bHQuaWQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnBhY2sgPSBwYWNrO1xuZXhwb3J0cy51bnBhY2sgPSB1bnBhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Kc29uUlBDLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/JsonRPC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/XmlRPC.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/XmlRPC.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function pack(message) {\n    throw new TypeError('Not yet implemented');\n}\nfunction unpack(message) {\n    throw new TypeError('Not yet implemented');\n}\nexports.pack = pack;\nexports.unpack = unpack;\n//# sourceMappingURL=XmlRPC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL3BhY2tlcnMvWG1sUlBDLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0t1cmVudG9VdGlscy9rdXJlbnRvLWpzb25ycGMvcGFja2Vycy9YbWxSUEMuanM/NmVjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBwYWNrKG1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgeWV0IGltcGxlbWVudGVkJyk7XG59XG5mdW5jdGlvbiB1bnBhY2sobWVzc2FnZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQnKTtcbn1cbmV4cG9ydHMucGFjayA9IHBhY2s7XG5leHBvcnRzLnVucGFjayA9IHVucGFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVhtbFJQQy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/XmlRPC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var JsonRPC = __webpack_require__(/*! ./JsonRPC */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/JsonRPC.js\");\nvar XmlRPC = __webpack_require__(/*! ./XmlRPC */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/XmlRPC.js\");\nexports.JsonRPC = JsonRPC;\nexports.XmlRPC = XmlRPC;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL3BhY2tlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLDZIQUFXO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQywySEFBVTtBQUMvQixlQUFlO0FBQ2YsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9LdXJlbnRvVXRpbHMva3VyZW50by1qc29ucnBjL3BhY2tlcnMvaW5kZXguanM/Y2UyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSnNvblJQQyA9IHJlcXVpcmUoJy4vSnNvblJQQycpO1xudmFyIFhtbFJQQyA9IHJlcXVpcmUoJy4vWG1sUlBDJyk7XG5leHBvcnRzLkpzb25SUEMgPSBKc29uUlBDO1xuZXhwb3J0cy5YbWxSUEMgPSBYbWxSUEM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/packers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/ConsoleLogger.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/ConsoleLogger.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConsoleLogger = void 0;\nvar ConsoleLogger = /** @class */ (function () {\n    function ConsoleLogger(console) {\n        this.logger = console;\n        (this.log = console.log),\n            (this.info = console.info),\n            (this.debug = console.debug),\n            (this.warn = console.warn),\n            (this.error = console.error);\n    }\n    return ConsoleLogger;\n}());\nexports.ConsoleLogger = ConsoleLogger;\n//# sourceMappingURL=ConsoleLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9Mb2dnZXIvQ29uc29sZUxvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9Mb2dnZXIvQ29uc29sZUxvZ2dlci5qcz85NjhiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25zb2xlTG9nZ2VyID0gdm9pZCAwO1xudmFyIENvbnNvbGVMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc29sZUxvZ2dlcihjb25zb2xlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gY29uc29sZTtcbiAgICAgICAgKHRoaXMubG9nID0gY29uc29sZS5sb2cpLFxuICAgICAgICAgICAgKHRoaXMuaW5mbyA9IGNvbnNvbGUuaW5mbyksXG4gICAgICAgICAgICAodGhpcy5kZWJ1ZyA9IGNvbnNvbGUuZGVidWcpLFxuICAgICAgICAgICAgKHRoaXMud2FybiA9IGNvbnNvbGUud2FybiksXG4gICAgICAgICAgICAodGhpcy5lcnJvciA9IGNvbnNvbGUuZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gQ29uc29sZUxvZ2dlcjtcbn0oKSk7XG5leHBvcnRzLkNvbnNvbGVMb2dnZXIgPSBDb25zb2xlTG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29uc29sZUxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/ConsoleLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenViduLogger = void 0;\nvar jsnlog_1 = __webpack_require__(/*! jsnlog */ \"(ssr)/./node_modules/jsnlog/jsnlog.js\");\nvar ConsoleLogger_1 = __webpack_require__(/*! ./ConsoleLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/ConsoleLogger.js\");\nvar OpenViduLoggerConfiguration_1 = __webpack_require__(/*! ./OpenViduLoggerConfiguration */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLoggerConfiguration.js\");\nvar OpenViduLogger = /** @class */ (function () {\n    function OpenViduLogger() {\n        this.JSNLOG_URL = '/openvidu/elk/openvidu-browser-logs';\n        this.MAX_JSNLOG_BATCH_LOG_MESSAGES = 100;\n        this.MAX_MSECONDS_BATCH_MESSAGES = 5000;\n        this.MAX_LENGTH_STRING_JSON = 1000;\n        this.defaultConsoleLogger = new ConsoleLogger_1.ConsoleLogger(globalThis.console);\n        this.isProdMode = false;\n        this.isJSNLogSetup = false;\n    }\n    /**\n     * @hidden\n     */\n    OpenViduLogger.configureJSNLog = function (openVidu, token) {\n        var _this = this;\n        try {\n            // If dev mode or...\n            if (globalThis['LOG_JSNLOG_RESULTS'] ||\n                // If instance is created and it is OpenVidu Pro\n                (this.instance &&\n                    openVidu.isAtLeastPro &&\n                    // If logs are enabled\n                    this.instance.isOpenViduBrowserLogsDebugActive(openVidu) &&\n                    // Only reconfigure it if session or finalUserId has changed\n                    this.instance.canConfigureJSNLog(openVidu, this.instance))) {\n                // Check if app logs can be sent\n                // and replace console.log function to send\n                // logs of the application\n                if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app) {\n                    this.instance.replaceWindowConsole();\n                }\n                // isJSNLogSetup will not be true until completed setup\n                this.instance.isJSNLogSetup = false;\n                this.instance.info('Configuring JSNLogs.');\n                var finalUserId_1 = openVidu.finalUserId;\n                var sessionId_1 = openVidu.session.sessionId;\n                var beforeSendCallback = function (xhr) {\n                    // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n                    // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n                    var parentReadyStateFunction = xhr.onreadystatechange;\n                    xhr.onreadystatechange = function () {\n                        if (_this.isInvalidResponse(xhr)) {\n                            Object.defineProperty(xhr, 'readyState', { value: 4 });\n                            Object.defineProperty(xhr, 'status', { value: 200 });\n                            // Disable JSNLog too to not send periodically errors\n                            _this.instance.disableLogger();\n                        }\n                        parentReadyStateFunction();\n                    };\n                    // Headers to identify and authenticate logs\n                    xhr.setRequestHeader('Authorization', 'Basic ' + btoa(\"\".concat(finalUserId_1, \"%/%\").concat(sessionId_1) + ':' + token));\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n                    // Additional headers for OpenVidu\n                    xhr.setRequestHeader('OV-Final-User-Id', finalUserId_1);\n                    xhr.setRequestHeader('OV-Session-Id', sessionId_1);\n                    xhr.setRequestHeader('OV-Token', token);\n                };\n                // Creation of the appender.\n                this.instance.currentAppender = jsnlog_1.JL.createAjaxAppender(\"appender-\".concat(finalUserId_1, \"-\").concat(sessionId_1));\n                this.instance.currentAppender.setOptions({\n                    beforeSend: beforeSendCallback,\n                    maxBatchSize: 1000,\n                    batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n                    batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n                });\n                // Avoid circular dependencies\n                var logSerializer = function (obj) {\n                    var getCircularReplacer = function () {\n                        var seen = new WeakSet();\n                        return function (key, value) {\n                            if (typeof value === 'object' && value != null) {\n                                if (seen.has(value) || (globalThis.HTMLElement && value instanceof HTMLElement)) {\n                                    return;\n                                }\n                                seen.add(value);\n                            }\n                            return value;\n                        };\n                    };\n                    // Cut long messages\n                    var stringifyJson = JSON.stringify(obj, getCircularReplacer());\n                    if (stringifyJson.length > _this.instance.MAX_LENGTH_STRING_JSON) {\n                        stringifyJson = \"\".concat(stringifyJson.substring(0, _this.instance.MAX_LENGTH_STRING_JSON), \"...\");\n                    }\n                    if (globalThis['LOG_JSNLOG_RESULTS']) {\n                        console.log(stringifyJson);\n                    }\n                    return stringifyJson;\n                };\n                // Initialize JL to send logs\n                jsnlog_1.JL.setOptions({\n                    defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n                    serialize: logSerializer,\n                    enabled: true\n                });\n                (0, jsnlog_1.JL)().setOptions({\n                    appenders: [this.instance.currentAppender]\n                });\n                this.instance.isJSNLogSetup = true;\n                this.instance.loggingSessionId = sessionId_1;\n                this.instance.info('JSNLog configured.');\n            }\n        }\n        catch (e) {\n            // Print error\n            console.error('Error configuring JSNLog: ');\n            console.error(e);\n            // Restore defaults values just in case any exception happen-\n            this.instance.disableLogger();\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.getInstance = function () {\n        if (!OpenViduLogger.instance) {\n            OpenViduLogger.instance = new OpenViduLogger();\n        }\n        return OpenViduLogger.instance;\n    };\n    OpenViduLogger.isInvalidResponse = function (xhr) {\n        return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n    };\n    OpenViduLogger.prototype.canConfigureJSNLog = function (openVidu, logger) {\n        return openVidu.session.sessionId != logger.loggingSessionId;\n    };\n    OpenViduLogger.prototype.isOpenViduBrowserLogsDebugActive = function (openVidu) {\n        return (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug ||\n            openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app);\n    };\n    // Return console functions with jsnlog integration\n    OpenViduLogger.prototype.getConsoleWithJSNLog = function () {\n        return (function (openViduLogger) {\n            return {\n                log: function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        (0, jsnlog_1.JL)().info(arguments);\n                    }\n                },\n                info: function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        (0, jsnlog_1.JL)().info(arguments);\n                    }\n                },\n                debug: function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                },\n                warn: function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        (0, jsnlog_1.JL)().warn(arguments);\n                    }\n                },\n                error: function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        (0, jsnlog_1.JL)().error(arguments);\n                    }\n                }\n            };\n        })(this);\n    };\n    OpenViduLogger.prototype.replaceWindowConsole = function () {\n        globalThis.console = this.defaultConsoleLogger.logger;\n        globalThis.console.log = this.getConsoleWithJSNLog().log;\n        globalThis.console.info = this.getConsoleWithJSNLog().info;\n        globalThis.console.debug = this.getConsoleWithJSNLog().debug;\n        globalThis.console.warn = this.getConsoleWithJSNLog().warn;\n        globalThis.console.error = this.getConsoleWithJSNLog().error;\n    };\n    OpenViduLogger.prototype.disableLogger = function () {\n        jsnlog_1.JL.setOptions({ enabled: false });\n        this.isJSNLogSetup = false;\n        this.loggingSessionId = undefined;\n        this.currentAppender = undefined;\n        globalThis.console = this.defaultConsoleLogger.logger;\n        globalThis.console.log = this.defaultConsoleLogger.log;\n        globalThis.console.info = this.defaultConsoleLogger.info;\n        globalThis.console.debug = this.defaultConsoleLogger.debug;\n        globalThis.console.warn = this.defaultConsoleLogger.warn;\n        globalThis.console.error = this.defaultConsoleLogger.error;\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n        if (this.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n        if (this.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n        if (this.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().warn(arguments);\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n        if (this.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().error(arguments);\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenViduLogger.prototype.flush = function () {\n        if (this.isJSNLogSetup && this.currentAppender != null) {\n            this.currentAppender.sendBatch();\n        }\n    };\n    OpenViduLogger.prototype.enableProdMode = function () {\n        this.isProdMode = true;\n    };\n    return OpenViduLogger;\n}());\nexports.OpenViduLogger = OpenViduLogger;\n//# sourceMappingURL=OpenViduLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLoggerConfiguration.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLoggerConfiguration.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenViduLoggerConfiguration = void 0;\nvar OpenViduLoggerConfiguration;\n(function (OpenViduLoggerConfiguration) {\n    OpenViduLoggerConfiguration[\"disabled\"] = \"disabled\";\n    OpenViduLoggerConfiguration[\"debug\"] = \"debug\";\n    OpenViduLoggerConfiguration[\"debug_app\"] = \"debug_app\";\n})(OpenViduLoggerConfiguration = exports.OpenViduLoggerConfiguration || (exports.OpenViduLoggerConfiguration = {}));\n//# sourceMappingURL=OpenViduLoggerConfiguration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHVJbnRlcm5hbC9Mb2dnZXIvT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3RUFBd0UsbUNBQW1DLEtBQUs7QUFDakgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVudmlkdS1yZWFjdC8uL25vZGVfbW9kdWxlcy9vcGVudmlkdS1icm93c2VyL2xpYi9PcGVuVmlkdUludGVybmFsL0xvZ2dlci9PcGVuVmlkdUxvZ2dlckNvbmZpZ3VyYXRpb24uanM/ODA2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uID0gdm9pZCAwO1xudmFyIE9wZW5WaWR1TG9nZ2VyQ29uZmlndXJhdGlvbjtcbihmdW5jdGlvbiAoT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uKSB7XG4gICAgT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uW1wiZGlzYWJsZWRcIl0gPSBcImRpc2FibGVkXCI7XG4gICAgT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uW1wiZGVidWdcIl0gPSBcImRlYnVnXCI7XG4gICAgT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uW1wiZGVidWdfYXBwXCJdID0gXCJkZWJ1Z19hcHBcIjtcbn0pKE9wZW5WaWR1TG9nZ2VyQ29uZmlndXJhdGlvbiA9IGV4cG9ydHMuT3BlblZpZHVMb2dnZXJDb25maWd1cmF0aW9uIHx8IChleHBvcnRzLk9wZW5WaWR1TG9nZ2VyQ29uZmlndXJhdGlvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVuVmlkdUxvZ2dlckNvbmZpZ3VyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLoggerConfiguration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing-Auto.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing-Auto.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("globalThis.getScreenId = function (firefoxString, callback, custom_parameter) {\n    if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n        callback({\n            video: true\n        });\n        return;\n    }\n    if (!!navigator.mozGetUserMedia) {\n        callback(null, 'firefox', {\n            video: {\n                mozMediaSource: firefoxString,\n                mediaSource: firefoxString\n            }\n        });\n        return;\n    }\n    globalThis.addEventListener('message', onIFrameCallback);\n    function onIFrameCallback(event) {\n        if (!event.data)\n            return;\n        if (event.data.chromeMediaSourceId) {\n            if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n                callback('permission-denied');\n            }\n            else {\n                callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n            }\n            globalThis.removeEventListener('message', onIFrameCallback);\n        }\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n            globalThis.removeEventListener('message', onIFrameCallback);\n        }\n    }\n    if (!custom_parameter) {\n        setTimeout(postGetSourceIdMessage, 100);\n    }\n    else {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n    }\n};\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n    var screen_constraints = {\n        audio: false,\n        video: {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop',\n                maxWidth: globalThis.screen.width > 1920 ? globalThis.screen.width : 1920,\n                maxHeight: globalThis.screen.height > 1080 ? globalThis.screen.height : 1080\n            },\n            optional: []\n        }\n    };\n    if (!!canRequestAudioTrack) {\n        screen_constraints.audio = {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop'\n            },\n            optional: []\n        };\n    }\n    if (sourceId) {\n        screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n        if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n            screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n        }\n    }\n    return screen_constraints;\n}\nfunction postGetSourceIdMessage(custom_parameter) {\n    if (!iframe) {\n        loadIFrame(function () {\n            postGetSourceIdMessage(custom_parameter);\n        });\n        return;\n    }\n    if (!iframe.isLoaded) {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n        return;\n    }\n    if (!custom_parameter) {\n        iframe.contentWindow.postMessage({\n            captureSourceId: true\n        }, '*');\n    }\n    else if (!!custom_parameter.forEach) {\n        iframe.contentWindow.postMessage({\n            captureCustomSourceId: custom_parameter\n        }, '*');\n    }\n    else {\n        iframe.contentWindow.postMessage({\n            captureSourceIdWithAudio: true\n        }, '*');\n    }\n}\nvar iframe;\nglobalThis.getScreenConstraints = function (callback) {\n    loadIFrame(function () {\n        getScreenId(function (error, sourceId, screen_constraints) {\n            if (!screen_constraints) {\n                screen_constraints = {\n                    video: true\n                };\n            }\n            callback(error, screen_constraints.video);\n        });\n    });\n};\nfunction loadIFrame(loadCallback) {\n    if (iframe) {\n        loadCallback();\n        return;\n    }\n    iframe = document.createElement('iframe');\n    iframe.onload = function () {\n        iframe.isLoaded = true;\n        loadCallback();\n    };\n    iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n    iframe.style.display = 'none';\n    (document.body || document.documentElement).appendChild(iframe);\n}\nglobalThis.getChromeExtensionStatus = function (callback) {\n    if (!!navigator.mozGetUserMedia) {\n        callback('installed-enabled');\n        return;\n    }\n    globalThis.addEventListener('message', onIFrameCallback);\n    function onIFrameCallback(event) {\n        if (!event.data)\n            return;\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus);\n            globalThis.removeEventListener('message', onIFrameCallback);\n        }\n    }\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\nfunction postGetChromeExtensionStatusMessage() {\n    if (!iframe) {\n        loadIFrame(postGetChromeExtensionStatusMessage);\n        return;\n    }\n    if (!iframe.isLoaded) {\n        setTimeout(postGetChromeExtensionStatusMessage, 100);\n        return;\n    }\n    iframe.contentWindow.postMessage({\n        getChromeExtensionStatus: true\n    }, '*');\n}\nexports.getScreenId = globalThis.getScreenId;\n//# sourceMappingURL=Screen-Capturing-Auto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing-Auto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var chromeMediaSource = 'screen';\nvar sourceId;\nvar screenCallback;\nif (typeof window !== 'undefined' && typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined') {\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n    var isChrome = !!window.chrome && !isOpera;\n    window.addEventListener('message', function (event) {\n        if (event.origin != window.location.origin) {\n            return;\n        }\n        onMessageCallback(event.data);\n    });\n}\nfunction onMessageCallback(data) {\n    if (data == 'PermissionDeniedError') {\n        if (screenCallback)\n            return screenCallback('PermissionDeniedError');\n        else\n            throw new Error('PermissionDeniedError');\n    }\n    if (data == 'rtcmulticonnection-extension-loaded') {\n        chromeMediaSource = 'desktop';\n    }\n    if (data.sourceId && screenCallback) {\n        screenCallback((sourceId = data.sourceId), data.canRequestAudioTrack === true);\n    }\n}\nfunction isChromeExtensionAvailable(callback) {\n    if (!callback)\n        return;\n    if (chromeMediaSource == 'desktop')\n        return callback(true);\n    window.postMessage('are-you-there', '*');\n    setTimeout(function () {\n        if (chromeMediaSource == 'screen') {\n            callback(false);\n        }\n        else\n            callback(true);\n    }, 2000);\n}\nfunction getSourceId(callback) {\n    if (!callback)\n        throw '\"callback\" parameter is mandatory.';\n    if (sourceId)\n        return callback(sourceId);\n    screenCallback = callback;\n    window.postMessage('get-sourceId', '*');\n}\nfunction getCustomSourceId(arr, callback) {\n    if (!arr || !arr.forEach)\n        throw '\"arr\" parameter is mandatory and it must be an array.';\n    if (!callback)\n        throw '\"callback\" parameter is mandatory.';\n    if (sourceId)\n        return callback(sourceId);\n    screenCallback = callback;\n    window.postMessage({\n        'get-custom-sourceId': arr\n    }, '*');\n}\nfunction getSourceIdWithAudio(callback) {\n    if (!callback)\n        throw '\"callback\" parameter is mandatory.';\n    if (sourceId)\n        return callback(sourceId);\n    screenCallback = callback;\n    window.postMessage('audio-plus-tab', '*');\n}\nfunction getChromeExtensionStatus(extensionid, callback) {\n    if (isFirefox)\n        return callback('not-chrome');\n    if (arguments.length != 2) {\n        callback = extensionid;\n        extensionid = 'lfcgfepafnobdloecchnfaclibenjold';\n    }\n    var image = document.createElement('img');\n    image.src = 'chrome-extension://' + extensionid + '/icon.png';\n    image.onload = function () {\n        chromeMediaSource = 'screen';\n        window.postMessage('are-you-there', '*');\n        setTimeout(function () {\n            if (chromeMediaSource == 'screen') {\n                callback('installed-disabled');\n            }\n            else\n                callback('installed-enabled');\n        }, 2000);\n    };\n    image.onerror = function () {\n        callback('not-installed');\n    };\n}\nfunction getScreenConstraintsWithAudio(callback) {\n    getScreenConstraints(callback, true);\n}\nfunction getScreenConstraints(callback, captureSourceIdWithAudio) {\n    sourceId = '';\n    var firefoxScreenConstraints = {\n        mozMediaSource: 'window',\n        mediaSource: 'window'\n    };\n    if (isFirefox)\n        return callback(null, firefoxScreenConstraints);\n    var screen_constraints = {\n        mandatory: {\n            chromeMediaSource: chromeMediaSource,\n            maxWidth: screen.width > 1920 ? screen.width : 1920,\n            maxHeight: screen.height > 1080 ? screen.height : 1080\n        },\n        optional: []\n    };\n    if (chromeMediaSource == 'desktop' && !sourceId) {\n        if (captureSourceIdWithAudio) {\n            getSourceIdWithAudio(function (sourceId, canRequestAudioTrack) {\n                screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n                if (canRequestAudioTrack) {\n                    screen_constraints.canRequestAudioTrack = true;\n                }\n                callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n            });\n        }\n        else {\n            getSourceId(function (sourceId) {\n                screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n                callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n            });\n        }\n        return;\n    }\n    if (chromeMediaSource == 'desktop') {\n        screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n    }\n    callback(null, screen_constraints);\n}\nexports.getScreenConstraints = getScreenConstraints;\nexports.getScreenConstraintsWithAudio = getScreenConstraintsWithAudio;\nexports.isChromeExtensionAvailable = isChromeExtensionAvailable;\nexports.getChromeExtensionStatus = getChromeExtensionStatus;\nexports.getSourceId = getSourceId;\n//# sourceMappingURL=Screen-Capturing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PlatformUtils = void 0;\nvar platform = __webpack_require__(/*! platform */ \"(ssr)/./node_modules/platform/platform.js\");\nvar PlatformUtils = /** @class */ (function () {\n    function PlatformUtils() {\n    }\n    PlatformUtils.getInstance = function () {\n        if (!this.instance) {\n            this.instance = new PlatformUtils();\n        }\n        return PlatformUtils.instance;\n    };\n    PlatformUtils.prototype.isChromeBrowser = function () {\n        return platform.name === 'Chrome';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isSafariBrowser = function () {\n        return platform.name === 'Safari';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isChromeMobileBrowser = function () {\n        return platform.name === 'Chrome Mobile';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isFirefoxBrowser = function () {\n        return platform.name === 'Firefox';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isFirefoxMobileBrowser = function () {\n        return platform.name === 'Firefox Mobile' || platform.name === 'Firefox for iOS';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isOperaBrowser = function () {\n        return platform.name === 'Opera';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isOperaMobileBrowser = function () {\n        return platform.name === 'Opera Mobile';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isEdgeBrowser = function () {\n        var version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;\n        return platform.name === 'Microsoft Edge' && version >= 80;\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isEdgeMobileBrowser = function () {\n        var _a, _b;\n        var version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;\n        return platform.name === 'Microsoft Edge' && (((_a = platform.os) === null || _a === void 0 ? void 0 : _a.family) === 'Android' || ((_b = platform.os) === null || _b === void 0 ? void 0 : _b.family) === 'iOS') && version > 45;\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isAndroidBrowser = function () {\n        return platform.name === 'Android Browser';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isElectron = function () {\n        return platform.name === 'Electron';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isNodeJs = function () {\n        return platform.name === 'Node.js';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isSamsungBrowser = function () {\n        return platform.name === 'Samsung Internet Mobile' || platform.name === 'Samsung Internet';\n    };\n    // TODO: This method exists to overcome bug https://github.com/bestiejs/platform.js/issues/184\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isMotorolaEdgeDevice = function () {\n        var _a;\n        return ((_a = platform.product) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes('motorola edge')) || false;\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isIPhoneOrIPad = function () {\n        var userAgent = !!platform.ua ? platform.ua : navigator.userAgent;\n        var isTouchable = 'ontouchend' in document;\n        var isIPad = /\\b(\\w*Macintosh\\w*)\\b/.test(userAgent) && isTouchable;\n        var isIPhone = /\\b(\\w*iPhone\\w*)\\b/.test(userAgent) && /\\b(\\w*Mobile\\w*)\\b/.test(userAgent) && isTouchable;\n        return isIPad || isIPhone;\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isIOSWithSafari = function () {\n        var userAgent = !!platform.ua ? platform.ua : navigator.userAgent;\n        return (this.isIPhoneOrIPad() &&\n            /\\b(\\w*Apple\\w*)\\b/.test(navigator.vendor) &&\n            /\\b(\\w*Safari\\w*)\\b/.test(userAgent) &&\n            !/\\b(\\w*CriOS\\w*)\\b/.test(userAgent) &&\n            !/\\b(\\w*FxiOS\\w*)\\b/.test(userAgent));\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isIonicIos = function () {\n        return this.isIPhoneOrIPad() && platform.ua.indexOf('Safari') === -1;\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isIonicAndroid = function () {\n        return platform.os.family === 'Android' && platform.name == 'Android Browser';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isMobileDevice = function () {\n        return platform.os.family === 'iOS' || platform.os.family === 'Android';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isReactNative = function () {\n        return false;\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.isChromium = function () {\n        return (this.isChromeBrowser() ||\n            this.isChromeMobileBrowser() ||\n            this.isOperaBrowser() ||\n            this.isOperaMobileBrowser() ||\n            this.isEdgeBrowser() ||\n            this.isEdgeMobileBrowser() ||\n            this.isSamsungBrowser() ||\n            this.isIonicAndroid() ||\n            this.isIonicIos() ||\n            this.isElectron() ||\n            // TODO: remove when possible\n            this.isMotorolaEdgeDevice());\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.canScreenShare = function () {\n        var version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;\n        // Reject mobile devices\n        if (this.isMobileDevice()) {\n            return false;\n        }\n        return (this.isChromeBrowser() ||\n            this.isFirefoxBrowser() ||\n            this.isOperaBrowser() ||\n            this.isElectron() ||\n            this.isEdgeBrowser() ||\n            (this.isSafariBrowser() && version >= 13));\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.getName = function () {\n        return platform.name || '';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.getVersion = function () {\n        return platform.version || '';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.getFamily = function () {\n        return platform.os.family || '';\n    };\n    /**\n     * @hidden\n     */\n    PlatformUtils.prototype.getDescription = function () {\n        return platform.description || '';\n    };\n    return PlatformUtils;\n}());\nexports.PlatformUtils = PlatformUtils;\n//# sourceMappingURL=Platform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcPeer/WebRtcPeer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcPeer/WebRtcPeer.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebRtcPeerSendrecv = exports.WebRtcPeerSendonly = exports.WebRtcPeerRecvonly = exports.WebRtcPeer = void 0;\nvar freeice = __webpack_require__(/*! freeice */ \"(ssr)/./node_modules/freeice/index.js\");\nvar uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nvar ExceptionEvent_1 = __webpack_require__(/*! ../Events/ExceptionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\nvar WebRtcPeer = /** @class */ (function () {\n    function WebRtcPeer(configuration) {\n        var _this = this;\n        this.remoteCandidatesQueue = [];\n        this.localCandidatesQueue = [];\n        this.iceCandidateList = [];\n        platform = Platform_1.PlatformUtils.getInstance();\n        this.configuration = __assign(__assign({}, configuration), { iceServers: !!configuration.iceServers && configuration.iceServers.length > 0 ? configuration.iceServers : freeice(), rtcConfiguration: configuration.rtcConfiguration !== undefined ? configuration.rtcConfiguration : {}, mediaStream: configuration.mediaStream !== undefined ? configuration.mediaStream : null, mode: !!configuration.mode ? configuration.mode : 'sendrecv', id: !!configuration.id ? configuration.id : this.generateUniqueId() });\n        // prettier-ignore\n        logger.debug(\"[WebRtcPeer] configuration:\\n\".concat(JSON.stringify(this.configuration, null, 2)));\n        var rtcConfiguration = this.configuration.rtcConfiguration\n            ? this.configuration.rtcConfiguration\n            : { iceServers: this.configuration.iceServers };\n        if (!rtcConfiguration.iceServers && this.configuration.iceServers) {\n            rtcConfiguration.iceServers = this.configuration.iceServers;\n        }\n        this.pc = new RTCPeerConnection(rtcConfiguration);\n        this.pc.addEventListener('icecandidate', function (event) {\n            if (event.candidate !== null) {\n                // `RTCPeerConnectionIceEvent.candidate` is supposed to be an RTCIceCandidate:\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnectioniceevent-candidate\n                //\n                // But in practice, it is actually an RTCIceCandidateInit that can be used to\n                // obtain a proper candidate, using the RTCIceCandidate constructor:\n                // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n                var candidateInit = event.candidate;\n                var iceCandidate = new RTCIceCandidate(candidateInit);\n                _this.configuration.onIceCandidate(iceCandidate);\n                if (iceCandidate.candidate !== '') {\n                    _this.localCandidatesQueue.push(iceCandidate);\n                }\n            }\n        });\n        this.pc.addEventListener('signalingstatechange', function () { return __awaiter(_this, void 0, void 0, function () {\n            var candidate, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.pc.signalingState === 'stable')) return [3 /*break*/, 6];\n                        _a.label = 1;\n                    case 1:\n                        if (!(this.iceCandidateList.length > 0)) return [3 /*break*/, 6];\n                        candidate = this.iceCandidateList.shift();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.pc.addIceCandidate(candidate)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.error('Error when calling RTCPeerConnection#addIceCandidate for RTCPeerConnection ' + this.getId(), error_1);\n                        return [3 /*break*/, 5];\n                    case 5: return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    WebRtcPeer.prototype.getId = function () {\n        return this.configuration.id;\n    };\n    /**\n     * This method frees the resources used by WebRtcPeer\n     */\n    WebRtcPeer.prototype.dispose = function () {\n        logger.debug('Disposing WebRtcPeer');\n        if (this.pc) {\n            if (this.pc.signalingState === 'closed') {\n                return;\n            }\n            this.pc.close();\n            this.remoteCandidatesQueue = [];\n            this.localCandidatesQueue = [];\n        }\n    };\n    // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement\n    // Transceivers, and instead depend on the deprecated\n    // \"offerToReceiveAudio\" and \"offerToReceiveVideo\".\n    WebRtcPeer.prototype.createOfferLegacy = function () {\n        if (!!this.configuration.mediaStream) {\n            this.deprecatedPeerConnectionTrackApi();\n        }\n        var hasAudio = this.configuration.mediaConstraints.audio;\n        var hasVideo = this.configuration.mediaConstraints.video;\n        var options = {\n            offerToReceiveAudio: this.configuration.mode !== 'sendonly' && hasAudio,\n            offerToReceiveVideo: this.configuration.mode !== 'sendonly' && hasVideo\n        };\n        logger.debug('[createOfferLegacy] RTCPeerConnection.createOffer() options:', JSON.stringify(options));\n        return this.pc.createOffer(options);\n    };\n    /**\n     * Creates an SDP offer from the local RTCPeerConnection to send to the other peer.\n     * Only if the negotiation was initiated by this peer.\n     */\n    WebRtcPeer.prototype.createOffer = function () {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _j, track, tcInit, trackSettings, trackConsts, trackWidth, trackHeight, trackPixels, maxLayers, l, layerDiv, encoding, tc, sendParams, needSetParams, error_2, message, _k, _l, kind, sdpOffer, error_3, message;\n            return __generator(this, function (_m) {\n                switch (_m.label) {\n                    case 0:\n                        // TODO: Delete this conditional when all supported browsers are\n                        // modern enough to implement the Transceiver methods.\n                        if (!('addTransceiver' in this.pc)) {\n                            logger.warn('[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}');\n                            return [2 /*return*/, this.createOfferLegacy()];\n                        }\n                        else {\n                            logger.debug('[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it');\n                        }\n                        if (!(this.configuration.mode !== 'recvonly')) return [3 /*break*/, 7];\n                        // To send media, assume that all desired media tracks have been\n                        // already added by higher level code to our MediaStream.\n                        if (!this.configuration.mediaStream) {\n                            throw new Error(\"[WebRtcPeer.createOffer] Direction is '\".concat(this.configuration.mode, \"', but no stream was configured to be sent\"));\n                        }\n                        _i = 0, _j = this.configuration.mediaStream.getTracks();\n                        _m.label = 1;\n                    case 1:\n                        if (!(_i < _j.length)) return [3 /*break*/, 6];\n                        track = _j[_i];\n                        tcInit = {\n                            direction: this.configuration.mode,\n                            streams: [this.configuration.mediaStream]\n                        };\n                        if (track.kind === 'video' && this.configuration.simulcast) {\n                            trackSettings = track.getSettings();\n                            trackConsts = track.getConstraints();\n                            trackWidth = (_c = (_b = (_a = trackSettings.width) !== null && _a !== void 0 ? _a : trackConsts.width.ideal) !== null && _b !== void 0 ? _b : trackConsts.width) !== null && _c !== void 0 ? _c : 0;\n                            trackHeight = (_f = (_e = (_d = trackSettings.height) !== null && _d !== void 0 ? _d : trackConsts.height.ideal) !== null && _e !== void 0 ? _e : trackConsts.height) !== null && _f !== void 0 ? _f : 0;\n                            logger.info(\"[createOffer] Video track dimensions: \".concat(trackWidth, \"x\").concat(trackHeight));\n                            trackPixels = trackWidth * trackHeight;\n                            maxLayers = 0;\n                            if (trackPixels >= 960 * 540) {\n                                maxLayers = 3;\n                            }\n                            else if (trackPixels >= 480 * 270) {\n                                maxLayers = 2;\n                            }\n                            else {\n                                maxLayers = 1;\n                            }\n                            tcInit.sendEncodings = [];\n                            for (l = 0; l < maxLayers; l++) {\n                                layerDiv = Math.pow(2, (maxLayers - l - 1));\n                                encoding = {\n                                    rid: 'rdiv' + layerDiv.toString(),\n                                    // @ts-ignore -- Property missing from DOM types.\n                                    scalabilityMode: 'L1T1'\n                                };\n                                if (['detail', 'text'].includes(track.contentHint)) {\n                                    // Prioritize best resolution, for maximum picture detail.\n                                    encoding.scaleResolutionDownBy = 1.0;\n                                    // @ts-ignore -- Property missing from DOM types.\n                                    encoding.maxFramerate = Math.floor(30 / layerDiv);\n                                }\n                                else {\n                                    encoding.scaleResolutionDownBy = layerDiv;\n                                }\n                                tcInit.sendEncodings.push(encoding);\n                            }\n                        }\n                        tc = this.pc.addTransceiver(track, tcInit);\n                        if (!(track.kind === 'video')) return [3 /*break*/, 5];\n                        sendParams = tc.sender.getParameters();\n                        needSetParams = false;\n                        if (!((_g = sendParams.degradationPreference) === null || _g === void 0 ? void 0 : _g.length)) {\n                            // degradationPreference for video: \"balanced\", \"maintain-framerate\", \"maintain-resolution\".\n                            // https://www.w3.org/TR/2018/CR-webrtc-20180927/#dom-rtcdegradationpreference\n                            if (['detail', 'text'].includes(track.contentHint)) {\n                                sendParams.degradationPreference = 'maintain-resolution';\n                            }\n                            else {\n                                sendParams.degradationPreference = 'balanced';\n                            }\n                            logger.info(\"[createOffer] Video sender Degradation Preference set: \".concat(sendParams.degradationPreference));\n                            // FIXME: Firefox implements degradationPreference on each individual encoding!\n                            // (set it on every element of the sendParams.encodings array)\n                            needSetParams = true;\n                        }\n                        // FIXME: Check that the simulcast encodings were applied.\n                        // Firefox doesn't implement `RTCRtpTransceiverInit.sendEncodings`\n                        // so the only way to enable simulcast is with `RTCRtpSender.setParameters()`.\n                        //\n                        // This next block can be deleted when Firefox fixes bug #1396918:\n                        // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n                        //\n                        // NOTE: This is done in a way that is compatible with all browsers, to save on\n                        // browser-conditional code. The idea comes from WebRTC Adapter.js:\n                        // * https://github.com/webrtcHacks/adapter/issues/998\n                        // * https://github.com/webrtcHacks/adapter/blob/v7.7.0/src/js/firefox/firefox_shim.js#L231-L255\n                        if (this.configuration.simulcast) {\n                            if (((_h = sendParams.encodings) === null || _h === void 0 ? void 0 : _h.length) !== tcInit.sendEncodings.length) {\n                                sendParams.encodings = tcInit.sendEncodings;\n                                needSetParams = true;\n                            }\n                        }\n                        if (!needSetParams) return [3 /*break*/, 5];\n                        logger.debug(\"[createOffer] Setting new RTCRtpSendParameters to video sender\");\n                        _m.label = 2;\n                    case 2:\n                        _m.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, tc.sender.setParameters(sendParams)];\n                    case 3:\n                        _m.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _m.sent();\n                        message = \"[WebRtcPeer.createOffer] Cannot set RTCRtpSendParameters to video sender\";\n                        if (error_2 instanceof Error) {\n                            message += \": \".concat(error_2.message);\n                        }\n                        throw new Error(message);\n                    case 5:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        // To just receive media, create new recvonly transceivers.\n                        for (_k = 0, _l = ['audio', 'video']; _k < _l.length; _k++) {\n                            kind = _l[_k];\n                            // Check if the media kind should be used.\n                            if (!this.configuration.mediaConstraints[kind]) {\n                                continue;\n                            }\n                            this.configuration.mediaStream = new MediaStream();\n                            this.pc.addTransceiver(kind, {\n                                direction: this.configuration.mode,\n                                streams: [this.configuration.mediaStream]\n                            });\n                        }\n                        _m.label = 8;\n                    case 8:\n                        _m.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, this.pc.createOffer()];\n                    case 9:\n                        sdpOffer = _m.sent();\n                        return [3 /*break*/, 11];\n                    case 10:\n                        error_3 = _m.sent();\n                        message = \"[WebRtcPeer.createOffer] Browser failed creating an SDP Offer\";\n                        if (error_3 instanceof Error) {\n                            message += \": \".concat(error_3.message);\n                        }\n                        throw new Error(message);\n                    case 11: return [2 /*return*/, sdpOffer];\n                }\n            });\n        });\n    };\n    WebRtcPeer.prototype.deprecatedPeerConnectionTrackApi = function () {\n        for (var _i = 0, _a = this.configuration.mediaStream.getTracks(); _i < _a.length; _i++) {\n            var track = _a[_i];\n            this.pc.addTrack(track, this.configuration.mediaStream);\n        }\n    };\n    /**\n     * Creates an SDP answer from the local RTCPeerConnection to send to the other peer\n     * Only if the negotiation was initiated by the other peer\n     */\n    WebRtcPeer.prototype.createAnswer = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // TODO: Delete this conditional when all supported browsers are\n            // modern enough to implement the Transceiver methods.\n            if ('getTransceivers' in _this.pc) {\n                logger.debug('[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it');\n                var _loop_1 = function (kind) {\n                    // Check if the media kind should be used.\n                    if (!_this.configuration.mediaConstraints[kind]) {\n                        return \"continue\";\n                    }\n                    var tc = _this.pc.getTransceivers().find(function (tc) { return tc.receiver.track.kind === kind; });\n                    if (tc) {\n                        // Enforce our desired direction.\n                        tc.direction = _this.configuration.mode;\n                    }\n                    else {\n                        return { value: reject(new Error(\"\".concat(kind, \" requested, but no transceiver was created from remote description\"))) };\n                    }\n                };\n                // Ensure that the PeerConnection already contains one Transceiver\n                // for each kind of media.\n                // The Transceivers should have been already created internally by\n                // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.\n                for (var _i = 0, _a = ['audio', 'video']; _i < _a.length; _i++) {\n                    var kind = _a[_i];\n                    var state_1 = _loop_1(kind);\n                    if (typeof state_1 === \"object\")\n                        return state_1.value;\n                }\n                _this.pc\n                    .createAnswer()\n                    .then(function (sdpAnswer) { return resolve(sdpAnswer); })\n                    .catch(function (error) { return reject(error); });\n            }\n            else {\n                // TODO: Delete else branch when all supported browsers are\n                // modern enough to implement the Transceiver methods\n                var offerAudio = void 0, offerVideo = true;\n                if (!!_this.configuration.mediaConstraints) {\n                    offerAudio =\n                        typeof _this.configuration.mediaConstraints.audio === 'boolean' ? _this.configuration.mediaConstraints.audio : true;\n                    offerVideo =\n                        typeof _this.configuration.mediaConstraints.video === 'boolean' ? _this.configuration.mediaConstraints.video : true;\n                    var constraints = {\n                        offerToReceiveAudio: offerAudio,\n                        offerToReceiveVideo: offerVideo\n                    };\n                    _this.pc.createAnswer(constraints)\n                        .then(function (sdpAnswer) { return resolve(sdpAnswer); })\n                        .catch(function (error) { return reject(error); });\n                }\n            }\n            // else, there is nothing to do; the legacy createAnswer() options do\n            // not offer any control over which tracks are included in the answer.\n        });\n    };\n    /**\n     * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol\n     */\n    WebRtcPeer.prototype.processLocalOffer = function (offer) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.pc\n                .setLocalDescription(offer)\n                .then(function () {\n                var localDescription = _this.pc.localDescription;\n                if (!!localDescription) {\n                    logger.debug('Local description set', localDescription.sdp);\n                    return resolve();\n                }\n                else {\n                    return reject('Local description is not defined');\n                }\n            })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol\n     */\n    WebRtcPeer.prototype.processRemoteOffer = function (sdpOffer) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var offer = {\n                type: 'offer',\n                sdp: sdpOffer\n            };\n            logger.debug('SDP offer received, setting remote description', offer);\n            if (_this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set remote description');\n            }\n            _this.setRemoteDescription(offer)\n                .then(function () { return resolve(); })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol\n     */\n    WebRtcPeer.prototype.processLocalAnswer = function (answer) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.debug('SDP answer created, setting local description');\n            if (_this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set local description');\n            }\n            _this.pc\n                .setLocalDescription(answer)\n                .then(function () { return resolve(); })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol\n     */\n    WebRtcPeer.prototype.processRemoteAnswer = function (sdpAnswer) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var answer = {\n                type: 'answer',\n                sdp: sdpAnswer\n            };\n            logger.debug('SDP answer received, setting remote description');\n            if (_this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set remote description');\n            }\n            _this.setRemoteDescription(answer)\n                .then(function () {\n                // DEBUG: Uncomment for details.\n                // {\n                //     const tc = this.pc.getTransceivers().find((tc) => tc.sender.track?.kind === \"video\");\n                //     // prettier-ignore\n                //     logger.debug(`[processRemoteAnswer] Transceiver send parameters (effective):\\n${JSON.stringify(tc?.sender.getParameters(), null, 2)}`);\n                // }\n                resolve();\n            })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * @hidden\n     */\n    WebRtcPeer.prototype.setRemoteDescription = function (sdp) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.pc.setRemoteDescription(sdp)];\n            });\n        });\n    };\n    /**\n     * Callback function invoked when an ICE candidate is received\n     */\n    WebRtcPeer.prototype.addIceCandidate = function (iceCandidate) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.debug('Remote ICE candidate received', iceCandidate);\n            _this.remoteCandidatesQueue.push(iceCandidate);\n            switch (_this.pc.signalingState) {\n                case 'closed':\n                    reject(new Error('PeerConnection object is closed'));\n                    break;\n                case 'stable':\n                    if (!!_this.pc.remoteDescription) {\n                        _this.pc\n                            .addIceCandidate(iceCandidate)\n                            .then(function () { return resolve(); })\n                            .catch(function (error) { return reject(error); });\n                    }\n                    else {\n                        _this.iceCandidateList.push(iceCandidate);\n                        resolve();\n                    }\n                    break;\n                default:\n                    _this.iceCandidateList.push(iceCandidate);\n                    resolve();\n            }\n        });\n    };\n    WebRtcPeer.prototype.addIceConnectionStateChangeListener = function (otherId) {\n        var _this = this;\n        this.pc.addEventListener('iceconnectionstatechange', function () {\n            var iceConnectionState = _this.pc.iceConnectionState;\n            switch (iceConnectionState) {\n                case 'disconnected':\n                    // Possible network disconnection\n                    var msg1 = 'IceConnectionState of RTCPeerConnection ' +\n                        _this.configuration.id +\n                        ' (' +\n                        otherId +\n                        ') change to \"disconnected\". Possible network disconnection';\n                    logger.warn(msg1);\n                    _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);\n                    break;\n                case 'failed':\n                    var msg2 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') to \"failed\"';\n                    logger.error(msg2);\n                    _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED, msg2);\n                    break;\n                case 'closed':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"closed\"');\n                    break;\n                case 'new':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"new\"');\n                    break;\n                case 'checking':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"checking\"');\n                    break;\n                case 'connected':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"connected\"');\n                    break;\n                case 'completed':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"completed\"');\n                    break;\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    WebRtcPeer.prototype.generateUniqueId = function () {\n        return (0, uuid_1.v4)();\n    };\n    return WebRtcPeer;\n}());\nexports.WebRtcPeer = WebRtcPeer;\nvar WebRtcPeerRecvonly = /** @class */ (function (_super) {\n    __extends(WebRtcPeerRecvonly, _super);\n    function WebRtcPeerRecvonly(configuration) {\n        configuration.mode = 'recvonly';\n        return _super.call(this, configuration) || this;\n    }\n    return WebRtcPeerRecvonly;\n}(WebRtcPeer));\nexports.WebRtcPeerRecvonly = WebRtcPeerRecvonly;\nvar WebRtcPeerSendonly = /** @class */ (function (_super) {\n    __extends(WebRtcPeerSendonly, _super);\n    function WebRtcPeerSendonly(configuration) {\n        configuration.mode = 'sendonly';\n        return _super.call(this, configuration) || this;\n    }\n    return WebRtcPeerSendonly;\n}(WebRtcPeer));\nexports.WebRtcPeerSendonly = WebRtcPeerSendonly;\nvar WebRtcPeerSendrecv = /** @class */ (function (_super) {\n    __extends(WebRtcPeerSendrecv, _super);\n    function WebRtcPeerSendrecv(configuration) {\n        configuration.mode = 'sendrecv';\n        return _super.call(this, configuration) || this;\n    }\n    return WebRtcPeerSendrecv;\n}(WebRtcPeer));\nexports.WebRtcPeerSendrecv = WebRtcPeerSendrecv;\n//# sourceMappingURL=WebRtcPeer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcPeer/WebRtcPeer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcStats/WebRtcStats.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcStats/WebRtcStats.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebRtcStats = void 0;\nvar OpenViduLogger_1 = __webpack_require__(/*! ../Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\nvar WebRtcStats = /** @class */ (function () {\n    function WebRtcStats(stream) {\n        this.stream = stream;\n        this.STATS_ITEM_NAME = 'webrtc-stats-config';\n        this.webRtcStatsEnabled = false;\n        this.statsInterval = 1;\n        platform = Platform_1.PlatformUtils.getInstance();\n    }\n    WebRtcStats.prototype.isEnabled = function () {\n        return this.webRtcStatsEnabled;\n    };\n    WebRtcStats.prototype.initWebRtcStats = function () {\n        var _this = this;\n        var webrtcObj;\n        // When cross-site (aka third-party) cookies are blocked by the browser,\n        // accessing localStorage in a third-party iframe throws a DOMException.\n        try {\n            webrtcObj = localStorage.getItem(this.STATS_ITEM_NAME);\n        }\n        catch (e) { }\n        if (!!webrtcObj) {\n            this.webRtcStatsEnabled = true;\n            var webrtcStatsConfig = JSON.parse(webrtcObj);\n            // webrtc object found in local storage\n            logger.warn('WebRtc stats enabled for stream ' + this.stream.streamId + ' of connection ' + this.stream.connection.connectionId);\n            logger.warn('localStorage item: ' + JSON.stringify(webrtcStatsConfig));\n            this.POST_URL = webrtcStatsConfig.httpEndpoint;\n            this.statsInterval = webrtcStatsConfig.interval; // Interval in seconds\n            this.webRtcStatsIntervalId = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.sendStatsToHttpEndpoint()];\n                        case 1:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            }); }, this.statsInterval * 1000);\n        }\n        else {\n            logger.debug('WebRtc stats not enabled');\n        }\n    };\n    // {\n    // \"localCandidate\": {\n    //     \"id\": \"RTCIceCandidate_/r4P1y2Q\",\n    //     \"timestamp\": 1616080155617,\n    //     \"type\": \"local-candidate\",\n    //     \"transportId\": \"RTCTransport_0_1\",\n    //     \"isRemote\": false,\n    //     \"networkType\": \"wifi\",\n    //     \"ip\": \"123.45.67.89\",\n    //     \"port\": 63340,\n    //     \"protocol\": \"udp\",\n    //     \"candidateType\": \"srflx\",\n    //     \"priority\": 1686052607,\n    //     \"deleted\": false,\n    //     \"raw\": [\n    //     \"candidate:3345412921 1 udp 1686052607 123.45.67.89 63340 typ srflx raddr 192.168.1.31 rport 63340 generation 0 ufrag 0ZtT network-id 1 network-cost 10\",\n    //     \"candidate:58094482 1 udp 41885695 98.76.54.32 44431 typ relay raddr 123.45.67.89 rport 63340 generation 0 ufrag 0ZtT network-id 1 network-cost 10\"\n    //     ]\n    // },\n    // \"remoteCandidate\": {\n    //     \"id\": \"RTCIceCandidate_1YO18gph\",\n    //     \"timestamp\": 1616080155617,\n    //     \"type\": \"remote-candidate\",\n    //     \"transportId\": \"RTCTransport_0_1\",\n    //     \"isRemote\": true,\n    //     \"ip\": \"12.34.56.78\",\n    //     \"port\": 64989,\n    //     \"protocol\": \"udp\",\n    //     \"candidateType\": \"srflx\",\n    //     \"priority\": 1679819263,\n    //     \"deleted\": false,\n    //     \"raw\": [\n    //     \"candidate:16 1 UDP 1679819263 12.34.56.78 64989 typ srflx raddr 172.19.0.1 rport 64989\",\n    //     \"candidate:16 1 UDP 1679819263 12.34.56.78 64989 typ srflx raddr 172.19.0.1 rport 64989\"\n    //     ]\n    // }\n    // }\n    // Have been tested in:\n    //   - Linux Desktop:\n    //       - Chrome 89.0.4389.90\n    //       - Opera 74.0.3911.218\n    //       - Firefox 86\n    //       - Microsoft Edge 91.0.825.0\n    //       - Electron 11.3.0 (Chromium 87.0.4280.141)\n    //   - Windows Desktop:\n    //       - Chrome 89.0.4389.90\n    //       - Opera 74.0.3911.232\n    //       - Firefox 86.0.1\n    //       - Microsoft Edge 89.0.774.54\n    //       - Electron 11.3.0 (Chromium 87.0.4280.141)\n    //   - MacOS Desktop:\n    //       - Chrome 89.0.4389.90\n    //       - Firefox 87.0\n    //       - Opera 75.0.3969.93\n    //       - Microsoft Edge 89.0.774.57\n    //       - Safari 14.0 (14610.1.28.1.9)\n    //       - Electron 11.3.0 (Chromium 87.0.4280.141)\n    //   - Android:\n    //       - Chrome Mobile 89.0.4389.90\n    //       - Opera 62.3.3146.57763\n    //       - Firefox Mobile 86.6.1\n    //       - Microsoft Edge Mobile 46.02.4.5147\n    //       - Ionic 5\n    //       - React Native 0.64\n    //   - iOS:\n    //       - Safari Mobile\n    //       - ¿Ionic?\n    //       - ¿React Native?\n    WebRtcStats.prototype.getSelectedIceCandidateInfo = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n            var statsReport, transportStat, candidatePairs, localCandidates, remoteCandidates, selectedCandidatePair, selectedCandidatePairId, length_1, iterator, i, candidatePair, localCandidateId, remoteCandidateId, finalLocalCandidate, candList, cand, _i, cand_1, c, finalRemoteCandidate, candList, cand, _a, cand_2, c;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.stream.getRTCPeerConnection().getStats()];\n                    case 1:\n                        statsReport = _b.sent();\n                        candidatePairs = new Map();\n                        localCandidates = new Map();\n                        remoteCandidates = new Map();\n                        statsReport.forEach(function (stat) {\n                            if (stat.type === 'transport' && (platform.isChromium() || platform.isSafariBrowser() || platform.isReactNative())) {\n                                transportStat = stat;\n                            }\n                            switch (stat.type) {\n                                case 'candidate-pair':\n                                    candidatePairs.set(stat.id, stat);\n                                    break;\n                                case 'local-candidate':\n                                    localCandidates.set(stat.id, stat);\n                                    break;\n                                case 'remote-candidate':\n                                    remoteCandidates.set(stat.id, stat);\n                                    break;\n                            }\n                        });\n                        if (transportStat != null) {\n                            selectedCandidatePairId = transportStat.selectedCandidatePairId;\n                            selectedCandidatePair = candidatePairs.get(selectedCandidatePairId);\n                        }\n                        else {\n                            length_1 = candidatePairs.size;\n                            iterator = candidatePairs.values();\n                            for (i = 0; i < length_1; i++) {\n                                candidatePair = iterator.next().value;\n                                if (candidatePair['selected']) {\n                                    selectedCandidatePair = candidatePair;\n                                    break;\n                                }\n                            }\n                        }\n                        localCandidateId = selectedCandidatePair.localCandidateId;\n                        remoteCandidateId = selectedCandidatePair.remoteCandidateId;\n                        finalLocalCandidate = localCandidates.get(localCandidateId);\n                        if (!!finalLocalCandidate) {\n                            candList = this.stream.getLocalIceCandidateList();\n                            cand = candList.filter(function (c) {\n                                return (!!c.candidate &&\n                                    (c.candidate.indexOf(finalLocalCandidate.ip) >= 0 || c.candidate.indexOf(finalLocalCandidate.address) >= 0) &&\n                                    c.candidate.indexOf(finalLocalCandidate.port) >= 0);\n                            });\n                            finalLocalCandidate.raw = [];\n                            for (_i = 0, cand_1 = cand; _i < cand_1.length; _i++) {\n                                c = cand_1[_i];\n                                finalLocalCandidate.raw.push(c.candidate);\n                            }\n                        }\n                        else {\n                            finalLocalCandidate = 'ERROR: No active local ICE candidate. Probably ICE-TCP is being used';\n                        }\n                        finalRemoteCandidate = remoteCandidates.get(remoteCandidateId);\n                        if (!!finalRemoteCandidate) {\n                            candList = this.stream.getRemoteIceCandidateList();\n                            cand = candList.filter(function (c) {\n                                return (!!c.candidate &&\n                                    (c.candidate.indexOf(finalRemoteCandidate.ip) >= 0 || c.candidate.indexOf(finalRemoteCandidate.address) >= 0) &&\n                                    c.candidate.indexOf(finalRemoteCandidate.port) >= 0);\n                            });\n                            finalRemoteCandidate.raw = [];\n                            for (_a = 0, cand_2 = cand; _a < cand_2.length; _a++) {\n                                c = cand_2[_a];\n                                finalRemoteCandidate.raw.push(c.candidate);\n                            }\n                        }\n                        else {\n                            finalRemoteCandidate = 'ERROR: No active remote ICE candidate. Probably ICE-TCP is being used';\n                        }\n                        return [2 /*return*/, resolve({\n                                localCandidate: finalLocalCandidate,\n                                remoteCandidate: finalRemoteCandidate\n                            })];\n                }\n            });\n        }); });\n    };\n    WebRtcStats.prototype.stopWebRtcStats = function () {\n        if (this.webRtcStatsEnabled) {\n            clearInterval(this.webRtcStatsIntervalId);\n            logger.warn('WebRtc stats stopped for disposed stream ' + this.stream.streamId + ' of connection ' + this.stream.connection.connectionId);\n        }\n    };\n    WebRtcStats.prototype.sendStats = function (url, response) {\n        return __awaiter(this, void 0, void 0, function () {\n            var configuration, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        configuration = {\n                            headers: {\n                                'Content-type': 'application/json'\n                            },\n                            body: JSON.stringify(response),\n                            method: 'POST'\n                        };\n                        return [4 /*yield*/, fetch(url, configuration)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        logger.error(\"sendStats error: \".concat(JSON.stringify(error_1)));\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WebRtcStats.prototype.sendStatsToHttpEndpoint = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var webrtcStats, response, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this.getCommonStats()];\n                    case 1:\n                        webrtcStats = _a.sent();\n                        response = this.generateJSONStatsResponse(webrtcStats);\n                        return [4 /*yield*/, this.sendStats(this.POST_URL, response)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_2 = _a.sent();\n                        logger.log(error_2);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Have been tested in:\n    //   - Linux Desktop:\n    //       - Chrome 89.0.4389.90\n    //       - Opera 74.0.3911.218\n    //       - Firefox 86\n    //       - Microsoft Edge 91.0.825.0\n    //       - Electron 11.3.0 (Chromium 87.0.4280.141)\n    //   - Windows Desktop:\n    //       - Chrome 89.0.4389.90\n    //       - Opera 74.0.3911.232\n    //       - Firefox 86.0.1\n    //       - Microsoft Edge 89.0.774.54\n    //       - Electron 11.3.0 (Chromium 87.0.4280.141)\n    //   - MacOS Desktop:\n    //       - Chrome 89.0.4389.90\n    //       - Opera 75.0.3969.93\n    //       - Firefox 87.0\n    //       - Microsoft Edge 89.0.774.57\n    //       - Safari 14.0 (14610.1.28.1.9)\n    //       - Electron 11.3.0 (Chromium 87.0.4280.141)\n    //   - Android:\n    //       - Chrome Mobile 89.0.4389.90\n    //       - Opera 62.3.3146.57763\n    //       - Firefox Mobile 86.6.1\n    //       - Microsoft Edge Mobile 46.02.4.5147\n    //       - Ionic 5\n    //       - React Native 0.64\n    //   - iOS:\n    //       - Safari Mobile\n    //       - ¿Ionic?\n    //       - ¿React Native?\n    WebRtcStats.prototype.getCommonStats = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n                        var statsReport, response_1, videoTrackStats_1, candidatePairStats_1, error_3;\n                        var _this = this;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    _a.trys.push([0, 2, , 3]);\n                                    return [4 /*yield*/, this.stream.getRTCPeerConnection().getStats()];\n                                case 1:\n                                    statsReport = _a.sent();\n                                    response_1 = this.getWebRtcStatsResponseOutline();\n                                    videoTrackStats_1 = ['framesReceived', 'framesDropped', 'framesSent', 'frameHeight', 'frameWidth'];\n                                    candidatePairStats_1 = ['availableOutgoingBitrate', 'currentRoundTripTime'];\n                                    statsReport.forEach(function (stat) {\n                                        var mediaType = stat.mediaType != null ? stat.mediaType : stat.kind;\n                                        var addStat = function (direction, key) {\n                                            if (stat[key] != null && response_1[direction] != null) {\n                                                if (!mediaType && videoTrackStats_1.indexOf(key) > -1) {\n                                                    mediaType = 'video';\n                                                }\n                                                if (direction != null && mediaType != null && key != null && response_1[direction][mediaType] != null) {\n                                                    response_1[direction][mediaType][key] = Number(stat[key]);\n                                                }\n                                                else if (direction != null && key != null && candidatePairStats_1.includes(key)) {\n                                                    // candidate-pair-stats\n                                                    response_1[direction][key] = Number(stat[key]);\n                                                }\n                                            }\n                                        };\n                                        switch (stat.type) {\n                                            case 'outbound-rtp':\n                                                addStat('outbound', 'bytesSent');\n                                                addStat('outbound', 'packetsSent');\n                                                addStat('outbound', 'framesEncoded');\n                                                addStat('outbound', 'nackCount');\n                                                addStat('outbound', 'firCount');\n                                                addStat('outbound', 'pliCount');\n                                                addStat('outbound', 'qpSum');\n                                                break;\n                                            case 'inbound-rtp':\n                                                addStat('inbound', 'bytesReceived');\n                                                addStat('inbound', 'packetsReceived');\n                                                addStat('inbound', 'packetsLost');\n                                                addStat('inbound', 'jitter');\n                                                addStat('inbound', 'framesDecoded');\n                                                addStat('inbound', 'nackCount');\n                                                addStat('inbound', 'firCount');\n                                                addStat('inbound', 'pliCount');\n                                                break;\n                                            case 'track':\n                                                addStat('inbound', 'jitterBufferDelay');\n                                                addStat('inbound', 'framesReceived');\n                                                addStat('outbound', 'framesDropped');\n                                                addStat('outbound', 'framesSent');\n                                                addStat(_this.stream.isLocal() ? 'outbound' : 'inbound', 'frameHeight');\n                                                addStat(_this.stream.isLocal() ? 'outbound' : 'inbound', 'frameWidth');\n                                                break;\n                                            case 'candidate-pair':\n                                                addStat('candidatepair', 'currentRoundTripTime');\n                                                addStat('candidatepair', 'availableOutgoingBitrate');\n                                                break;\n                                        }\n                                    });\n                                    // Delete candidatepair from response if null\n                                    if (!(response_1 === null || response_1 === void 0 ? void 0 : response_1.candidatepair) || Object.keys(response_1.candidatepair).length === 0) {\n                                        delete response_1.candidatepair;\n                                    }\n                                    return [2 /*return*/, resolve(response_1)];\n                                case 2:\n                                    error_3 = _a.sent();\n                                    logger.error('Error getting common stats: ', error_3);\n                                    return [2 /*return*/, reject(error_3)];\n                                case 3: return [2 /*return*/];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    WebRtcStats.prototype.generateJSONStatsResponse = function (stats) {\n        return {\n            '@timestamp': new Date().toISOString(),\n            participant_id: this.stream.connection.data,\n            session_id: this.stream.session.sessionId,\n            platform: platform.getName(),\n            platform_description: platform.getDescription(),\n            stream: 'webRTC',\n            webrtc_stats: stats\n        };\n    };\n    WebRtcStats.prototype.getWebRtcStatsResponseOutline = function () {\n        if (this.stream.isLocal()) {\n            return {\n                outbound: {\n                    audio: {},\n                    video: {}\n                },\n                candidatepair: {}\n            };\n        }\n        else {\n            return {\n                inbound: {\n                    audio: {},\n                    video: {}\n                }\n            };\n        }\n    };\n    return WebRtcStats;\n}());\nexports.WebRtcStats = WebRtcStats;\n//# sourceMappingURL=WebRtcStats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcStats/WebRtcStats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Connection.js":
/*!******************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/Connection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Connection = void 0;\nvar Stream_1 = __webpack_require__(/*! ./Stream */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Stream.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar ExceptionEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/ExceptionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Represents each one of the user's connection to the session (the local one and other user's connections).\n * Therefore each {@link Session} and {@link Stream} object has an attribute of type Connection\n */\nvar Connection = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Connection(session, connectionOptions) {\n        this.session = session;\n        /**\n         * @hidden\n         */\n        this.disposed = false;\n        var msg = \"'Connection' created \";\n        if (!!connectionOptions.role) {\n            // Connection is local\n            this.localOptions = connectionOptions;\n            this.connectionId = this.localOptions.id;\n            this.creationTime = this.localOptions.createdAt;\n            this.data = this.localOptions.metadata;\n            this.rpcSessionId = this.localOptions.sessionId;\n            this.role = this.localOptions.role;\n            this.record = this.localOptions.record;\n            msg += '(local)';\n        }\n        else {\n            // Connection is remote\n            this.remoteOptions = connectionOptions;\n            this.connectionId = this.remoteOptions.id;\n            this.creationTime = this.remoteOptions.createdAt;\n            if (this.remoteOptions.metadata) {\n                this.data = this.remoteOptions.metadata;\n            }\n            if (this.remoteOptions.streams) {\n                this.initRemoteStreams(this.remoteOptions.streams);\n            }\n            msg += \"(remote) with 'connectionId' [\" + this.remoteOptions.id + ']';\n        }\n        logger.info(msg);\n    }\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    Connection.prototype.sendIceCandidate = function (candidate) {\n        var _this = this;\n        if (!this.disposed) {\n            logger.debug((!!this.stream.outboundStreamOpts ? 'Local' : 'Remote') + 'candidate for' + this.connectionId, candidate);\n            this.session.openvidu.sendRequest('onIceCandidate', {\n                endpointName: this.connectionId,\n                candidate: candidate.candidate,\n                sdpMid: candidate.sdpMid,\n                sdpMLineIndex: candidate.sdpMLineIndex\n            }, function (error, response) {\n                if (error) {\n                    logger.error('Error sending ICE candidate: ' + JSON.stringify(error));\n                    _this.session.emitEvent('exception', [\n                        new ExceptionEvent_1.ExceptionEvent(_this.session, ExceptionEvent_1.ExceptionEventName.ICE_CANDIDATE_ERROR, _this.session, 'There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side', error)\n                    ]);\n                }\n            });\n        }\n        else {\n            logger.warn(\"Connection \".concat(this.connectionId, \" disposed when trying to send an ICE candidate. ICE candidate not sent\"));\n        }\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.initRemoteStreams = function (options) {\n        var _this = this;\n        // This is ready for supporting multiple streams per Connection object. Right now the loop will always run just once\n        // this.stream should also be replaced by a collection of streams to support multiple streams per Connection\n        options.forEach(function (opts) {\n            var streamOptions = {\n                id: opts.id,\n                createdAt: opts.createdAt,\n                connection: _this,\n                hasAudio: opts.hasAudio,\n                hasVideo: opts.hasVideo,\n                audioActive: opts.audioActive,\n                videoActive: opts.videoActive,\n                typeOfVideo: opts.typeOfVideo,\n                frameRate: opts.frameRate,\n                videoDimensions: !!opts.videoDimensions ? JSON.parse(opts.videoDimensions) : undefined,\n                filter: !!opts.filter ? opts.filter : undefined\n            };\n            var stream = new Stream_1.Stream(_this.session, streamOptions);\n            _this.addStream(stream);\n        });\n        logger.info(\"Remote 'Connection' with 'connectionId' [\" + this.connectionId + '] is now configured for receiving Streams with options: ', this.stream.inboundStreamOpts);\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.addStream = function (stream) {\n        stream.connection = this;\n        this.stream = stream;\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.removeStream = function () {\n        delete this.stream;\n    };\n    /**\n     * @hidden\n     */\n    Connection.prototype.dispose = function () {\n        this.disposed = true;\n        this.removeStream();\n    };\n    return Connection;\n}());\nexports.Connection = Connection;\n//# sourceMappingURL=Connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/EventDispatcher.js":
/*!***********************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/EventDispatcher.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventDispatcher = void 0;\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar EventEmitter = __webpack_require__(/*! wolfy87-eventemitter */ \"(ssr)/./node_modules/wolfy87-eventemitter/EventEmitter.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\nvar EventDispatcher = /** @class */ (function () {\n    function EventDispatcher() {\n        /**\n         * @hidden\n         */\n        this.userHandlerArrowHandler = new WeakMap();\n        /**\n         * @hidden\n         */\n        this.ee = new EventEmitter();\n    }\n    /**\n     * @hidden\n     */\n    EventDispatcher.prototype.onAux = function (type, message, handler) {\n        var arrowHandler = function (event) {\n            if (event) {\n                logger.debug(message, event);\n            }\n            else {\n                logger.debug(message);\n            }\n            handler(event);\n        };\n        this.userHandlerArrowHandler.set(handler, arrowHandler);\n        this.ee.on(type, arrowHandler);\n        return this;\n    };\n    /**\n     * @hidden\n     */\n    EventDispatcher.prototype.onceAux = function (type, message, handler) {\n        var _this = this;\n        var arrowHandler = function (event) {\n            if (event) {\n                logger.debug(message, event);\n            }\n            else {\n                logger.debug(message);\n            }\n            handler(event);\n            // Remove handler from map after first and only execution\n            _this.userHandlerArrowHandler.delete(handler);\n        };\n        this.userHandlerArrowHandler.set(handler, arrowHandler);\n        this.ee.once(type, arrowHandler);\n        return this;\n    };\n    /**\n     * @hidden\n     */\n    EventDispatcher.prototype.offAux = function (type, handler) {\n        if (!handler) {\n            this.ee.removeAllListeners(type);\n        }\n        else {\n            // Must remove internal arrow function handler paired with user handler\n            var arrowHandler = this.userHandlerArrowHandler.get(handler);\n            if (!!arrowHandler) {\n                this.ee.off(type, arrowHandler);\n            }\n            this.userHandlerArrowHandler.delete(handler);\n        }\n        return this;\n    };\n    return EventDispatcher;\n}());\nexports.EventDispatcher = EventDispatcher;\n//# sourceMappingURL=EventDispatcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHUvRXZlbnREaXNwYXRjaGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLHVCQUF1QixtQkFBTyxDQUFDLHNJQUEyQztBQUMxRSxtQkFBbUIsbUJBQU8sQ0FBQyx1RkFBc0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHUvRXZlbnREaXNwYXRjaGVyLmpzPzZiZGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogKEMpIENvcHlyaWdodCAyMDE3LTIwMjIgT3BlblZpZHUgKGh0dHBzOi8vb3BlbnZpZHUuaW8pXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXZlbnREaXNwYXRjaGVyID0gdm9pZCAwO1xudmFyIE9wZW5WaWR1TG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vT3BlblZpZHVJbnRlcm5hbC9Mb2dnZXIvT3BlblZpZHVMb2dnZXJcIik7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIndvbGZ5ODctZXZlbnRlbWl0dGVyXCIpO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBsb2dnZXIgPSBPcGVuVmlkdUxvZ2dlcl8xLk9wZW5WaWR1TG9nZ2VyLmdldEluc3RhbmNlKCk7XG52YXIgRXZlbnREaXNwYXRjaGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBoaWRkZW5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXNlckhhbmRsZXJBcnJvd0hhbmRsZXIgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGhpZGRlblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUub25BdXggPSBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSwgaGFuZGxlcikge1xuICAgICAgICB2YXIgYXJyb3dIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcobWVzc2FnZSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcihldmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXNlckhhbmRsZXJBcnJvd0hhbmRsZXIuc2V0KGhhbmRsZXIsIGFycm93SGFuZGxlcik7XG4gICAgICAgIHRoaXMuZWUub24odHlwZSwgYXJyb3dIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5vbmNlQXV4ID0gZnVuY3Rpb24gKHR5cGUsIG1lc3NhZ2UsIGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFycm93SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKG1lc3NhZ2UsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGhhbmRsZXIgZnJvbSBtYXAgYWZ0ZXIgZmlyc3QgYW5kIG9ubHkgZXhlY3V0aW9uXG4gICAgICAgICAgICBfdGhpcy51c2VySGFuZGxlckFycm93SGFuZGxlci5kZWxldGUoaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXNlckhhbmRsZXJBcnJvd0hhbmRsZXIuc2V0KGhhbmRsZXIsIGFycm93SGFuZGxlcik7XG4gICAgICAgIHRoaXMuZWUub25jZSh0eXBlLCBhcnJvd0hhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlLm9mZkF1eCA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5lZS5yZW1vdmVBbGxMaXN0ZW5lcnModHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNdXN0IHJlbW92ZSBpbnRlcm5hbCBhcnJvdyBmdW5jdGlvbiBoYW5kbGVyIHBhaXJlZCB3aXRoIHVzZXIgaGFuZGxlclxuICAgICAgICAgICAgdmFyIGFycm93SGFuZGxlciA9IHRoaXMudXNlckhhbmRsZXJBcnJvd0hhbmRsZXIuZ2V0KGhhbmRsZXIpO1xuICAgICAgICAgICAgaWYgKCEhYXJyb3dIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZS5vZmYodHlwZSwgYXJyb3dIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXNlckhhbmRsZXJBcnJvd0hhbmRsZXIuZGVsZXRlKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50RGlzcGF0Y2hlcjtcbn0oKSk7XG5leHBvcnRzLkV2ZW50RGlzcGF0Y2hlciA9IEV2ZW50RGlzcGF0Y2hlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50RGlzcGF0Y2hlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/EventDispatcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Filter.js":
/*!**************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/Filter.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Filter = void 0;\nvar StreamPropertyChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\");\nvar OpenViduError_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/OpenViduError */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * **WARNING**: experimental option. This interface may change in the near future\n *\n * Video/audio filter applied to a Stream. See {@link Stream.applyFilter}\n */\nvar Filter = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Filter(type, options) {\n        /**\n         * @hidden\n         */\n        this.handlers = new Map();\n        this.type = type;\n        this.options = options;\n    }\n    /**\n     * Executes a filter method. Available methods are specific for each filter\n     *\n     * @param method Name of the method\n     * @param params Parameters of the method\n     */\n    Filter.prototype.execMethod = function (method, params) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var _a;\n            logger.info('Executing filter method to stream ' + _this.stream.streamId);\n            var finalParams;\n            var successExecMethod = function (triggerEvent) {\n                logger.info('Filter method successfully executed on Stream ' + _this.stream.streamId);\n                var oldValue = Object.assign({}, _this.stream.filter);\n                _this.stream.filter.lastExecMethod = { method: method, params: finalParams };\n                if (triggerEvent) {\n                    _this.stream.session.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.session, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')\n                    ]);\n                    _this.stream.streamManager.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.stream.streamManager, _this.stream, 'filter', _this.stream.filter, oldValue, 'execFilterMethod')\n                    ]);\n                }\n                return resolve();\n            };\n            if (_this.type.startsWith('VB:')) {\n                if (typeof params === 'string') {\n                    try {\n                        params = JSON.parse(params);\n                    }\n                    catch (error) {\n                        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Wrong params syntax: ' + error));\n                    }\n                }\n                finalParams = params;\n                if (method === 'update') {\n                    if (!((_a = _this.stream.virtualBackgroundSinkElements) === null || _a === void 0 ? void 0 : _a.VB)) {\n                        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'There is no Virtual Background filter applied'));\n                    }\n                    else {\n                        _this.stream.virtualBackgroundSinkElements.VB.updateValues(params)\n                            .then(function () { return successExecMethod(false); })\n                            .catch(function (error) {\n                            if (error.name === OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR) {\n                                return reject(new OpenViduError_1.OpenViduError(error.name, error.message));\n                            }\n                            else {\n                                return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Error updating values on Virtual Background filter: ' + error));\n                            }\n                        });\n                    }\n                }\n                else {\n                    return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, \"Unknown Virtual Background method \\\"\".concat(method, \"\\\"\")));\n                }\n            }\n            else {\n                var stringParams = void 0;\n                if (typeof params !== 'string') {\n                    try {\n                        stringParams = JSON.stringify(params);\n                    }\n                    catch (error) {\n                        var errorMsg = \"'params' property must be a JSON formatted object\";\n                        logger.error(errorMsg);\n                        return reject(errorMsg);\n                    }\n                }\n                else {\n                    stringParams = params;\n                }\n                finalParams = stringParams;\n                _this.stream.session.openvidu.sendRequest('execFilterMethod', { streamId: _this.stream.streamId, method: method, params: stringParams }, function (error, response) {\n                    if (error) {\n                        logger.error('Error executing filter method for Stream ' + _this.stream.streamId, error);\n                        if (error.code === 401) {\n                            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to execute a filter method\"));\n                        }\n                        else {\n                            return reject(error);\n                        }\n                    }\n                    else {\n                        return successExecMethod(true);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Subscribe to certain filter event. Available events are specific for each filter\n     *\n     * @param eventType Event to which subscribe to.\n     * @param handler Function to execute upon event dispatched. It receives as parameter a {@link FilterEvent} object\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully attached to the filter and rejected with an Error object if not\n     */\n    Filter.prototype.addEventListener = function (eventType, handler) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.info('Adding filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n            _this.stream.session.openvidu.sendRequest('addFilterEventListener', { streamId: _this.stream.streamId, eventType: eventType }, function (error, response) {\n                if (error) {\n                    logger.error('Error adding filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n                    if (error.code === 401) {\n                        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n                    }\n                    else {\n                        return reject(error);\n                    }\n                }\n                else {\n                    _this.handlers.set(eventType, handler);\n                    logger.info('Filter event listener to event ' + eventType + ' successfully applied on Stream ' + _this.stream.streamId);\n                    return resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Removes certain filter event listener previously set.\n     *\n     * @param eventType Event to unsubscribe from.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the event listener was successfully removed from the filter and rejected with an Error object in other case\n     */\n    Filter.prototype.removeEventListener = function (eventType) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.info('Removing filter event listener to event ' + eventType + ' to stream ' + _this.stream.streamId);\n            _this.stream.session.openvidu.sendRequest('removeFilterEventListener', { streamId: _this.stream.streamId, eventType: eventType }, function (error, response) {\n                if (error) {\n                    logger.error('Error removing filter event listener to event ' + eventType + 'for Stream ' + _this.stream.streamId, error);\n                    if (error.code === 401) {\n                        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to add a filter event listener\"));\n                    }\n                    else {\n                        return reject(error);\n                    }\n                }\n                else {\n                    _this.handlers.delete(eventType);\n                    logger.info('Filter event listener to event ' + eventType + ' successfully removed on Stream ' + _this.stream.streamId);\n                    return resolve();\n                }\n            });\n        });\n    };\n    return Filter;\n}());\nexports.Filter = Filter;\n//# sourceMappingURL=Filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/LocalRecorder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/LocalRecorder.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocalRecorder = void 0;\nvar LocalRecorderState_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/LocalRecorderState */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/LocalRecorderState.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../OpenViduInternal/Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\nvar Mime = __webpack_require__(/*! mime/lite */ \"(ssr)/./node_modules/mime/lite.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Easy recording of {@link Stream} objects straightaway from the browser. Initialized with {@link OpenVidu.initLocalRecorder} method\n */\nvar LocalRecorder = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function LocalRecorder(stream) {\n        this.stream = stream;\n        this.chunks = [];\n        platform = Platform_1.PlatformUtils.getInstance();\n        this.connectionId = !!this.stream.connection ? this.stream.connection.connectionId : 'default-connection';\n        this.id = this.stream.streamId + '_' + this.connectionId + '_localrecord';\n        this.state = LocalRecorderState_1.LocalRecorderState.READY;\n    }\n    /**\n     * Starts the recording of the Stream. {@link state} property must be `READY`. After method succeeds is set to `RECORDING`\n     *\n     * @param options The [MediaRecorder.options](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#parameters) to be used to record this Stream.\n     * For example:\n     *\n     * ```javascript\n     * var OV = new OpenVidu();\n     * var publisher = await OV.initPublisherAsync();\n     * var localRecorder = OV.initLocalRecorder(publisher.stream);\n     * var options = {\n     *      mimeType: 'video/webm;codecs=vp8',\n     *      audioBitsPerSecond:128000,\n     *      videoBitsPerSecond:2500000\n     * };\n     * localRecorder.record(options);\n     * ```\n     *\n     * If not specified, the default options preferred by the platform will be used.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the recording successfully started and rejected with an Error object if not\n     */\n    LocalRecorder.prototype.record = function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                if (typeof options === 'string' || options instanceof String) {\n                    return reject(\"When calling LocalRecorder.record(options) parameter 'options' cannot be a string. Must be an object like { mimeType: \\\"\".concat(options, \"\\\" }\"));\n                }\n                if (typeof MediaRecorder === 'undefined') {\n                    logger.error('MediaRecorder not supported on your device. See compatibility in https://caniuse.com/#search=MediaRecorder');\n                    throw Error('MediaRecorder not supported on your device. See compatibility in https://caniuse.com/#search=MediaRecorder');\n                }\n                if (_this.state !== LocalRecorderState_1.LocalRecorderState.READY) {\n                    throw Error(\"'LocalRecord.record()' needs 'LocalRecord.state' to be 'READY' (current value: '\" +\n                        _this.state +\n                        \"'). Call 'LocalRecorder.clean()' or init a new LocalRecorder before\");\n                }\n                logger.log(\"Starting local recording of stream '\" + _this.stream.streamId + \"' of connection '\" + _this.connectionId + \"'\");\n                if (!options) {\n                    options = { mimeType: 'video/webm' };\n                }\n                else if (!options.mimeType) {\n                    options.mimeType = 'video/webm';\n                }\n                _this.mediaRecorder = new MediaRecorder(_this.stream.getMediaStream(), options);\n                _this.mediaRecorder.start();\n            }\n            catch (err) {\n                return reject(err);\n            }\n            _this.mediaRecorder.ondataavailable = function (e) {\n                if (e.data.size > 0) {\n                    _this.chunks.push(e.data);\n                }\n            };\n            _this.mediaRecorder.onerror = function (e) {\n                logger.error('MediaRecorder error: ', e);\n            };\n            _this.mediaRecorder.onstart = function () {\n                logger.log('MediaRecorder started (state=' + _this.mediaRecorder.state + ')');\n            };\n            _this.mediaRecorder.onstop = function () {\n                _this.onStopDefault();\n            };\n            _this.mediaRecorder.onpause = function () {\n                logger.log('MediaRecorder paused (state=' + _this.mediaRecorder.state + ')');\n            };\n            _this.mediaRecorder.onresume = function () {\n                logger.log('MediaRecorder resumed (state=' + _this.mediaRecorder.state + ')');\n            };\n            _this.state = LocalRecorderState_1.LocalRecorderState.RECORDING;\n            return resolve();\n        });\n    };\n    /**\n     * Ends the recording of the Stream. {@link state} property must be `RECORDING` or `PAUSED`. After method succeeds is set to `FINISHED`\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the recording successfully stopped and rejected with an Error object if not\n     */\n    LocalRecorder.prototype.stop = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                if (_this.state === LocalRecorderState_1.LocalRecorderState.READY || _this.state === LocalRecorderState_1.LocalRecorderState.FINISHED) {\n                    throw Error(\"'LocalRecord.stop()' needs 'LocalRecord.state' to be 'RECORDING' or 'PAUSED' (current value: '\" +\n                        _this.state +\n                        \"'). Call 'LocalRecorder.start()' before\");\n                }\n                _this.mediaRecorder.onstop = function () {\n                    _this.onStopDefault();\n                    return resolve();\n                };\n                _this.mediaRecorder.stop();\n            }\n            catch (e) {\n                return reject(e);\n            }\n        });\n    };\n    /**\n     * Pauses the recording of the Stream. {@link state} property must be `RECORDING`. After method succeeds is set to `PAUSED`\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the recording was successfully paused and rejected with an Error object if not\n     */\n    LocalRecorder.prototype.pause = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                if (_this.state !== LocalRecorderState_1.LocalRecorderState.RECORDING) {\n                    return reject(Error(\"'LocalRecord.pause()' needs 'LocalRecord.state' to be 'RECORDING' (current value: '\" +\n                        _this.state +\n                        \"'). Call 'LocalRecorder.start()' or 'LocalRecorder.resume()' before\"));\n                }\n                _this.mediaRecorder.pause();\n                _this.state = LocalRecorderState_1.LocalRecorderState.PAUSED;\n                return resolve();\n            }\n            catch (error) {\n                return reject(error);\n            }\n        });\n    };\n    /**\n     * Resumes the recording of the Stream. {@link state} property must be `PAUSED`. After method succeeds is set to `RECORDING`\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the recording was successfully resumed and rejected with an Error object if not\n     */\n    LocalRecorder.prototype.resume = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                if (_this.state !== LocalRecorderState_1.LocalRecorderState.PAUSED) {\n                    throw Error(\"'LocalRecord.resume()' needs 'LocalRecord.state' to be 'PAUSED' (current value: '\" +\n                        _this.state +\n                        \"'). Call 'LocalRecorder.pause()' before\");\n                }\n                _this.mediaRecorder.resume();\n                _this.state = LocalRecorderState_1.LocalRecorderState.RECORDING;\n                return resolve();\n            }\n            catch (error) {\n                return reject(error);\n            }\n        });\n    };\n    /**\n     * Previews the recording, appending a new HTMLVideoElement to element with id `parentId`. {@link state} property must be `FINISHED`\n     */\n    LocalRecorder.prototype.preview = function (parentElement) {\n        if (this.state !== LocalRecorderState_1.LocalRecorderState.FINISHED) {\n            throw Error(\"'LocalRecord.preview()' needs 'LocalRecord.state' to be 'FINISHED' (current value: '\" +\n                this.state +\n                \"'). Call 'LocalRecorder.stop()' before\");\n        }\n        this.videoPreview = document.createElement('video');\n        this.videoPreview.id = this.id;\n        this.videoPreview.autoplay = true;\n        if (platform.isSafariBrowser()) {\n            this.videoPreview.playsInline = true;\n        }\n        if (typeof parentElement === 'string') {\n            var parentElementDom = document.getElementById(parentElement);\n            if (parentElementDom) {\n                this.videoPreview = parentElementDom.appendChild(this.videoPreview);\n            }\n        }\n        else {\n            this.videoPreview = parentElement.appendChild(this.videoPreview);\n        }\n        this.videoPreview.src = this.videoPreviewSrc;\n        return this.videoPreview;\n    };\n    /**\n     * Gracefully stops and cleans the current recording (WARNING: it is completely dismissed). Sets {@link state} to `READY` so the recording can start again\n     */\n    LocalRecorder.prototype.clean = function () {\n        var _this = this;\n        var f = function () {\n            delete _this.blob;\n            _this.chunks = [];\n            _this.state = LocalRecorderState_1.LocalRecorderState.READY;\n        };\n        if (this.state === LocalRecorderState_1.LocalRecorderState.RECORDING || this.state === LocalRecorderState_1.LocalRecorderState.PAUSED) {\n            this.stop()\n                .then(function () { return f(); })\n                .catch(function () { return f(); });\n        }\n        else {\n            f();\n        }\n    };\n    /**\n     * Downloads the recorded video through the browser. {@link state} property must be `FINISHED`\n     */\n    LocalRecorder.prototype.download = function () {\n        if (this.state !== LocalRecorderState_1.LocalRecorderState.FINISHED) {\n            throw Error(\"'LocalRecord.download()' needs 'LocalRecord.state' to be 'FINISHED' (current value: '\" +\n                this.state +\n                \"'). Call 'LocalRecorder.stop()' before\");\n        }\n        else {\n            var a = document.createElement('a');\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            var url = globalThis.URL.createObjectURL(this.blob);\n            a.href = url;\n            a.download = this.id + '.' + Mime.getExtension(this.blob.type);\n            a.click();\n            globalThis.URL.revokeObjectURL(url);\n            document.body.removeChild(a);\n        }\n    };\n    /**\n     * Gets the raw Blob file. Methods preview, download, uploadAsBinary and uploadAsMultipartfile use this same file to perform their specific actions. {@link state} property must be `FINISHED`\n     */\n    LocalRecorder.prototype.getBlob = function () {\n        if (this.state !== LocalRecorderState_1.LocalRecorderState.FINISHED) {\n            throw Error(\"Call 'LocalRecord.stop()' before getting Blob file\");\n        }\n        else {\n            return this.blob;\n        }\n    };\n    /**\n     * Uploads the recorded video as a binary file performing an HTTP/POST operation to URL `endpoint`. {@link state} property must be `FINISHED`. Optional HTTP headers can be passed as second parameter. For example:\n     * ```\n     * var headers = {\n     *  \"Cookie\": \"$Version=1; Skin=new;\",\n     *  \"Authorization\":\"Basic QWxhZGpbjpuIHNlctZQ==\"\n     * }\n     * ```\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved with the `http.responseText` from server if the operation was successful and rejected with the failed `http.status` if not\n     */\n    LocalRecorder.prototype.uploadAsBinary = function (endpoint, headers) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.state !== LocalRecorderState_1.LocalRecorderState.FINISHED) {\n                return reject(Error(\"'LocalRecord.uploadAsBinary()' needs 'LocalRecord.state' to be 'FINISHED' (current value: '\" +\n                    _this.state +\n                    \"'). Call 'LocalRecorder.stop()' before\"));\n            }\n            else {\n                var http_1 = new XMLHttpRequest();\n                http_1.open('POST', endpoint, true);\n                if (typeof headers === 'object') {\n                    for (var _i = 0, _a = Object.keys(headers); _i < _a.length; _i++) {\n                        var key = _a[_i];\n                        http_1.setRequestHeader(key, headers[key]);\n                    }\n                }\n                http_1.onreadystatechange = function () {\n                    if (http_1.readyState === 4) {\n                        if (http_1.status.toString().charAt(0) === '2') {\n                            // Success response from server (HTTP status standard: 2XX is success)\n                            return resolve(http_1.responseText);\n                        }\n                        else {\n                            return reject(http_1.status);\n                        }\n                    }\n                };\n                http_1.send(_this.blob);\n            }\n        });\n    };\n    /**\n     * Uploads the recorded video as a multipart file performing an HTTP/POST operation to URL `endpoint`. {@link state} property must be `FINISHED`. Optional HTTP headers can be passed as second parameter. For example:\n     * ```\n     * var headers = {\n     *  \"Cookie\": \"$Version=1; Skin=new;\",\n     *  \"Authorization\":\"Basic QWxhZGpbjpuIHNlctZQ==\"\n     * }\n     * ```\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved with the `http.responseText` from server if the operation was successful and rejected with the failed `http.status` if not:\n     */\n    LocalRecorder.prototype.uploadAsMultipartfile = function (endpoint, headers) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.state !== LocalRecorderState_1.LocalRecorderState.FINISHED) {\n                return reject(Error(\"'LocalRecord.uploadAsMultipartfile()' needs 'LocalRecord.state' to be 'FINISHED' (current value: '\" +\n                    _this.state +\n                    \"'). Call 'LocalRecorder.stop()' before\"));\n            }\n            else {\n                var http_2 = new XMLHttpRequest();\n                http_2.open('POST', endpoint, true);\n                if (typeof headers === 'object') {\n                    for (var _i = 0, _a = Object.keys(headers); _i < _a.length; _i++) {\n                        var key = _a[_i];\n                        http_2.setRequestHeader(key, headers[key]);\n                    }\n                }\n                var sendable = new FormData();\n                sendable.append('file', _this.blob, _this.id + '.' + Mime.getExtension(_this.blob.type));\n                http_2.onreadystatechange = function () {\n                    if (http_2.readyState === 4) {\n                        if (http_2.status.toString().charAt(0) === '2') {\n                            // Success response from server (HTTP status standard: 2XX is success)\n                            return resolve(http_2.responseText);\n                        }\n                        else {\n                            return reject(http_2.status);\n                        }\n                    }\n                };\n                http_2.send(sendable);\n            }\n        });\n    };\n    /* Private methods */\n    LocalRecorder.prototype.onStopDefault = function () {\n        logger.log('MediaRecorder stopped  (state=' + this.mediaRecorder.state + ')');\n        this.blob = new Blob(this.chunks, { type: this.mediaRecorder.mimeType });\n        this.chunks = [];\n        this.videoPreviewSrc = globalThis.URL.createObjectURL(this.blob);\n        this.state = LocalRecorderState_1.LocalRecorderState.FINISHED;\n    };\n    return LocalRecorder;\n}());\nexports.LocalRecorder = LocalRecorder;\n//# sourceMappingURL=LocalRecorder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/LocalRecorder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/OpenVidu.js":
/*!****************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/OpenVidu.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenVidu = void 0;\nvar LocalRecorder_1 = __webpack_require__(/*! ./LocalRecorder */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/LocalRecorder.js\");\nvar Publisher_1 = __webpack_require__(/*! ./Publisher */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Publisher.js\");\nvar Session_1 = __webpack_require__(/*! ./Session */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Session.js\");\nvar SessionDisconnectedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/SessionDisconnectedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SessionDisconnectedEvent.js\");\nvar StreamPropertyChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\");\nvar OpenViduError_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/OpenViduError */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\");\nvar VideoInsertMode_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/VideoInsertMode */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../OpenViduInternal/Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\nvar screenSharingAuto = __webpack_require__(/*! ../OpenViduInternal/ScreenSharing/Screen-Capturing-Auto */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing-Auto.js\");\nvar screenSharing = __webpack_require__(/*! ../OpenViduInternal/ScreenSharing/Screen-Capturing */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/ScreenSharing/Screen-Capturing.js\");\nvar OpenViduLoggerConfiguration_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLoggerConfiguration */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLoggerConfiguration.js\");\n/**\n * @hidden\n */\nvar EventEmitter = __webpack_require__(/*! wolfy87-eventemitter */ \"(ssr)/./node_modules/wolfy87-eventemitter/EventEmitter.js\");\n/**\n * @hidden\n */\nvar RpcBuilder = __webpack_require__(/*! ../OpenViduInternal/KurentoUtils/kurento-jsonrpc */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/KurentoUtils/kurento-jsonrpc/index.js\");\n/**\n * @hidden\n */\nvar packageJson = __webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/openvidu-browser/package.json\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Entrypoint of OpenVidu Browser library.\n * Use it to initialize objects of type {@link Session}, {@link Publisher} and {@link LocalRecorder}\n */\nvar OpenVidu = /** @class */ (function () {\n    function OpenVidu() {\n        var _this = this;\n        this.masterNodeHasCrashed = false;\n        /**\n         * @hidden\n         */\n        this.publishers = [];\n        /**\n         * @hidden\n         */\n        this.secret = '';\n        /**\n         * @hidden\n         */\n        this.recorder = false;\n        /**\n         * @hidden\n         */\n        this.stt = false;\n        /**\n         * @hidden\n         */\n        this.life = -1;\n        /**\n         * @hidden\n         */\n        this.advancedConfiguration = {};\n        /**\n         * @hidden\n         */\n        this.webrtcStatsInterval = -1;\n        /**\n         * @hidden\n         */\n        this.sendBrowserLogs = OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.disabled;\n        /**\n         * @hidden\n         */\n        this.isAtLeastPro = false;\n        /**\n         * @hidden\n         */\n        this.isEnterprise = false;\n        /**\n         * @hidden\n         */\n        this.ee = new EventEmitter();\n        platform = Platform_1.PlatformUtils.getInstance();\n        this.libraryVersion = packageJson.version;\n        logger.info('OpenVidu initialized');\n        logger.info('Platform detected: ' + platform.getDescription());\n        logger.info('openvidu-browser version: ' + this.libraryVersion);\n        if (platform.isMobileDevice() || platform.isReactNative()) {\n            // Listen to orientationchange only on mobile devices\n            this.onOrientationChanged(function () {\n                _this.publishers.forEach(function (publisher) {\n                    if (publisher.stream.isLocalStreamPublished && !!publisher.stream && !!publisher.stream.hasVideo) {\n                        _this.sendNewVideoDimensionsIfRequired(publisher, 'deviceRotated', 75, 10);\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * Returns new session\n     */\n    OpenVidu.prototype.initSession = function () {\n        this.session = new Session_1.Session(this);\n        return this.session;\n    };\n    /**\n     * Returns a new publisher\n     *\n     * #### Events dispatched\n     *\n     * The {@link Publisher} object will dispatch an `accessDialogOpened` event, only if the pop-up shown by the browser to request permissions for the camera is opened. You can use this event to alert the user about granting permissions\n     * for your website. An `accessDialogClosed` event will also be dispatched after user clicks on \"Allow\" or \"Block\" in the pop-up.\n     *\n     * The {@link Publisher} object will dispatch an `accessAllowed` or `accessDenied` event once it has been granted access to the requested input devices or not.\n     *\n     * The {@link Publisher} object will dispatch a `videoElementCreated` event once a HTML video element has been added to DOM (only if you\n     * [let OpenVidu take care of the video players](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)). See {@link VideoElementEvent} to learn more.\n     *\n     * The {@link Publisher} object will dispatch a `streamPlaying` event once the local streams starts playing. See {@link StreamManagerEvent} to learn more.\n     *\n     * @param targetElement  HTML DOM element (or its `id` attribute) in which the video element of the Publisher will be inserted (see {@link PublisherProperties.insertMode}). If *null* or *undefined* no default video will be created for this Publisher.\n     * You can always call method {@link Publisher.addVideoElement} or {@link Publisher.createVideoElement} to manage the video elements on your own (see [Manage video players](/en/stable/cheatsheet/manage-videos) section)\n     * @param completionHandler `error` parameter is null if `initPublisher` succeeds, and is defined if it fails.\n     *                          `completionHandler` function is called before the Publisher dispatches an `accessAllowed` or an `accessDenied` event\n     */\n    OpenVidu.prototype.initPublisher = function (targetElement, param2, param3) {\n        var properties;\n        if (!!param2 && typeof param2 !== 'function') {\n            // Matches 'initPublisher(targetElement, properties)' or 'initPublisher(targetElement, properties, completionHandler)'\n            properties = param2;\n            properties = {\n                audioSource: typeof properties.audioSource !== 'undefined' ? properties.audioSource : undefined,\n                frameRate: typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack\n                    ? undefined\n                    : typeof properties.frameRate !== 'undefined'\n                        ? properties.frameRate\n                        : undefined,\n                insertMode: typeof properties.insertMode !== 'undefined'\n                    ? typeof properties.insertMode === 'string'\n                        ? VideoInsertMode_1.VideoInsertMode[properties.insertMode]\n                        : properties.insertMode\n                    : VideoInsertMode_1.VideoInsertMode.APPEND,\n                mirror: typeof properties.mirror !== 'undefined' ? properties.mirror : true,\n                publishAudio: typeof properties.publishAudio !== 'undefined' ? properties.publishAudio : true,\n                publishVideo: typeof properties.publishVideo !== 'undefined' ? properties.publishVideo : true,\n                resolution: typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack\n                    ? undefined\n                    : typeof properties.resolution !== 'undefined'\n                        ? properties.resolution\n                        : '640x480',\n                videoSource: typeof properties.videoSource !== 'undefined' ? properties.videoSource : undefined,\n                videoSimulcast: properties.videoSimulcast,\n                filter: properties.filter\n            };\n        }\n        else {\n            // Matches 'initPublisher(targetElement)' or 'initPublisher(targetElement, completionHandler)'\n            properties = {\n                insertMode: VideoInsertMode_1.VideoInsertMode.APPEND,\n                mirror: true,\n                publishAudio: true,\n                publishVideo: true,\n                resolution: '640x480'\n            };\n        }\n        var publisher = new Publisher_1.Publisher(targetElement, properties, this);\n        var completionHandler;\n        if (!!param2 && typeof param2 === 'function') {\n            completionHandler = param2;\n        }\n        else if (!!param3) {\n            completionHandler = param3;\n        }\n        publisher\n            .initialize()\n            .then(function () {\n            if (completionHandler !== undefined) {\n                completionHandler(undefined);\n            }\n            publisher.emitEvent('accessAllowed', []);\n        })\n            .catch(function (error) {\n            if (completionHandler !== undefined) {\n                completionHandler(error);\n            }\n            publisher.emitEvent('accessDenied', [error]);\n        });\n        this.publishers.push(publisher);\n        return publisher;\n    };\n    OpenVidu.prototype.initPublisherAsync = function (targetElement, properties) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var publisher;\n            var callback = function (error) {\n                if (!!error) {\n                    return reject(error);\n                }\n                else {\n                    return resolve(publisher);\n                }\n            };\n            if (!!properties) {\n                publisher = _this.initPublisher(targetElement, properties, callback);\n            }\n            else {\n                publisher = _this.initPublisher(targetElement, callback);\n            }\n        });\n    };\n    /**\n     * Returns a new local recorder for recording streams straight away from the browser\n     * @param stream  Stream to record\n     */\n    OpenVidu.prototype.initLocalRecorder = function (stream) {\n        return new LocalRecorder_1.LocalRecorder(stream);\n    };\n    /**\n     * Checks if the browser supports OpenVidu\n     * @returns 1 if the browser supports OpenVidu, 0 otherwise\n     */\n    OpenVidu.prototype.checkSystemRequirements = function () {\n        // Specific iOS platform support (iPhone, iPad)\n        if (platform.isIPhoneOrIPad()) {\n            return (platform.isIOSWithSafari() ||\n                platform.isChromeMobileBrowser() ||\n                platform.isFirefoxMobileBrowser() ||\n                platform.isOperaMobileBrowser() ||\n                platform.isEdgeMobileBrowser() ||\n                platform.isIonicIos() // Ionic apps for iOS\n            );\n        }\n        // General platform support for web clients (Desktop, Mobile)\n        return (platform.isChromeBrowser() ||\n            platform.isChromeMobileBrowser() ||\n            platform.isFirefoxBrowser() ||\n            platform.isFirefoxMobileBrowser() ||\n            platform.isOperaBrowser() ||\n            platform.isOperaMobileBrowser() ||\n            platform.isEdgeBrowser() ||\n            platform.isEdgeMobileBrowser() ||\n            platform.isSamsungBrowser() ||\n            platform.isSafariBrowser() ||\n            platform.isAndroidBrowser() || // Android WebView & Ionic apps for Android\n            platform.isElectron() ||\n            platform.isNodeJs() ||\n            // TODO: remove when updating platform detection library\n            platform.isMotorolaEdgeDevice());\n    };\n    /**\n     * Checks if the browser supports screen-sharing. Desktop Chrome, Firefox and Opera support screen-sharing\n     * @returns 1 if the browser supports screen-sharing, 0 otherwise\n     */\n    OpenVidu.prototype.checkScreenSharingCapabilities = function () {\n        return platform.canScreenShare();\n    };\n    /**\n     * Collects information about the media input devices available on the system. You can pass property `deviceId` of a {@link Device} object as value of `audioSource` or `videoSource` properties in {@link initPublisher} method\n     */\n    OpenVidu.prototype.getDevices = function () {\n        return new Promise(function (resolve, reject) {\n            navigator.mediaDevices\n                .enumerateDevices()\n                .then(function (deviceInfos) {\n                var _a;\n                var devices = [];\n                // Ionic Android  devices\n                if (platform.isIonicAndroid() && typeof cordova != 'undefined' && ((_a = cordova === null || cordova === void 0 ? void 0 : cordova.plugins) === null || _a === void 0 ? void 0 : _a.EnumerateDevicesPlugin)) {\n                    cordova.plugins.EnumerateDevicesPlugin.getEnumerateDevices().then(function (pluginDevices) {\n                        var pluginAudioDevices = [];\n                        var videoDevices = [];\n                        var audioDevices = [];\n                        pluginAudioDevices = pluginDevices.filter(function (device) { return device.kind === 'audioinput'; });\n                        videoDevices = deviceInfos.filter(function (device) { return device.kind === 'videoinput'; });\n                        audioDevices = deviceInfos.filter(function (device) { return device.kind === 'audioinput'; });\n                        videoDevices.forEach(function (deviceInfo, index) {\n                            if (!deviceInfo.label) {\n                                var label = '';\n                                if (index === 0) {\n                                    label = 'Front Camera';\n                                }\n                                else if (index === 1) {\n                                    label = 'Back Camera';\n                                }\n                                else {\n                                    label = 'Unknown Camera';\n                                }\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: label\n                                });\n                            }\n                            else {\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: deviceInfo.label\n                                });\n                            }\n                        });\n                        audioDevices.forEach(function (deviceInfo, index) {\n                            if (!deviceInfo.label) {\n                                var label = '';\n                                switch (index) {\n                                    case 0: // Default Microphone\n                                        label = 'Default';\n                                        break;\n                                    case 1: // Microphone + Speakerphone\n                                        var defaultMatch = pluginAudioDevices.filter(function (d) { return d.label.includes('Built'); })[0];\n                                        label = defaultMatch ? defaultMatch.label : 'Built-in Microphone';\n                                        break;\n                                    case 2: // Headset Microphone\n                                        var wiredMatch = pluginAudioDevices.filter(function (d) { return d.label.includes('Wired'); })[0];\n                                        if (wiredMatch) {\n                                            label = wiredMatch.label;\n                                        }\n                                        else {\n                                            label = 'Headset earpiece';\n                                        }\n                                        break;\n                                    case 3:\n                                        var wirelessMatch = pluginAudioDevices.filter(function (d) { return d.label.includes('Bluetooth'); })[0];\n                                        label = wirelessMatch ? wirelessMatch.label : 'Wireless';\n                                        break;\n                                    default:\n                                        label = 'Unknown Microphone';\n                                        break;\n                                }\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: label\n                                });\n                            }\n                            else {\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: deviceInfo.label\n                                });\n                            }\n                        });\n                        return resolve(devices);\n                    });\n                }\n                else {\n                    // Rest of platforms\n                    deviceInfos.forEach(function (deviceInfo) {\n                        if (deviceInfo.kind === 'audioinput' || deviceInfo.kind === 'videoinput') {\n                            devices.push({\n                                kind: deviceInfo.kind,\n                                deviceId: deviceInfo.deviceId,\n                                label: deviceInfo.label\n                            });\n                        }\n                    });\n                    return resolve(devices);\n                }\n            })\n                .catch(function (error) {\n                logger.error('Error getting devices', error);\n                return reject(error);\n            });\n        });\n    };\n    /**\n     * Get a MediaStream object that you can customize before calling {@link initPublisher} (pass _MediaStreamTrack_ property of the _MediaStream_ value resolved by the Promise as `audioSource` or `videoSource` properties in {@link initPublisher})\n     *\n     * Parameter `options` is the same as in {@link initPublisher} second parameter (of type {@link PublisherProperties}), but only the following properties will be applied: `audioSource`, `videoSource`, `frameRate`, `resolution`\n     *\n     * To customize the Publisher's video, the API for HTMLCanvasElement is very useful. For example, to get a black-and-white video at 10 fps and HD resolution with no sound:\n     * ```\n     * var OV = new OpenVidu();\n     * var FRAME_RATE = 10;\n     *\n     * OV.getUserMedia({\n     *    audioSource: false,\n     *    videoSource: undefined,\n     *    resolution: '1280x720',\n     *    frameRate: FRAME_RATE\n     * })\n     * .then(mediaStream => {\n     *\n     *    var videoTrack = mediaStream.getVideoTracks()[0];\n     *    var video = document.createElement('video');\n     *    video.srcObject = new MediaStream([videoTrack]);\n     *\n     *    var canvas = document.createElement('canvas');\n     *    var ctx = canvas.getContext('2d');\n     *    ctx.filter = 'grayscale(100%)';\n     *\n     *    video.addEventListener('play', () => {\n     *      var loop = () => {\n     *        if (!video.paused && !video.ended) {\n     *          ctx.drawImage(video, 0, 0, 300, 170);\n     *          setTimeout(loop, 1000/ FRAME_RATE); // Drawing at 10 fps\n     *        }\n     *      };\n     *      loop();\n     *    });\n     *    video.play();\n     *\n     *    var grayVideoTrack = canvas.captureStream(FRAME_RATE).getVideoTracks()[0];\n     *    var publisher = this.OV.initPublisher(\n     *      myHtmlTarget,\n     *      {\n     *        audioSource: false,\n     *        videoSource: grayVideoTrack\n     *      });\n     * });\n     * ```\n     */\n    OpenVidu.prototype.getUserMedia = function (options) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var askForAudioStreamOnly, myConstraints, mustAskForAudioTrackLater, mediaStream, error_1, errorName, errorMessage, constraintsAux, mediaStream, error_2, errorName, errorMessage, error_3;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        askForAudioStreamOnly = function (previousMediaStream, constraints) { return __awaiter(_this, void 0, void 0, function () {\n                            var definedAudioConstraint, constraintsAux, audioOnlyStream, error_4;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        definedAudioConstraint = constraints.audio === undefined ? true : constraints.audio;\n                                        constraintsAux = { audio: definedAudioConstraint, video: false };\n                                        _a.label = 1;\n                                    case 1:\n                                        _a.trys.push([1, 3, , 4]);\n                                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraintsAux)];\n                                    case 2:\n                                        audioOnlyStream = _a.sent();\n                                        previousMediaStream.addTrack(audioOnlyStream.getAudioTracks()[0]);\n                                        return [2 /*return*/, previousMediaStream];\n                                    case 3:\n                                        error_4 = _a.sent();\n                                        previousMediaStream.getAudioTracks().forEach(function (track) {\n                                            track.stop();\n                                        });\n                                        previousMediaStream.getVideoTracks().forEach(function (track) {\n                                            track.stop();\n                                        });\n                                        throw this.generateAudioDeviceError(error_4, constraintsAux);\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 20, , 21]);\n                        return [4 /*yield*/, this.generateMediaConstraints(options)];\n                    case 2:\n                        myConstraints = _c.sent();\n                        if (!((!!myConstraints.videoTrack && !!myConstraints.audioTrack) ||\n                            (!!myConstraints.audioTrack && ((_a = myConstraints.constraints) === null || _a === void 0 ? void 0 : _a.video) === false) ||\n                            (!!myConstraints.videoTrack && ((_b = myConstraints.constraints) === null || _b === void 0 ? void 0 : _b.audio) === false))) return [3 /*break*/, 3];\n                        // No need to call getUserMedia at all. Both tracks provided, or only AUDIO track provided or only VIDEO track provided\n                        return [2 /*return*/, this.addAlreadyProvidedTracks(myConstraints, new MediaStream())];\n                    case 3:\n                        // getUserMedia must be called. AUDIO or VIDEO are requesting a new track\n                        // Delete already provided constraints for audio or video\n                        if (!!myConstraints.videoTrack) {\n                            delete myConstraints.constraints.video;\n                        }\n                        if (!!myConstraints.audioTrack) {\n                            delete myConstraints.constraints.audio;\n                        }\n                        mustAskForAudioTrackLater = false;\n                        if (!(typeof options.videoSource === 'string')) return [3 /*break*/, 12];\n                        if (!(options.videoSource === 'screen' ||\n                            options.videoSource === 'window' ||\n                            (platform.isElectron() && options.videoSource.startsWith('screen:')))) return [3 /*break*/, 12];\n                        // Video is screen sharing\n                        mustAskForAudioTrackLater =\n                            !myConstraints.audioTrack && options.audioSource !== null && options.audioSource !== false;\n                        if (!(navigator.mediaDevices['getDisplayMedia'] && !platform.isElectron())) return [3 /*break*/, 11];\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 9, , 10]);\n                        return [4 /*yield*/, navigator.mediaDevices['getDisplayMedia']({ video: true, audio: options.audioSource === 'screen' })];\n                    case 5:\n                        mediaStream = _c.sent();\n                        this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                        if (!mustAskForAudioTrackLater) return [3 /*break*/, 7];\n                        return [4 /*yield*/, askForAudioStreamOnly(mediaStream, myConstraints.constraints)];\n                    case 6: return [2 /*return*/, _c.sent()];\n                    case 7: return [2 /*return*/, mediaStream];\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        error_1 = _c.sent();\n                        errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                        errorMessage = error_1.toString();\n                        throw new OpenViduError_1.OpenViduError(errorName, errorMessage);\n                    case 10: return [3 /*break*/, 11];\n                    case 11: return [3 /*break*/, 12];\n                    case 12:\n                        constraintsAux = mustAskForAudioTrackLater\n                            ? { video: myConstraints.constraints.video }\n                            : myConstraints.constraints;\n                        _c.label = 13;\n                    case 13:\n                        _c.trys.push([13, 18, , 19]);\n                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraintsAux)];\n                    case 14:\n                        mediaStream = _c.sent();\n                        this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                        if (!mustAskForAudioTrackLater) return [3 /*break*/, 16];\n                        return [4 /*yield*/, askForAudioStreamOnly(mediaStream, myConstraints.constraints)];\n                    case 15: return [2 /*return*/, _c.sent()];\n                    case 16: return [2 /*return*/, mediaStream];\n                    case 17: return [3 /*break*/, 19];\n                    case 18:\n                        error_2 = _c.sent();\n                        errorName = void 0;\n                        errorMessage = error_2.toString();\n                        if (!(options.videoSource === 'screen')) {\n                            errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                        }\n                        else {\n                            errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                        }\n                        throw new OpenViduError_1.OpenViduError(errorName, errorMessage);\n                    case 19: return [3 /*break*/, 21];\n                    case 20:\n                        error_3 = _c.sent();\n                        throw error_3;\n                    case 21: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /* tslint:disable:no-empty */\n    /**\n     * Disable all logging except error level\n     */\n    OpenVidu.prototype.enableProdMode = function () {\n        logger.enableProdMode();\n    };\n    /* tslint:enable:no-empty */\n    /**\n     * Set OpenVidu advanced configuration options. `configuration` is an object of type {@link OpenViduAdvancedConfiguration}. Call this method to override previous values at any moment.\n     */\n    OpenVidu.prototype.setAdvancedConfiguration = function (configuration) {\n        this.advancedConfiguration = configuration;\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.onOrientationChanged = function (handler) {\n        globalThis.addEventListener('orientationchange', handler);\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.sendNewVideoDimensionsIfRequired = function (publisher, reason, WAIT_INTERVAL, MAX_ATTEMPTS) {\n        var _this = this;\n        var _a, _b, _c, _d;\n        var attempts = 0;\n        var oldWidth = ((_b = (_a = publisher === null || publisher === void 0 ? void 0 : publisher.stream) === null || _a === void 0 ? void 0 : _a.videoDimensions) === null || _b === void 0 ? void 0 : _b.width) || 0;\n        var oldHeight = ((_d = (_c = publisher === null || publisher === void 0 ? void 0 : publisher.stream) === null || _c === void 0 ? void 0 : _c.videoDimensions) === null || _d === void 0 ? void 0 : _d.height) || 0;\n        var repeatUntilChangeOrMaxAttempts = setInterval(function () {\n            attempts++;\n            if (attempts > MAX_ATTEMPTS) {\n                clearTimeout(repeatUntilChangeOrMaxAttempts);\n            }\n            publisher.getVideoDimensions().then(function (newDimensions) {\n                if (newDimensions.width !== oldWidth || newDimensions.height !== oldHeight) {\n                    clearTimeout(repeatUntilChangeOrMaxAttempts);\n                    _this.sendVideoDimensionsChangedEvent(publisher, reason, oldWidth, oldHeight, newDimensions.width, newDimensions.height);\n                }\n            });\n        }, WAIT_INTERVAL);\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.sendVideoDimensionsChangedEvent = function (publisher, reason, oldWidth, oldHeight, newWidth, newHeight) {\n        var _this = this;\n        publisher.stream.videoDimensions = {\n            width: newWidth || 0,\n            height: newHeight || 0\n        };\n        this.sendRequest('streamPropertyChanged', {\n            streamId: publisher.stream.streamId,\n            property: 'videoDimensions',\n            newValue: JSON.stringify(publisher.stream.videoDimensions),\n            reason: reason\n        }, function (error, response) {\n            if (error) {\n                logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n            }\n            else {\n                _this.session.emitEvent('streamPropertyChanged', [\n                    new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, { width: oldWidth, height: oldHeight }, reason)\n                ]);\n                publisher.emitEvent('streamPropertyChanged', [\n                    new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, { width: oldWidth, height: oldHeight }, reason)\n                ]);\n                _this.session.sendVideoData(publisher);\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.sendTrackChangedEvent = function (publisher, oldLabel, newLabel, propertyType) {\n        var _this = this;\n        var oldValue = { label: oldLabel };\n        var newValue = { label: newLabel };\n        var reason = 'trackReplaced';\n        if (publisher.stream.isLocalStreamPublished) {\n            this.sendRequest('streamPropertyChanged', {\n                streamId: publisher.stream.streamId,\n                property: propertyType,\n                newValue: newValue,\n                reason: reason\n            }, function (error, response) {\n                if (error) {\n                    logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n                }\n                else {\n                    _this.session.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, publisher.stream, propertyType, newValue, oldValue, reason)\n                    ]);\n                    publisher.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, propertyType, newValue, oldValue, reason)\n                    ]);\n                }\n            });\n        }\n        else {\n            this.session.emitEvent('streamPropertyChanged', [\n                new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(this.session, publisher.stream, propertyType, newValue, oldValue, reason)\n            ]);\n            publisher.emitEvent('streamPropertyChanged', [\n                new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, propertyType, newValue, oldValue, reason)\n            ]);\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.generateMediaConstraints = function (publisherProperties) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var myConstraints = {\n                audioTrack: undefined,\n                videoTrack: undefined,\n                constraints: {\n                    audio: undefined,\n                    video: undefined\n                }\n            };\n            var audioSource = publisherProperties.audioSource;\n            var videoSource = publisherProperties.videoSource;\n            // CASE 1: null/false\n            if (audioSource === null || audioSource === false) {\n                // No audio track\n                myConstraints.constraints.audio = false;\n            }\n            if (videoSource === null || videoSource === false) {\n                // No video track\n                myConstraints.constraints.video = false;\n            }\n            if (myConstraints.constraints.audio === false && myConstraints.constraints.video === false) {\n                // ERROR! audioSource and videoSource cannot be both false at the same time\n                return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.NO_INPUT_SOURCE_SET, \"Properties 'audioSource' and 'videoSource' cannot be set to false or null at the same time\"));\n            }\n            // CASE 2: MediaStreamTracks\n            if (typeof MediaStreamTrack !== 'undefined' && audioSource instanceof MediaStreamTrack) {\n                // Already provided audio track\n                myConstraints.audioTrack = audioSource;\n            }\n            if (typeof MediaStreamTrack !== 'undefined' && videoSource instanceof MediaStreamTrack) {\n                // Already provided video track\n                myConstraints.videoTrack = videoSource;\n            }\n            // CASE 3: Default tracks\n            if (audioSource === undefined) {\n                myConstraints.constraints.audio = true;\n            }\n            if (videoSource === undefined) {\n                myConstraints.constraints.video = {\n                    width: {\n                        ideal: 640\n                    },\n                    height: {\n                        ideal: 480\n                    }\n                };\n            }\n            // CASE 3.5: give values to resolution and frameRate if video not null/false\n            if (videoSource !== null && videoSource !== false) {\n                if (!!publisherProperties.resolution) {\n                    var widthAndHeight = publisherProperties.resolution.toLowerCase().split('x');\n                    var idealWidth = Number(widthAndHeight[0]);\n                    var idealHeight = Number(widthAndHeight[1]);\n                    myConstraints.constraints.video = {\n                        width: {\n                            ideal: idealWidth\n                        },\n                        height: {\n                            ideal: idealHeight\n                        }\n                    };\n                }\n                if (!!publisherProperties.frameRate) {\n                    myConstraints.constraints.video.frameRate = { ideal: publisherProperties.frameRate };\n                }\n            }\n            // CASE 4: deviceId or screen sharing\n            _this.configureDeviceIdOrScreensharing(myConstraints, publisherProperties, resolve, reject);\n            return resolve(myConstraints);\n        });\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.startWs = function (onConnectSucces) {\n        var config = {\n            heartbeat: 5000,\n            ws: {\n                uri: this.wsUri + '?sessionId=' + this.session.sessionId,\n                onconnected: onConnectSucces,\n                ondisconnect: this.disconnectCallback.bind(this),\n                onreconnecting: this.reconnectingCallback.bind(this),\n                onreconnected: this.reconnectedCallback.bind(this),\n                ismasternodecrashed: this.isMasterNodeCrashed.bind(this)\n            },\n            rpc: {\n                requestTimeout: 10000,\n                heartbeatRequestTimeout: 5000,\n                participantJoined: this.session.onParticipantJoined.bind(this.session),\n                participantPublished: this.session.onParticipantPublished.bind(this.session),\n                participantUnpublished: this.session.onParticipantUnpublished.bind(this.session),\n                participantLeft: this.session.onParticipantLeft.bind(this.session),\n                participantEvicted: this.session.onParticipantEvicted.bind(this.session),\n                recordingStarted: this.session.onRecordingStarted.bind(this.session),\n                recordingStopped: this.session.onRecordingStopped.bind(this.session),\n                broadcastStarted: this.session.onBroadcastStarted.bind(this.session),\n                broadcastStopped: this.session.onBroadcastStopped.bind(this.session),\n                sendMessage: this.session.onNewMessage.bind(this.session),\n                streamPropertyChanged: this.session.onStreamPropertyChanged.bind(this.session),\n                connectionPropertyChanged: this.session.onConnectionPropertyChanged.bind(this.session),\n                networkQualityLevelChanged: this.session.onNetworkQualityLevelChangedChanged.bind(this.session),\n                filterEventDispatched: this.session.onFilterEventDispatched.bind(this.session),\n                iceCandidate: this.session.recvIceCandidate.bind(this.session),\n                mediaError: this.session.onMediaError.bind(this.session),\n                masterNodeCrashedNotification: this.onMasterNodeCrashedNotification.bind(this),\n                forciblyReconnectSubscriber: this.session.onForciblyReconnectSubscriber.bind(this.session),\n                speechToTextMessage: this.session.onSpeechToTextMessage.bind(this.session),\n                speechToTextDisconnected: this.session.onSpeechToTextDisconnected.bind(this.session)\n            }\n        };\n        this.jsonRpcClient = new RpcBuilder.clients.JsonRpcClient(config);\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.onMasterNodeCrashedNotification = function (response) {\n        console.error('Master Node has crashed');\n        this.masterNodeHasCrashed = true;\n        this.session.onLostConnection('nodeCrashed');\n        this.jsonRpcClient.close(4103, 'Master Node has crashed');\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getWsReadyState = function () {\n        return this.jsonRpcClient.getReadyState();\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.closeWs = function () {\n        this.jsonRpcClient.close(4102, 'Connection closed by client');\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.sendRequest = function (method, params, callback) {\n        var _a;\n        if (params && params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        logger.debug('Sending request: {method:\"' + method + '\", params: ' + JSON.stringify(params) + '}');\n        (_a = this.jsonRpcClient) === null || _a === void 0 ? void 0 : _a.send(method, params, callback);\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getWsUri = function () {\n        return this.wsUri;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getSecret = function () {\n        return this.secret;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getRecorder = function () {\n        return this.recorder;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.getStt = function () {\n        return this.stt;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.generateAudioDeviceError = function (error, constraints) {\n        if (error.name === 'Error') {\n            // Safari OverConstrainedError has as name property 'Error' instead of 'OverConstrainedError'\n            error.name = error.constructor.name;\n        }\n        var errorName, errorMessage;\n        switch (error.name.toLowerCase()) {\n            case 'notfounderror':\n                errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                errorMessage = error.toString();\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            case 'notallowederror':\n                errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                errorMessage = error.toString();\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            case 'overconstrainederror':\n                if (error.constraint.toLowerCase() === 'deviceid') {\n                    errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                    errorMessage =\n                        \"Audio input device with deviceId '\" +\n                            constraints.audio.deviceId.exact +\n                            \"' not found\";\n                }\n                else {\n                    errorName = OpenViduError_1.OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n                    errorMessage = \"Audio input device doesn't support the value passed for constraint '\" + error.constraint + \"'\";\n                }\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            case 'notreadableerror':\n                errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ALREADY_IN_USE;\n                errorMessage = error.toString();\n                return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n            default:\n                return new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_GENERIC_ERROR, error.toString());\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.addAlreadyProvidedTracks = function (myConstraints, mediaStream, stream) {\n        if (!!myConstraints.videoTrack) {\n            mediaStream.addTrack(myConstraints.videoTrack);\n            if (!!stream) {\n                if (!!myConstraints.constraints.video) {\n                    stream.lastVideoTrackConstraints = myConstraints.constraints.video;\n                }\n                else {\n                    stream.lastVideoTrackConstraints = myConstraints.videoTrack.getConstraints();\n                }\n            }\n        }\n        if (!!myConstraints.audioTrack) {\n            mediaStream.addTrack(myConstraints.audioTrack);\n        }\n        return mediaStream;\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.configureDeviceIdOrScreensharing = function (myConstraints, publisherProperties, resolve, reject) {\n        var _this = this;\n        var audioSource = publisherProperties.audioSource;\n        var videoSource = publisherProperties.videoSource;\n        if (typeof audioSource === 'string' && audioSource !== 'screen') {\n            myConstraints.constraints.audio = { deviceId: { exact: audioSource } };\n        }\n        if (typeof videoSource === 'string') {\n            if (!this.isScreenShare(videoSource)) {\n                this.setVideoSource(myConstraints, videoSource);\n                if (audioSource === 'screen') {\n                    logger.warn('Parameter \"audioSource\" is set to \"screen\", which means rquesting audio from screen sharing source. But \"videoSource\" is not set to \"screen\". No audio source will be requested');\n                    myConstraints.constraints.audio = false;\n                }\n            }\n            else {\n                // Screen sharing\n                if (!this.checkScreenSharingCapabilities()) {\n                    var error = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_SHARING_NOT_SUPPORTED, 'You can only screen share in desktop Chrome, Firefox, Opera, Safari (>=13.0), Edge (>= 80) or Electron. Detected client: ' +\n                        platform.getName() +\n                        ' ' +\n                        platform.getVersion());\n                    logger.error(error);\n                    return reject(error);\n                }\n                else {\n                    if (platform.isElectron()) {\n                        var prefix = 'screen:';\n                        var videoSourceString = videoSource;\n                        var electronScreenId = videoSourceString.substr(videoSourceString.indexOf(prefix) + prefix.length);\n                        myConstraints.constraints.video = {\n                            mandatory: {\n                                chromeMediaSource: 'desktop',\n                                chromeMediaSourceId: electronScreenId\n                            }\n                        };\n                        return resolve(myConstraints);\n                    }\n                    else {\n                        if (!!this.advancedConfiguration.screenShareChromeExtension &&\n                            !(platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser()) &&\n                            !navigator.mediaDevices['getDisplayMedia']) {\n                            // Custom screen sharing extension for Chrome (and Opera) and no support for MediaDevices.getDisplayMedia()\n                            screenSharing.getScreenConstraints(function (error, screenConstraints) {\n                                if (!!error ||\n                                    (!!screenConstraints.mandatory && screenConstraints.mandatory.chromeMediaSource === 'screen')) {\n                                    if (error === 'permission-denied' || error === 'PermissionDeniedError') {\n                                        var error_5 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                                        logger.error(error_5);\n                                        return reject(error_5);\n                                    }\n                                    else {\n                                        var extensionId = _this.advancedConfiguration\n                                            .screenShareChromeExtension.split('/')\n                                            .pop()\n                                            .trim();\n                                        screenSharing.getChromeExtensionStatus(extensionId, function (status) {\n                                            if (status === 'installed-disabled') {\n                                                var error_6 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                                                logger.error(error_6);\n                                                return reject(error_6);\n                                            }\n                                            if (status === 'not-installed') {\n                                                var error_7 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, _this.advancedConfiguration.screenShareChromeExtension);\n                                                logger.error(error_7);\n                                                return reject(error_7);\n                                            }\n                                        });\n                                        return;\n                                    }\n                                }\n                                else {\n                                    myConstraints.constraints.video = screenConstraints;\n                                    return resolve(myConstraints);\n                                }\n                            });\n                            return;\n                        }\n                        else {\n                            if (navigator.mediaDevices['getDisplayMedia']) {\n                                // getDisplayMedia support (Chrome >= 72, Firefox >= 66, Safari >= 13)\n                                return resolve(myConstraints);\n                            }\n                            else {\n                                // Default screen sharing extension for Chrome/Opera, or is Firefox < 66\n                                var firefoxString = platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser()\n                                    ? publisherProperties.videoSource\n                                    : undefined;\n                                screenSharingAuto.getScreenId(firefoxString, function (error, sourceId, screenConstraints) {\n                                    if (!!error) {\n                                        if (error === 'not-installed') {\n                                            var extensionUrl = !!_this.advancedConfiguration.screenShareChromeExtension\n                                                ? _this.advancedConfiguration.screenShareChromeExtension\n                                                : 'https://chrome.google.com/webstore/detail/openvidu-screensharing/lfcgfepafnobdloecchnfaclibenjold';\n                                            var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, extensionUrl);\n                                            logger.error(err);\n                                            return reject(err);\n                                        }\n                                        else if (error === 'installed-disabled') {\n                                            var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                                            logger.error(err);\n                                            return reject(err);\n                                        }\n                                        else if (error === 'permission-denied') {\n                                            var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                                            logger.error(err);\n                                            return reject(err);\n                                        }\n                                        else {\n                                            var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, 'Unknown error when accessing screen share');\n                                            logger.error(err);\n                                            logger.error(error);\n                                            return reject(err);\n                                        }\n                                    }\n                                    else {\n                                        myConstraints.constraints.video = screenConstraints.video;\n                                        return resolve(myConstraints);\n                                    }\n                                });\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    OpenVidu.prototype.setVideoSource = function (myConstraints, videoSource) {\n        if (!myConstraints.constraints.video) {\n            myConstraints.constraints.video = {};\n        }\n        myConstraints.constraints.video['deviceId'] = { exact: videoSource };\n    };\n    /* Private methods */\n    OpenVidu.prototype.disconnectCallback = function () {\n        logger.warn('Websocket connection lost');\n        if (this.isRoomAvailable()) {\n            this.session.onLostConnection('networkDisconnect');\n        }\n        else {\n            alert('Connection error. Please reload page.');\n        }\n    };\n    OpenVidu.prototype.reconnectingCallback = function () {\n        logger.warn('Websocket connection lost (reconnecting)');\n        if (!this.isRoomAvailable()) {\n            alert('Connection error. Please reload page.');\n        }\n        else {\n            this.session.emitEvent('reconnecting', []);\n        }\n    };\n    OpenVidu.prototype.reconnectWebsocketThroughRpcConnectMethod = function (rpcSessionId) {\n        var _this = this;\n        // This RPC method allows checking:\n        // Single Master: if success, connection recovered\n        //                if error, no Master Node crashed and life will be -1. onLostConnection with reason networkDisconnect will be triggered\n        // Multi Master: if success, connection recovered\n        //               if error and Master Node crashed notification was already received, nothing must be done\n        //               if error and Master Node NOT crashed, sessionStatus method must be sent:\n        //                 if life is equal, networkDisconnect\n        //                 if life is greater, nodeCrashed\n        this.sendRequest('connect', { sessionId: rpcSessionId, reconnect: true }, function (error, response) {\n            if (!!error) {\n                if (_this.isMasterNodeCrashed()) {\n                    logger.warn('Master Node has crashed!');\n                }\n                else {\n                    logger.error(error);\n                    var notifyLostConnection_1 = function (reason, errorMsg) {\n                        logger.warn(errorMsg);\n                        _this.session.onLostConnection(reason);\n                        _this.jsonRpcClient.close(4101, 'Reconnection fault: ' + errorMsg);\n                    };\n                    var rpcSessionStatus = function () {\n                        if (_this.life === -1) {\n                            // Single Master\n                            notifyLostConnection_1('networkDisconnect', 'WS successfully reconnected but the user was already evicted due to timeout');\n                        }\n                        else {\n                            // Multi Master\n                            // This RPC method is only required to find out the reason of the disconnection:\n                            // whether the client lost its network connection or a Master Node crashed\n                            _this.sendRequest('sessionStatus', { sessionId: _this.session.sessionId }, function (error, response) {\n                                if (error != null) {\n                                    console.error('Error checking session status', error);\n                                }\n                                else {\n                                    if (_this.life === response.life) {\n                                        // If the life stored in the client matches the life stored in the server, it means that the client lost its network connection\n                                        notifyLostConnection_1('networkDisconnect', 'WS successfully reconnected but the user was already evicted due to timeout');\n                                    }\n                                    else {\n                                        // If the life stored in the client is below the life stored in the server, it means that the Master Node has crashed\n                                        notifyLostConnection_1('nodeCrashed', 'WS successfully reconnected to OpenVidu Server but your Master Node crashed');\n                                    }\n                                }\n                            });\n                        }\n                    };\n                    if (error.code === 40007 && error.message === 'reconnection error') {\n                        // Kurento error: invalid RPC sessionId. This means that the kurento-jsonrpc-server of openvidu-server where kurento-jsonrpc-client\n                        // is trying to reconnect does not know about this sessionId. This can mean two things:\n                        // 1) openvidu-browser managed to reconnect after a while, but openvidu-server already evicted the user for not receiving ping.\n                        // 2) openvidu-server process is a different one because of a node crash.\n                        // Send a \"sessionStatus\" method to check the reason\n                        console.error('Invalid RPC sessionId. Client network disconnection or Master Node crash');\n                        rpcSessionStatus();\n                    }\n                    else {\n                        rpcSessionStatus();\n                    }\n                }\n            }\n            else {\n                _this.jsonRpcClient.resetPing();\n                _this.session.onRecoveredConnection();\n            }\n        });\n    };\n    OpenVidu.prototype.reconnectedCallback = function () {\n        logger.warn('Websocket reconnected');\n        if (this.isRoomAvailable()) {\n            if (!!this.session.connection) {\n                this.reconnectWebsocketThroughRpcConnectMethod(this.session.connection.rpcSessionId);\n            }\n            else {\n                logger.warn('There was no previous connection when running reconnection callback');\n                // Make Session object dispatch 'sessionDisconnected' event\n                var sessionDisconnectEvent = new SessionDisconnectedEvent_1.SessionDisconnectedEvent(this.session, 'networkDisconnect');\n                this.session.ee.emitEvent('sessionDisconnected', [sessionDisconnectEvent]);\n                sessionDisconnectEvent.callDefaultBehavior();\n            }\n        }\n        else {\n            alert('Connection error. Please reload page.');\n        }\n    };\n    OpenVidu.prototype.isMasterNodeCrashed = function () {\n        return this.masterNodeHasCrashed;\n    };\n    OpenVidu.prototype.isRoomAvailable = function () {\n        if (this.session !== undefined && this.session instanceof Session_1.Session) {\n            return true;\n        }\n        else {\n            logger.warn('Session instance not found');\n            return false;\n        }\n    };\n    OpenVidu.prototype.isScreenShare = function (videoSource) {\n        return videoSource === 'screen' || videoSource === 'window' || (platform.isElectron() && videoSource.startsWith('screen:'));\n    };\n    return OpenVidu;\n}());\nexports.OpenVidu = OpenVidu;\n//# sourceMappingURL=OpenVidu.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/OpenVidu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Publisher.js":
/*!*****************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/Publisher.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Publisher = void 0;\nvar Session_1 = __webpack_require__(/*! ./Session */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Session.js\");\nvar Stream_1 = __webpack_require__(/*! ./Stream */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Stream.js\");\nvar StreamManager_1 = __webpack_require__(/*! ./StreamManager */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/StreamManager.js\");\nvar StreamEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamEvent.js\");\nvar StreamPropertyChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\");\nvar OpenViduError_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/OpenViduError */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../OpenViduInternal/Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\nvar TypeOfVideo_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/TypeOfVideo */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/TypeOfVideo.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Packs local media streams. Participants can publish it to a session. Initialized with {@link OpenVidu.initPublisher} method.\n *\n * See available event listeners at {@link PublisherEventMap}.\n */\nvar Publisher = /** @class */ (function (_super) {\n    __extends(Publisher, _super);\n    /**\n     * @hidden\n     */\n    function Publisher(targEl, properties, openvidu) {\n        var _this = _super.call(this, new Stream_1.Stream(!!openvidu.session ? openvidu.session : new Session_1.Session(openvidu), {\n            publisherProperties: properties,\n            mediaConstraints: {}\n        }), targEl) || this;\n        /**\n         * Whether the Publisher has been granted access to the requested input devices or not\n         */\n        _this.accessAllowed = false;\n        /**\n         * Whether you have called {@link Publisher.subscribeToRemote} with value `true` or `false` (*false* by default)\n         */\n        _this.isSubscribedToRemote = false;\n        _this.accessDenied = false;\n        platform = Platform_1.PlatformUtils.getInstance();\n        _this.properties = properties;\n        _this.openvidu = openvidu;\n        _this.stream.ee.on('local-stream-destroyed', function (reason) {\n            _this.stream.isLocalStreamPublished = false;\n            var streamEvent = new StreamEvent_1.StreamEvent(true, _this, 'streamDestroyed', _this.stream, reason);\n            _this.emitEvent('streamDestroyed', [streamEvent]);\n            streamEvent.callDefaultBehavior();\n        });\n        return _this;\n    }\n    /**\n     * Publish or unpublish the audio stream (if available). Calling this method twice in a row passing same `enabled` value will have no effect\n     *\n     * #### Events dispatched\n     *\n     * > _Only if `Session.publish(Publisher)` has been called for this Publisher_\n     *\n     * The {@link Session} object of the local participant will dispatch a `streamPropertyChanged` event with `changedProperty` set to `\"audioActive\"` and `reason` set to `\"publishAudio\"`\n     * The {@link Publisher} object of the local participant will also dispatch the exact same event\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `streamPropertyChanged` event with `changedProperty` set to `\"audioActive\"` and `reason` set to `\"publishAudio\"`\n     * The respective {@link Subscriber} object of every other participant receiving this Publisher's stream will also dispatch the exact same event\n     *\n     * See {@link StreamPropertyChangedEvent} to learn more.\n     *\n     * @param enabled `true` to publish the audio stream, `false` to unpublish it\n     */\n    Publisher.prototype.publishAudio = function (enabled) {\n        var _this = this;\n        if (this.stream.audioActive !== enabled) {\n            var affectedMediaStream = this.stream.displayMyRemote()\n                ? this.stream.localMediaStreamWhenSubscribedToRemote\n                : this.stream.getMediaStream();\n            affectedMediaStream.getAudioTracks().forEach(function (track) {\n                track.enabled = enabled;\n            });\n            if (!!this.session && !!this.stream.streamId) {\n                this.session.openvidu.sendRequest('streamPropertyChanged', {\n                    streamId: this.stream.streamId,\n                    property: 'audioActive',\n                    newValue: enabled,\n                    reason: 'publishAudio'\n                }, function (error, response) {\n                    if (error) {\n                        logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n                    }\n                    else {\n                        _this.session.emitEvent('streamPropertyChanged', [\n                            new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, _this.stream, 'audioActive', enabled, !enabled, 'publishAudio')\n                        ]);\n                        _this.emitEvent('streamPropertyChanged', [\n                            new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this, _this.stream, 'audioActive', enabled, !enabled, 'publishAudio')\n                        ]);\n                        _this.session.sendVideoData(_this.stream.streamManager);\n                    }\n                });\n            }\n            this.stream.audioActive = enabled;\n            logger.info(\"'Publisher' has \" + (enabled ? 'published' : 'unpublished') + ' its audio stream');\n        }\n    };\n    /**\n     * Publish or unpublish the video stream (if available). Calling this method twice in a row passing same `enabled` value will have no effect\n     *\n     * #### Events dispatched\n     *\n     * > _Only if `Session.publish(Publisher)` has been called for this Publisher_\n     *\n     * The {@link Session} object of the local participant will dispatch a `streamPropertyChanged` event with `changedProperty` set to `\"videoActive\"` and `reason` set to `\"publishVideo\"`\n     * The {@link Publisher} object of the local participant will also dispatch the exact same event\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `streamPropertyChanged` event with `changedProperty` set to `\"videoActive\"` and `reason` set to `\"publishVideo\"`\n     * The respective {@link Subscriber} object of every other participant receiving this Publisher's stream will also dispatch the exact same event\n     *\n     * See {@link StreamPropertyChangedEvent} to learn more.\n     *\n     * @param enabled `true` to publish the video stream, `false` to unpublish it\n     * @param resource\n     *\n     * If parameter **`enabled`** is `false`, this optional parameter is of type boolean. It can be set to `true` to forcibly free the hardware resource associated to the video track, or can be set to `false` to keep the access to the hardware resource.\n     * Not freeing the resource makes the operation much more efficient, but depending on the platform two side-effects can be introduced: the video device may not be accessible by other applications and the access light of\n     * webcams may remain on. This is platform-dependent: some browsers will not present the side-effects even when not freeing the resource.\n     *\n     * If parameter **`enabled`** is `true`, this optional parameter is of type [MediaStreamTrack](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack). It can be set to force the restoration of the video track with a custom track. This may be\n     * useful if the Publisher was unpublished freeing the hardware resource, and openvidu-browser is not able to successfully re-create the video track as it was before unpublishing. In this way previous track settings will be ignored and this MediaStreamTrack\n     * will be used instead.\n     */\n    Publisher.prototype.publishVideo = function (enabled, resource) {\n        var _this = this;\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n            var affectedMediaStream_1, mustRestartMediaStream_1, oldVideoTrack, replaceVideoTrack, mediaStream, error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.stream.videoActive !== enabled)) return [3 /*break*/, 9];\n                        affectedMediaStream_1 = this.stream.displayMyRemote()\n                            ? this.stream.localMediaStreamWhenSubscribedToRemote\n                            : this.stream.getMediaStream();\n                        mustRestartMediaStream_1 = false;\n                        affectedMediaStream_1.getVideoTracks().forEach(function (track) {\n                            track.enabled = enabled;\n                            if (!enabled && resource === true) {\n                                track.stop();\n                            }\n                            else if (enabled && track.readyState === 'ended') {\n                                // Resource was freed\n                                mustRestartMediaStream_1 = true;\n                            }\n                        });\n                        if (!(!enabled && resource === true && !!this.stream.filter && this.stream.filter.type.startsWith('VB:'))) return [3 /*break*/, 2];\n                        this.stream.lastVBFilter = this.stream.filter; // Save the filter to be re-applied in case of unmute\n                        return [4 /*yield*/, this.stream.removeFilterAux(true)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        if (!mustRestartMediaStream_1) return [3 /*break*/, 8];\n                        oldVideoTrack = affectedMediaStream_1.getVideoTracks()[0];\n                        affectedMediaStream_1.removeTrack(oldVideoTrack);\n                        replaceVideoTrack = function (tr) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        affectedMediaStream_1.addTrack(tr);\n                                        if (!this.stream.isLocalStreamPublished) return [3 /*break*/, 2];\n                                        return [4 /*yield*/, this.replaceTrackInRtcRtpSender(tr)];\n                                    case 1:\n                                        _a.sent();\n                                        _a.label = 2;\n                                    case 2:\n                                        if (!!this.stream.lastVBFilter) {\n                                            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                var options, lastExecMethod;\n                                                return __generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            options = this.stream.lastVBFilter.options;\n                                                            lastExecMethod = this.stream.lastVBFilter.lastExecMethod;\n                                                            if (!!lastExecMethod && lastExecMethod.method === 'update') {\n                                                                options = Object.assign({}, options, lastExecMethod.params);\n                                                            }\n                                                            return [4 /*yield*/, this.stream.applyFilter(this.stream.lastVBFilter.type, options)];\n                                                        case 1:\n                                                            _a.sent();\n                                                            delete this.stream.lastVBFilter;\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); }, 1);\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        if (!(!!resource && resource instanceof MediaStreamTrack)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, replaceVideoTrack(resource)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 8];\n                    case 4:\n                        _a.trys.push([4, 7, , 8]);\n                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia({\n                                audio: false,\n                                video: this.stream.lastVideoTrackConstraints\n                            })];\n                    case 5:\n                        mediaStream = _a.sent();\n                        return [4 /*yield*/, replaceVideoTrack(mediaStream.getVideoTracks()[0])];\n                    case 6:\n                        _a.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        return [2 /*return*/, reject(error_1)];\n                    case 8:\n                        if (!!this.session && !!this.stream.streamId) {\n                            this.session.openvidu.sendRequest('streamPropertyChanged', {\n                                streamId: this.stream.streamId,\n                                property: 'videoActive',\n                                newValue: enabled,\n                                reason: 'publishVideo'\n                            }, function (error, response) {\n                                if (error) {\n                                    logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n                                }\n                                else {\n                                    _this.session.emitEvent('streamPropertyChanged', [\n                                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, _this.stream, 'videoActive', enabled, !enabled, 'publishVideo')\n                                    ]);\n                                    _this.emitEvent('streamPropertyChanged', [\n                                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this, _this.stream, 'videoActive', enabled, !enabled, 'publishVideo')\n                                    ]);\n                                    _this.session.sendVideoData(_this.stream.streamManager);\n                                }\n                            });\n                        }\n                        this.stream.videoActive = enabled;\n                        logger.info(\"'Publisher' has \" + (enabled ? 'published' : 'unpublished') + ' its video stream');\n                        return [2 /*return*/, resolve()];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Call this method before {@link Session.publish} if you prefer to subscribe to your Publisher's remote stream instead of using the local stream, as any other user would do.\n     */\n    Publisher.prototype.subscribeToRemote = function (value) {\n        value = value !== undefined ? value : true;\n        this.isSubscribedToRemote = value;\n        this.stream.subscribeToMyRemote(value);\n    };\n    /**\n     * See {@link EventDispatcher.on}\n     */\n    Publisher.prototype.on = function (type, handler) {\n        var _this = this;\n        _super.prototype.on.call(this, type, handler);\n        if (type === 'streamCreated') {\n            if (!!this.stream && this.stream.isLocalStreamPublished) {\n                this.emitEvent('streamCreated', [new StreamEvent_1.StreamEvent(false, this, 'streamCreated', this.stream, '')]);\n            }\n            else {\n                this.stream.ee.on('stream-created-by-publisher', function () {\n                    _this.emitEvent('streamCreated', [new StreamEvent_1.StreamEvent(false, _this, 'streamCreated', _this.stream, '')]);\n                });\n            }\n        }\n        if (type === 'accessAllowed') {\n            if (this.accessAllowed) {\n                this.emitEvent('accessAllowed', []);\n            }\n        }\n        if (type === 'accessDenied') {\n            if (this.accessDenied) {\n                this.emitEvent('accessDenied', []);\n            }\n        }\n        return this;\n    };\n    /**\n     * See {@link EventDispatcher.once}\n     */\n    Publisher.prototype.once = function (type, handler) {\n        var _this = this;\n        _super.prototype.once.call(this, type, handler);\n        if (type === 'streamCreated') {\n            if (!!this.stream && this.stream.isLocalStreamPublished) {\n                this.emitEvent('streamCreated', [new StreamEvent_1.StreamEvent(false, this, 'streamCreated', this.stream, '')]);\n            }\n            else {\n                this.stream.ee.once('stream-created-by-publisher', function () {\n                    _this.emitEvent('streamCreated', [new StreamEvent_1.StreamEvent(false, _this, 'streamCreated', _this.stream, '')]);\n                });\n            }\n        }\n        if (type === 'accessAllowed') {\n            if (this.accessAllowed) {\n                this.emitEvent('accessAllowed', []);\n            }\n        }\n        if (type === 'accessDenied') {\n            if (this.accessDenied) {\n                this.emitEvent('accessDenied', []);\n            }\n        }\n        return this;\n    };\n    /**\n     * See {@link EventDispatcher.off}\n     */\n    Publisher.prototype.off = function (type, handler) {\n        _super.prototype.off.call(this, type, handler);\n        return this;\n    };\n    /**\n     * Replaces the current video or audio track with a different one. This allows you to replace an ongoing track with a different one\n     * without having to renegotiate the whole WebRTC connection (that is, initializing a new Publisher, unpublishing the previous one\n     * and publishing the new one).\n     *\n     * You can get this new MediaStreamTrack by using the native Web API or simply with {@link OpenVidu.getUserMedia} method.\n     *\n     * **WARNING: this method has been proven to work in the majority of cases, but there may be some combinations of published/replaced tracks that may be incompatible\n     * between them and break the connection in OpenVidu Server. A complete renegotiation may be the only solution in this case.\n     * Visit [RTCRtpSender.replaceTrack](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack) documentation for further details.**\n     *\n     * @param track The [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) object to replace the current one.\n     * If it is an audio track, the current audio track will be the replaced one. If it is a video track, the current video track will be the replaced one.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the track was successfully replaced and rejected with an Error object in other case\n     */\n    Publisher.prototype.replaceTrack = function (track) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.replaceTrackAux(track, true)];\n            });\n        });\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    Publisher.prototype.initialize = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n            var constraints, constraintsAux, timeForDialogEvent, startTime, errorCallback, successCallback, getMediaSuccess, getMediaError, myConstraints, outboundStreamOptions, definedAudioConstraint, mediaStream, mediaStream, error_2, error_3;\n            var _this = this;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        constraints = {};\n                        constraintsAux = {};\n                        timeForDialogEvent = 2000;\n                        errorCallback = function (openViduError) {\n                            _this.accessDenied = true;\n                            _this.accessAllowed = false;\n                            logger.error(\"Publisher initialization failed. \".concat(openViduError.name, \": \").concat(openViduError.message));\n                            return reject(openViduError);\n                        };\n                        successCallback = function (mediaStream) {\n                            var _a, _b;\n                            _this.accessAllowed = true;\n                            _this.accessDenied = false;\n                            if (typeof MediaStreamTrack !== 'undefined' && _this.properties.audioSource instanceof MediaStreamTrack) {\n                                mediaStream.removeTrack(mediaStream.getAudioTracks()[0]);\n                                mediaStream.addTrack(_this.properties.audioSource);\n                            }\n                            if (typeof MediaStreamTrack !== 'undefined' && _this.properties.videoSource instanceof MediaStreamTrack) {\n                                mediaStream.removeTrack(mediaStream.getVideoTracks()[0]);\n                                mediaStream.addTrack(_this.properties.videoSource);\n                            }\n                            // Apply PublisherProperties.publishAudio and PublisherProperties.publishVideo\n                            if (!!mediaStream.getAudioTracks()[0]) {\n                                var enabled = _this.stream.audioActive !== undefined && _this.stream.audioActive !== null\n                                    ? _this.stream.audioActive\n                                    : !!_this.stream.outboundStreamOpts.publisherProperties.publishAudio;\n                                mediaStream.getAudioTracks()[0].enabled = enabled;\n                            }\n                            if (!!mediaStream.getVideoTracks()[0]) {\n                                var enabled = _this.stream.videoActive !== undefined && _this.stream.videoActive !== null\n                                    ? _this.stream.videoActive\n                                    : !!_this.stream.outboundStreamOpts.publisherProperties.publishVideo;\n                                mediaStream.getVideoTracks()[0].enabled = enabled;\n                            }\n                            // Set Content Hint on all MediaStreamTracks\n                            for (var _i = 0, _c = mediaStream.getAudioTracks(); _i < _c.length; _i++) {\n                                var track = _c[_i];\n                                if (!((_a = track.contentHint) === null || _a === void 0 ? void 0 : _a.length)) {\n                                    // contentHint for audio: \"\", \"speech\", \"speech-recognition\", \"music\".\n                                    // https://w3c.github.io/mst-content-hint/#audio-content-hints\n                                    track.contentHint = '';\n                                    logger.info(\"Audio track Content Hint set: '\".concat(track.contentHint, \"'\"));\n                                }\n                            }\n                            for (var _d = 0, _e = mediaStream.getVideoTracks(); _d < _e.length; _d++) {\n                                var track = _e[_d];\n                                if (!((_b = track.contentHint) === null || _b === void 0 ? void 0 : _b.length)) {\n                                    // contentHint for video: \"\", \"motion\", \"detail\", \"text\".\n                                    // https://w3c.github.io/mst-content-hint/#video-content-hints\n                                    switch (_this.stream.typeOfVideo) {\n                                        case TypeOfVideo_1.TypeOfVideo.SCREEN:\n                                            track.contentHint = 'detail';\n                                            break;\n                                        case TypeOfVideo_1.TypeOfVideo.CUSTOM:\n                                            logger.warn('CUSTOM type video track was provided without Content Hint!');\n                                            track.contentHint = 'motion';\n                                            break;\n                                        case TypeOfVideo_1.TypeOfVideo.CAMERA:\n                                        case TypeOfVideo_1.TypeOfVideo.IPCAM:\n                                        default:\n                                            track.contentHint = 'motion';\n                                            break;\n                                    }\n                                    logger.info(\"Video track Content Hint set: '\".concat(track.contentHint, \"'\"));\n                                }\n                            }\n                            _this.initializeVideoReference(mediaStream);\n                            if (!_this.stream.displayMyRemote()) {\n                                // When we are subscribed to our remote we don't still set the MediaStream object in the video elements to\n                                // avoid early 'streamPlaying' event\n                                _this.stream.updateMediaStreamInVideos();\n                            }\n                            delete _this.firstVideoElement;\n                            if (_this.stream.isSendVideo()) {\n                                // Has video track\n                                _this.getVideoDimensions().then(function (dimensions) {\n                                    _this.stream.videoDimensions = {\n                                        width: dimensions.width,\n                                        height: dimensions.height\n                                    };\n                                    if (_this.stream.isSendScreen()) {\n                                        if (_this.stream.isSendAudio() && mediaStream.getAudioTracks().length === 0) {\n                                            // If sending audio is enabled and there are no audio tracks in the mediaStream, disable audio for screen sharing.\n                                            _this.stream.audioActive = false;\n                                            _this.stream.hasAudio = false;\n                                            _this.stream.outboundStreamOpts.publisherProperties.publishAudio = false;\n                                            _this.stream.outboundStreamOpts.publisherProperties.audioSource = false;\n                                        }\n                                        // Set interval to listen for screen resize events\n                                        _this.screenShareResizeInterval = setInterval(function () {\n                                            var settings = mediaStream.getVideoTracks()[0].getSettings();\n                                            var newWidth = settings.width;\n                                            var newHeight = settings.height;\n                                            var widthChanged = newWidth != null && newWidth !== _this.stream.videoDimensions.width;\n                                            var heightChanged = newHeight != null && newHeight !== _this.stream.videoDimensions.height;\n                                            if (_this.stream.isLocalStreamPublished && (widthChanged || heightChanged)) {\n                                                _this.openvidu.sendVideoDimensionsChangedEvent(_this, 'screenResized', _this.stream.videoDimensions.width, _this.stream.videoDimensions.height, newWidth || 0, newHeight || 0);\n                                            }\n                                        }, 650);\n                                    }\n                                    _this.stream.isLocalStreamReadyToPublish = true;\n                                    _this.stream.ee.emitEvent('stream-ready-to-publish', []);\n                                });\n                            }\n                            else {\n                                // Only audio track (no videoDimensions)\n                                _this.stream.isLocalStreamReadyToPublish = true;\n                                _this.stream.ee.emitEvent('stream-ready-to-publish', []);\n                            }\n                            return resolve();\n                        };\n                        getMediaSuccess = function (mediaStream, definedAudioConstraint) { return __awaiter(_this, void 0, void 0, function () {\n                            var audioOnlyStream, error_4;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        this.clearPermissionDialogTimer(startTime, timeForDialogEvent);\n                                        if (!(this.stream.isSendScreen() && this.properties.audioSource !== 'screen' && this.stream.isSendAudio())) return [3 /*break*/, 5];\n                                        // When getting desktop as user media audio constraint must be false. Now we can ask for it if required\n                                        constraintsAux.audio = definedAudioConstraint;\n                                        constraintsAux.video = false;\n                                        startTime = Date.now();\n                                        this.setPermissionDialogTimer(timeForDialogEvent);\n                                        _a.label = 1;\n                                    case 1:\n                                        _a.trys.push([1, 3, , 4]);\n                                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraintsAux)];\n                                    case 2:\n                                        audioOnlyStream = _a.sent();\n                                        this.clearPermissionDialogTimer(startTime, timeForDialogEvent);\n                                        mediaStream.addTrack(audioOnlyStream.getAudioTracks()[0]);\n                                        successCallback(mediaStream);\n                                        return [3 /*break*/, 4];\n                                    case 3:\n                                        error_4 = _a.sent();\n                                        this.clearPermissionDialogTimer(startTime, timeForDialogEvent);\n                                        mediaStream.getAudioTracks().forEach(function (track) {\n                                            track.stop();\n                                        });\n                                        mediaStream.getVideoTracks().forEach(function (track) {\n                                            track.stop();\n                                        });\n                                        errorCallback(this.openvidu.generateAudioDeviceError(error_4, constraints));\n                                        return [2 /*return*/];\n                                    case 4: return [3 /*break*/, 6];\n                                    case 5:\n                                        successCallback(mediaStream);\n                                        _a.label = 6;\n                                    case 6: return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        getMediaError = function (error) { return __awaiter(_this, void 0, void 0, function () {\n                            var errorName, errorMessage, _a, mediaStream, error_5, mediaStream, error_6;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        logger.error(\"getMediaError: \".concat(error.toString()));\n                                        this.clearPermissionDialogTimer(startTime, timeForDialogEvent);\n                                        if (error.name === 'Error') {\n                                            // Safari OverConstrainedError has as name property 'Error' instead of 'OverConstrainedError'\n                                            error.name = error.constructor.name;\n                                        }\n                                        _a = error.name.toLowerCase();\n                                        switch (_a) {\n                                            case 'notfounderror': return [3 /*break*/, 1];\n                                            case 'notallowederror': return [3 /*break*/, 5];\n                                            case 'overconstrainederror': return [3 /*break*/, 6];\n                                            case 'aborterror': return [3 /*break*/, 10];\n                                            case 'notreadableerror': return [3 /*break*/, 10];\n                                        }\n                                        return [3 /*break*/, 11];\n                                    case 1:\n                                        _b.trys.push([1, 3, , 4]);\n                                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia({\n                                                audio: false,\n                                                video: constraints.video\n                                            })];\n                                    case 2:\n                                        mediaStream = _b.sent();\n                                        mediaStream.getVideoTracks().forEach(function (track) {\n                                            track.stop();\n                                        });\n                                        errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                                        errorMessage = error.toString();\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 4];\n                                    case 3:\n                                        error_5 = _b.sent();\n                                        errorName = OpenViduError_1.OpenViduErrorName.INPUT_VIDEO_DEVICE_NOT_FOUND;\n                                        errorMessage = error_5.toString();\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 4];\n                                    case 4: return [3 /*break*/, 12];\n                                    case 5:\n                                        errorName = this.stream.isSendScreen()\n                                            ? OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED\n                                            : OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                                        errorMessage = error.toString();\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 12];\n                                    case 6:\n                                        _b.trys.push([6, 8, , 9]);\n                                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia({\n                                                audio: false,\n                                                video: constraints.video\n                                            })];\n                                    case 7:\n                                        mediaStream = _b.sent();\n                                        mediaStream.getVideoTracks().forEach(function (track) {\n                                            track.stop();\n                                        });\n                                        if (error.constraint.toLowerCase() === 'deviceid') {\n                                            errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                                            errorMessage =\n                                                \"Audio input device with deviceId '\" +\n                                                    constraints.audio.deviceId.exact +\n                                                    \"' not found\";\n                                        }\n                                        else {\n                                            errorName = OpenViduError_1.OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n                                            errorMessage =\n                                                \"Audio input device doesn't support the value passed for constraint '\" + error.constraint + \"'\";\n                                        }\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 9];\n                                    case 8:\n                                        error_6 = _b.sent();\n                                        if (error_6.constraint.toLowerCase() === 'deviceid') {\n                                            errorName = OpenViduError_1.OpenViduErrorName.INPUT_VIDEO_DEVICE_NOT_FOUND;\n                                            errorMessage =\n                                                \"Video input device with deviceId '\" +\n                                                    constraints.video.deviceId.exact +\n                                                    \"' not found\";\n                                        }\n                                        else {\n                                            errorName = OpenViduError_1.OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n                                            errorMessage =\n                                                \"Video input device doesn't support the value passed for constraint '\" + error_6.constraint + \"'\";\n                                        }\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 9];\n                                    case 9: return [3 /*break*/, 12];\n                                    case 10:\n                                        errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ALREADY_IN_USE;\n                                        errorMessage = error.toString();\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 12];\n                                    case 11:\n                                        errorName = OpenViduError_1.OpenViduErrorName.GENERIC_ERROR;\n                                        errorMessage = error.toString();\n                                        errorCallback(new OpenViduError_1.OpenViduError(errorName, errorMessage));\n                                        return [3 /*break*/, 12];\n                                    case 12: return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 14, , 15]);\n                        return [4 /*yield*/, this.openvidu.generateMediaConstraints(this.properties)];\n                    case 2:\n                        myConstraints = _c.sent();\n                        if (!((!!myConstraints.videoTrack && !!myConstraints.audioTrack) ||\n                            (!!myConstraints.audioTrack && ((_a = myConstraints.constraints) === null || _a === void 0 ? void 0 : _a.video) === false) ||\n                            (!!myConstraints.videoTrack && ((_b = myConstraints.constraints) === null || _b === void 0 ? void 0 : _b.audio) === false))) return [3 /*break*/, 3];\n                        // No need to call getUserMedia at all. MediaStreamTracks already provided\n                        successCallback(this.openvidu.addAlreadyProvidedTracks(myConstraints, new MediaStream(), this.stream));\n                        return [3 /*break*/, 13];\n                    case 3:\n                        constraints = myConstraints.constraints;\n                        outboundStreamOptions = {\n                            mediaConstraints: constraints,\n                            publisherProperties: this.properties\n                        };\n                        this.stream.setOutboundStreamOptions(outboundStreamOptions);\n                        definedAudioConstraint = constraints.audio === undefined ? true : constraints.audio;\n                        constraintsAux.audio = this.stream.isSendScreen() ? false : definedAudioConstraint;\n                        constraintsAux.video = constraints.video;\n                        startTime = Date.now();\n                        this.setPermissionDialogTimer(timeForDialogEvent);\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 11, , 13]);\n                        if (!(this.stream.isSendScreen() && navigator.mediaDevices['getDisplayMedia'] && !platform.isElectron())) return [3 /*break*/, 7];\n                        return [4 /*yield*/, navigator.mediaDevices['getDisplayMedia']({ video: true, audio: this.properties.audioSource === 'screen' })];\n                    case 5:\n                        mediaStream = _c.sent();\n                        this.openvidu.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                        return [4 /*yield*/, getMediaSuccess(mediaStream, definedAudioConstraint)];\n                    case 6:\n                        _c.sent();\n                        return [3 /*break*/, 10];\n                    case 7:\n                        this.stream.lastVideoTrackConstraints = constraintsAux.video;\n                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraintsAux)];\n                    case 8:\n                        mediaStream = _c.sent();\n                        this.openvidu.addAlreadyProvidedTracks(myConstraints, mediaStream, this.stream);\n                        return [4 /*yield*/, getMediaSuccess(mediaStream, definedAudioConstraint)];\n                    case 9:\n                        _c.sent();\n                        _c.label = 10;\n                    case 10: return [3 /*break*/, 13];\n                    case 11:\n                        error_2 = _c.sent();\n                        return [4 /*yield*/, getMediaError(error_2)];\n                    case 12:\n                        _c.sent();\n                        return [3 /*break*/, 13];\n                    case 13: return [3 /*break*/, 15];\n                    case 14:\n                        error_3 = _c.sent();\n                        errorCallback(error_3);\n                        return [3 /*break*/, 15];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * @hidden\n     */\n    Publisher.prototype.replaceTrackAux = function (track, updateLastConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var trackOriginalEnabledValue, error_7;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        trackOriginalEnabledValue = track.enabled;\n                        if (track.kind === 'video') {\n                            track.enabled = this.stream.videoActive;\n                        }\n                        else if (track.kind === 'audio') {\n                            track.enabled = this.stream.audioActive;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        if (!this.stream.isLocalStreamPublished) return [3 /*break*/, 3];\n                        // Only if the Publisher has been published is necessary to call native Web API RTCRtpSender.replaceTrack\n                        // If it has not been published yet, replacing it on the MediaStream object is enough\n                        this.replaceTrackInMediaStream(track, updateLastConstraints);\n                        return [4 /*yield*/, this.replaceTrackInRtcRtpSender(track)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                    case 3: \n                    // Publisher not published. Simply replace the track on the local MediaStream\n                    return [2 /*return*/, this.replaceTrackInMediaStream(track, updateLastConstraints)];\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        error_7 = _a.sent();\n                        track.enabled = trackOriginalEnabledValue;\n                        throw error_7;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @hidden\n     *\n     * To obtain the videoDimensions we wait for the video reference to have enough metadata\n     * and then try to use MediaStreamTrack.getSettingsMethod(). If not available, then we\n     * use the HTMLVideoElement properties videoWidth and videoHeight\n     */\n    Publisher.prototype.getVideoDimensions = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // Ionic iOS and Safari iOS supposedly require the video element to actually exist inside the DOM\n            var requiresDomInsertion = (platform.isIonicIos() || platform.isIOSWithSafari()) && (_this.videoReference.readyState < 1);\n            var loadedmetadataListener;\n            var resolveDimensions = function () {\n                var width;\n                var height;\n                if (typeof _this.stream.getMediaStream().getVideoTracks()[0].getSettings === 'function') {\n                    var settings = _this.stream.getMediaStream().getVideoTracks()[0].getSettings();\n                    width = settings.width || _this.videoReference.videoWidth;\n                    height = settings.height || _this.videoReference.videoHeight;\n                }\n                else {\n                    logger.warn('MediaStreamTrack does not have getSettings method on ' + platform.getDescription());\n                    width = _this.videoReference.videoWidth;\n                    height = _this.videoReference.videoHeight;\n                }\n                if (loadedmetadataListener != null) {\n                    _this.videoReference.removeEventListener('loadedmetadata', loadedmetadataListener);\n                }\n                if (requiresDomInsertion) {\n                    document.body.removeChild(_this.videoReference);\n                }\n                return resolve({ width: width, height: height });\n            };\n            if (_this.videoReference.readyState >= 1) {\n                // The video already has metadata available\n                // No need of loadedmetadata event\n                resolveDimensions();\n            }\n            else {\n                // The video does not have metadata available yet\n                // Must listen to loadedmetadata event\n                loadedmetadataListener = function () {\n                    if (!_this.videoReference.videoWidth) {\n                        var interval_1 = setInterval(function () {\n                            if (!!_this.videoReference.videoWidth) {\n                                clearInterval(interval_1);\n                                resolveDimensions();\n                            }\n                        }, 40);\n                    }\n                    else {\n                        resolveDimensions();\n                    }\n                };\n                _this.videoReference.addEventListener('loadedmetadata', loadedmetadataListener);\n                if (requiresDomInsertion) {\n                    document.body.appendChild(_this.videoReference);\n                }\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Publisher.prototype.reestablishStreamPlayingEvent = function () {\n        if (this.ee.getListeners('streamPlaying').length > 0) {\n            this.addPlayEventToFirstVideo();\n        }\n    };\n    /**\n     * @hidden\n     */\n    Publisher.prototype.initializeVideoReference = function (mediaStream) {\n        this.videoReference = document.createElement('video');\n        this.videoReference.style.display = 'none';\n        this.videoReference.muted = true;\n        this.videoReference.autoplay = true;\n        this.videoReference.controls = false;\n        if (platform.isSafariBrowser() ||\n            (platform.isIPhoneOrIPad() &&\n                (platform.isChromeMobileBrowser() ||\n                    platform.isEdgeMobileBrowser() ||\n                    platform.isOperaMobileBrowser() ||\n                    platform.isFirefoxMobileBrowser()))) {\n            this.videoReference.playsInline = true;\n        }\n        this.stream.setMediaStream(mediaStream);\n        if (!!this.firstVideoElement) {\n            this.createVideoElement(this.firstVideoElement.targetElement, this.properties.insertMode);\n        }\n        this.videoReference.srcObject = this.stream.getMediaStream();\n    };\n    /**\n     * @hidden\n     */\n    Publisher.prototype.replaceTrackInMediaStream = function (track, updateLastConstraints) {\n        var mediaStream = this.stream.displayMyRemote()\n            ? this.stream.localMediaStreamWhenSubscribedToRemote\n            : this.stream.getMediaStream();\n        var removedTrack;\n        if (track.kind === 'video') {\n            removedTrack = mediaStream.getVideoTracks()[0];\n            if (updateLastConstraints) {\n                this.stream.lastVideoTrackConstraints = track.getConstraints();\n            }\n        }\n        else {\n            removedTrack = mediaStream.getAudioTracks()[0];\n        }\n        removedTrack.enabled = false;\n        removedTrack.stop();\n        mediaStream.removeTrack(removedTrack);\n        mediaStream.addTrack(track);\n        var trackInfo = {\n            oldLabel: (removedTrack === null || removedTrack === void 0 ? void 0 : removedTrack.label) || '',\n            newLabel: (track === null || track === void 0 ? void 0 : track.label) || ''\n        };\n        if (track.kind === 'video' && updateLastConstraints) {\n            this.openvidu.sendNewVideoDimensionsIfRequired(this, 'trackReplaced', 50, 30);\n            this.openvidu.sendTrackChangedEvent(this, trackInfo.oldLabel, trackInfo.newLabel, 'videoTrack');\n            if (this.stream.isLocalStreamPublished) {\n                this.session.sendVideoData(this.stream.streamManager, 5, true, 5);\n            }\n        }\n        else if (track.kind === 'audio' && updateLastConstraints) {\n            this.openvidu.sendTrackChangedEvent(this, trackInfo.oldLabel, trackInfo.newLabel, 'audioTrack');\n        }\n        if (track.kind === 'audio') {\n            this.stream.disableHarkSpeakingEvent(false);\n            this.stream.disableHarkStoppedSpeakingEvent(false);\n            this.stream.disableHarkVolumeChangeEvent(false);\n            this.stream.initHarkEvents();\n        }\n    };\n    /* Private methods */\n    Publisher.prototype.setPermissionDialogTimer = function (waitTime) {\n        var _this = this;\n        this.permissionDialogTimeout = setTimeout(function () {\n            _this.emitEvent('accessDialogOpened', []);\n        }, waitTime);\n    };\n    Publisher.prototype.clearPermissionDialogTimer = function (startTime, waitTime) {\n        clearTimeout(this.permissionDialogTimeout);\n        if (Date.now() - startTime > waitTime) {\n            // Permission dialog was shown and now is closed\n            this.emitEvent('accessDialogClosed', []);\n        }\n    };\n    Publisher.prototype.replaceTrackInRtcRtpSender = function (track) {\n        return __awaiter(this, void 0, void 0, function () {\n            var senders, sender;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        senders = this.stream.getRTCPeerConnection().getSenders();\n                        if (track.kind === 'video') {\n                            sender = senders.find(function (s) { return !!s.track && s.track.kind === 'video'; });\n                            if (!sender) {\n                                throw new Error(\"There's no replaceable track for that kind of MediaStreamTrack in this Publisher object\");\n                            }\n                        }\n                        else if (track.kind === 'audio') {\n                            sender = senders.find(function (s) { return !!s.track && s.track.kind === 'audio'; });\n                            if (!sender) {\n                                throw new Error(\"There's no replaceable track for that kind of MediaStreamTrack in this Publisher object\");\n                            }\n                        }\n                        else {\n                            throw new Error('Unknown track kind ' + track.kind);\n                        }\n                        return [4 /*yield*/, sender.replaceTrack(track)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return Publisher;\n}(StreamManager_1.StreamManager));\nexports.Publisher = Publisher;\n//# sourceMappingURL=Publisher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Publisher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Session.js":
/*!***************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/Session.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Session = void 0;\nvar Connection_1 = __webpack_require__(/*! ./Connection */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Connection.js\");\nvar Filter_1 = __webpack_require__(/*! ./Filter */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Filter.js\");\nvar Subscriber_1 = __webpack_require__(/*! ./Subscriber */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Subscriber.js\");\nvar EventDispatcher_1 = __webpack_require__(/*! ./EventDispatcher */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/EventDispatcher.js\");\nvar ConnectionEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/ConnectionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionEvent.js\");\nvar FilterEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/FilterEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/FilterEvent.js\");\nvar RecordingEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/RecordingEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/RecordingEvent.js\");\nvar SessionDisconnectedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/SessionDisconnectedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SessionDisconnectedEvent.js\");\nvar SignalEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/SignalEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SignalEvent.js\");\nvar SpeechToTextEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/SpeechToTextEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SpeechToTextEvent.js\");\nvar StreamEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamEvent.js\");\nvar StreamPropertyChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\");\nvar ConnectionPropertyChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/ConnectionPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionPropertyChangedEvent.js\");\nvar NetworkQualityLevelChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/NetworkQualityLevelChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/NetworkQualityLevelChangedEvent.js\");\nvar OpenViduError_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/OpenViduError */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\");\nvar VideoInsertMode_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/VideoInsertMode */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../OpenViduInternal/Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\n/**\n * @hidden\n */\nvar semverMajor = __webpack_require__(/*! semver/functions/major */ \"(ssr)/./node_modules/semver/functions/major.js\");\n/**\n * @hidden\n */\nvar semverMinor = __webpack_require__(/*! semver/functions/minor */ \"(ssr)/./node_modules/semver/functions/minor.js\");\nvar ExceptionEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/ExceptionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Represents a video call. It can also be seen as a videoconference room where multiple users can connect.\n * Participants who publish their videos to a session can be seen by the rest of users connected to that specific session.\n * Initialized with {@link OpenVidu.initSession} method.\n *\n * See available event listeners at {@link SessionEventMap}.\n */\nvar Session = /** @class */ (function (_super) {\n    __extends(Session, _super);\n    /**\n     * @hidden\n     */\n    function Session(openvidu) {\n        var _this = _super.call(this) || this;\n        /**\n         * Collection of all StreamManagers of this Session ({@link Publisher} and {@link Subscriber})\n         */\n        _this.streamManagers = [];\n        // This map is only used to avoid race condition between 'joinRoom' response and 'onParticipantPublished' notification\n        /**\n         * @hidden\n         */\n        _this.remoteStreamsCreated = new Map();\n        /**\n         * @hidden\n         */\n        _this.remoteConnections = new Map();\n        platform = Platform_1.PlatformUtils.getInstance();\n        _this.openvidu = openvidu;\n        return _this;\n    }\n    /**\n     * Connects to the session using `token`. Parameter `metadata` allows you to pass extra data to share with other users when\n     * they receive `streamCreated` event. The structure of `metadata` string is up to you (maybe some standardized format\n     * as JSON or XML is a good idea).\n     *\n     * This metadata is not considered secure, as it is generated in the client side. To pass secure data, add it as a parameter in the\n     * token generation operation (through the API REST, openvidu-java-client or openvidu-node-client).\n     *\n     * Only after the returned Promise is successfully resolved {@link Session.connection} object will be available and properly defined.\n     *\n     * #### Events dispatched\n     *\n     * The {@link Session} object of the local participant will first dispatch one or more `connectionCreated` events upon successful termination of this method:\n     * - First one for your own local Connection object, so you can retrieve {@link Session.connection} property.\n     * - Then one for each remote Connection previously connected to the Session, if any. Any other remote user connecting to the Session after you have\n     * successfully connected will also dispatch a `connectionCreated` event when they do so.\n     *\n     * The {@link Session} object of the local participant will also dispatch a `streamCreated` event for each remote active {@link Publisher} that was already streaming\n     * when connecting, just after dispatching all remote `connectionCreated` events.\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `connectionCreated` event.\n     *\n     * See {@link ConnectionEvent} and {@link StreamEvent} to learn more.\n     *\n     * @returns A Promise to which you must subscribe that is resolved if the the connection to the Session was successful and rejected with an Error object if not\n     *\n     */\n    Session.prototype.connect = function (token, metadata) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.processToken(token);\n            if (_this.openvidu.checkSystemRequirements()) {\n                // Early configuration to deactivate automatic subscription to streams\n                _this.options = {\n                    sessionId: _this.sessionId,\n                    participantId: token,\n                    metadata: !!metadata ? _this.stringClientMetadata(metadata) : ''\n                };\n                _this.connectAux(token)\n                    .then(function () { return resolve(); })\n                    .catch(function (error) { return reject(error); });\n            }\n            else {\n                return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.BROWSER_NOT_SUPPORTED, 'Browser ' +\n                    platform.getName() +\n                    ' (version ' +\n                    platform.getVersion() +\n                    ') for ' +\n                    platform.getFamily() +\n                    ' is not supported in OpenVidu'));\n            }\n        });\n    };\n    /**\n     * Leaves the session, destroying all streams and deleting the user as a participant.\n     *\n     * #### Events dispatched\n     *\n     * The {@link Session} object of the local participant will dispatch a `sessionDisconnected` event.\n     * This event will automatically unsubscribe the leaving participant from every Subscriber object of the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n     * and also deletes any HTML video element associated to each Subscriber (only those [created by OpenVidu Browser](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)).\n     * For every video removed, each Subscriber object will dispatch a `videoElementDestroyed` event.\n     * Call `event.preventDefault()` upon event `sessionDisconnected` to avoid this behavior and take care of disposing and cleaning all the Subscriber objects yourself.\n     * See {@link SessionDisconnectedEvent} and {@link VideoElementEvent} to learn more.\n     *\n     * The {@link Publisher} object of the local participant will dispatch a `streamDestroyed` event if there is a {@link Publisher} object publishing to the session.\n     * This event will automatically stop all media tracks and delete any HTML video element associated to it (only those [created by OpenVidu Browser](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)).\n     * For every video removed, the Publisher object will dispatch a `videoElementDestroyed` event.\n     * Call `event.preventDefault()` upon event `streamDestroyed` if you want to clean the Publisher object on your own or re-publish it in a different Session (to do so it is a mandatory requirement to call `Session.unpublish()`\n     * or/and `Session.disconnect()` in the previous session). See {@link StreamEvent} and {@link VideoElementEvent} to learn more.\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `streamDestroyed` event if the disconnected participant was publishing.\n     * This event will automatically unsubscribe the Subscriber object from the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n     * and also deletes any HTML video element associated to that Subscriber (only those [created by OpenVidu Browser](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)).\n     * For every video removed, the Subscriber object will dispatch a `videoElementDestroyed` event.\n     * Call `event.preventDefault()` upon event `streamDestroyed` to avoid this default behavior and take care of disposing and cleaning the Subscriber object yourself.\n     * See {@link StreamEvent} and {@link VideoElementEvent} to learn more.\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `connectionDestroyed` event in any case. See {@link ConnectionEvent} to learn more.\n     */\n    Session.prototype.disconnect = function () {\n        this.leave(false, 'disconnect');\n    };\n    /**\n     * Subscribes to a `stream`, adding a new HTML video element to DOM with `subscriberProperties` settings. This method is usually called in the callback of `streamCreated` event.\n     *\n     * #### Events dispatched\n     *\n     * The {@link Subscriber} object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM (only if you\n     * [let OpenVidu take care of the video players](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)). See {@link VideoElementEvent} to learn more.\n     *\n     * The {@link Subscriber} object will dispatch a `streamPlaying` event once the remote stream starts playing. See {@link StreamManagerEvent} to learn more.\n     *\n     * @param stream Stream object to subscribe to\n     * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Subscriber will be inserted (see {@link SubscriberProperties.insertMode}). If *null* or *undefined* no default video will be created for this Subscriber.\n     * You can always call method {@link Subscriber.addVideoElement} or {@link Subscriber.createVideoElement} to manage the video elements on your own (see [Manage video players](/en/stable/cheatsheet/manage-videos) section)\n     * @param completionHandler `error` parameter is null if `subscribe` succeeds, and is defined if it fails.\n     */\n    Session.prototype.subscribe = function (stream, targetElement, param3, param4) {\n        var properties = {};\n        if (!!param3 && typeof param3 !== 'function') {\n            properties = {\n                insertMode: typeof param3.insertMode !== 'undefined'\n                    ? typeof param3.insertMode === 'string'\n                        ? VideoInsertMode_1.VideoInsertMode[param3.insertMode]\n                        : properties.insertMode\n                    : VideoInsertMode_1.VideoInsertMode.APPEND,\n                subscribeToAudio: typeof param3.subscribeToAudio !== 'undefined' ? param3.subscribeToAudio : true,\n                subscribeToVideo: typeof param3.subscribeToVideo !== 'undefined' ? param3.subscribeToVideo : true\n            };\n        }\n        else {\n            properties = {\n                insertMode: VideoInsertMode_1.VideoInsertMode.APPEND,\n                subscribeToAudio: true,\n                subscribeToVideo: true\n            };\n        }\n        var completionHandler = undefined;\n        if (!!param3 && typeof param3 === 'function') {\n            completionHandler = param3;\n        }\n        else if (!!param4) {\n            completionHandler = param4;\n        }\n        if (!this.sessionConnected()) {\n            if (completionHandler !== undefined) {\n                completionHandler(this.notConnectedError());\n            }\n            throw this.notConnectedError();\n        }\n        logger.info('Subscribing to ' + stream.connection.connectionId);\n        stream\n            .subscribe()\n            .then(function () {\n            logger.info('Subscribed correctly to ' + stream.connection.connectionId);\n            if (completionHandler !== undefined) {\n                completionHandler(undefined);\n            }\n        })\n            .catch(function (error) {\n            if (completionHandler !== undefined) {\n                completionHandler(error);\n            }\n        });\n        var subscriber = new Subscriber_1.Subscriber(stream, targetElement, properties);\n        if (!!subscriber.targetElement) {\n            stream.streamManager.createVideoElement(subscriber.targetElement, properties.insertMode);\n        }\n        return subscriber;\n    };\n    Session.prototype.subscribeAsync = function (stream, targetElement, properties) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                return reject(_this.notConnectedError());\n            }\n            var subscriber;\n            var callback = function (error) {\n                if (!!error) {\n                    return reject(error);\n                }\n                else {\n                    return resolve(subscriber);\n                }\n            };\n            if (!!properties) {\n                subscriber = _this.subscribe(stream, targetElement, properties, callback);\n            }\n            else {\n                subscriber = _this.subscribe(stream, targetElement, callback);\n            }\n        });\n    };\n    /**\n     * Unsubscribes from `subscriber`, automatically removing its associated HTML video elements.\n     *\n     * #### Events dispatched\n     *\n     * The {@link Subscriber} object will dispatch a `videoElementDestroyed` event for each video associated to it that was removed from DOM.\n     * Only videos [created by OpenVidu Browser](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)) will be automatically removed\n     *\n     * See {@link VideoElementEvent} to learn more\n     */\n    Session.prototype.unsubscribe = function (subscriber) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                return reject(_this.notConnectedError());\n            }\n            else {\n                var connectionId_1 = subscriber.stream.connection.connectionId;\n                logger.info('Unsubscribing from ' + connectionId_1);\n                _this.openvidu.sendRequest('unsubscribeFromVideo', { sender: subscriber.stream.connection.connectionId }, function (error, response) {\n                    if (error) {\n                        logger.error('Error unsubscribing from ' + connectionId_1);\n                        return reject(error);\n                    }\n                    else {\n                        logger.info('Unsubscribed correctly from ' + connectionId_1);\n                        subscriber.stream.streamManager.removeAllVideos();\n                        subscriber.stream.disposeWebRtcPeer();\n                        subscriber.stream.disposeMediaStream();\n                        return resolve();\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Publishes to the Session the Publisher object\n     *\n     * #### Events dispatched\n     *\n     * The local {@link Publisher} object will dispatch a `streamCreated` event upon successful termination of this method. See {@link StreamEvent} to learn more.\n     *\n     * The local {@link Publisher} object will dispatch a `streamPlaying` once the media stream starts playing. See {@link StreamManagerEvent} to learn more.\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `streamCreated` event so they can subscribe to it. See {@link StreamEvent} to learn more.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved only after the publisher was successfully published and rejected with an Error object if not\n     */\n    Session.prototype.publish = function (publisher) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                return reject(_this.notConnectedError());\n            }\n            publisher.session = _this;\n            publisher.stream.session = _this;\n            if (!publisher.stream.publishedOnce) {\n                // 'Session.unpublish(Publisher)' has NOT been called\n                _this.connection.addStream(publisher.stream);\n                publisher.stream\n                    .publish()\n                    .then(function () {\n                    _this.sendVideoData(publisher, 8, true, 5);\n                    return resolve();\n                })\n                    .catch(function (error) { return reject(error); });\n            }\n            else {\n                // 'Session.unpublish(Publisher)' has been called. Must initialize again Publisher\n                publisher\n                    .initialize()\n                    .then(function () {\n                    _this.connection.addStream(publisher.stream);\n                    publisher.reestablishStreamPlayingEvent();\n                    publisher.stream\n                        .publish()\n                        .then(function () {\n                        _this.sendVideoData(publisher, 8, true, 5);\n                        return resolve();\n                    })\n                        .catch(function (error) { return reject(error); });\n                })\n                    .catch(function (error) { return reject(error); });\n            }\n        });\n    };\n    /**\n     * Unpublishes from the Session the Publisher object.\n     *\n     * #### Events dispatched\n     *\n     * The {@link Publisher} object of the local participant will dispatch a `streamDestroyed` event.\n     * This event will automatically stop all media tracks and delete any HTML video element associated to this Publisher\n     * (only those videos [created by OpenVidu Browser](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)).\n     * For every video removed, the Publisher object will dispatch a `videoElementDestroyed` event.\n     * Call `event.preventDefault()` upon event `streamDestroyed` if you want to clean the Publisher object on your own or re-publish it in a different Session.\n     *\n     * The {@link Session} object of every other participant connected to the session will dispatch a `streamDestroyed` event.\n     * This event will automatically unsubscribe the Subscriber object from the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks) and\n     * delete any HTML video element associated to it (only those [created by OpenVidu Browser](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)).\n     * For every video removed, the Subscriber object will dispatch a `videoElementDestroyed` event.\n     * Call `event.preventDefault()` upon event `streamDestroyed` to avoid this default behavior and take care of disposing and cleaning the Subscriber object on your own.\n     *\n     * See {@link StreamEvent} and {@link VideoElementEvent} to learn more.\n     */\n    Session.prototype.unpublish = function (publisher) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                throw _this.notConnectedError();\n            }\n            var stream = publisher.stream;\n            if (!stream.connection) {\n                return reject(new Error('The associated Connection object of this Publisher is null'));\n            }\n            else if (stream.connection !== _this.connection) {\n                return reject(new Error('The associated Connection object of this Publisher is not your local Connection.  ' +\n                    \"Only moderators can force unpublish on remote Streams via 'forceUnpublish' method\"));\n            }\n            else {\n                logger.info('Unpublishing local media (' + stream.connection.connectionId + ')');\n                _this.openvidu.sendRequest('unpublishVideo', function (error, response) {\n                    if (error) {\n                        return reject(error);\n                    }\n                    else {\n                        logger.info('Media unpublished correctly');\n                        stream.disposeWebRtcPeer();\n                        if (stream.connection.stream == stream) {\n                            // The Connection.stream may have changed if Session.publish was called with other Publisher\n                            delete stream.connection.stream;\n                        }\n                        var streamEvent = new StreamEvent_1.StreamEvent(true, publisher, 'streamDestroyed', publisher.stream, 'unpublish');\n                        publisher.emitEvent('streamDestroyed', [streamEvent]);\n                        streamEvent.callDefaultBehavior();\n                        return resolve();\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Forces some user to leave the session\n     *\n     * #### Events dispatched\n     *\n     * The behavior is the same as when some user calls {@link Session.disconnect}, but `reason` property in all events will be `\"forceDisconnectByUser\"`.\n     *\n     * The {@link Session} object of every participant will dispatch a `streamDestroyed` event if the evicted user was publishing a stream, with property `reason` set to `\"forceDisconnectByUser\"`.\n     * The {@link Session} object of every participant except the evicted one will dispatch a `connectionDestroyed` event for the evicted user, with property `reason` set to `\"forceDisconnectByUser\"`.\n     *\n     * If any, the {@link Publisher} object of the evicted participant will also dispatch a `streamDestroyed` event with property `reason` set to `\"forceDisconnectByUser\"`.\n     * The {@link Session} object of the evicted participant will dispatch a `sessionDisconnected` event with property `reason` set to `\"forceDisconnectByUser\"`.\n     *\n     * See {@link StreamEvent}, {@link ConnectionEvent} and {@link SessionDisconnectedEvent} to learn more.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved only after the participant has been successfully evicted from the session and rejected with an Error object if not\n     */\n    Session.prototype.forceDisconnect = function (connection) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                return reject(_this.notConnectedError());\n            }\n            logger.info('Forcing disconnect for connection ' + connection.connectionId);\n            _this.openvidu.sendRequest('forceDisconnect', { connectionId: connection.connectionId }, function (error, response) {\n                if (error) {\n                    logger.error('Error forcing disconnect for Connection ' + connection.connectionId, error);\n                    if (error.code === 401) {\n                        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to force a disconnection\"));\n                    }\n                    else {\n                        return reject(error);\n                    }\n                }\n                else {\n                    logger.info('Forcing disconnect correctly for Connection ' + connection.connectionId);\n                    return resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Forces some user to unpublish a Stream\n     *\n     * #### Events dispatched\n     *\n     * The behavior is the same as when some user calls {@link Session.unpublish}, but `reason` property in all events will be `\"forceUnpublishByUser\"`\n     *\n     * The {@link Session} object of every participant will dispatch a `streamDestroyed` event with property `reason` set to `\"forceDisconnectByUser\"`\n     *\n     * The {@link Publisher} object of the affected participant will also dispatch a `streamDestroyed` event with property `reason` set to `\"forceDisconnectByUser\"`\n     *\n     * See {@link StreamEvent} to learn more.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved only after the remote Stream has been successfully unpublished from the session and rejected with an Error object if not\n     */\n    Session.prototype.forceUnpublish = function (stream) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                return reject(_this.notConnectedError());\n            }\n            logger.info('Forcing unpublish for stream ' + stream.streamId);\n            _this.openvidu.sendRequest('forceUnpublish', { streamId: stream.streamId }, function (error, response) {\n                if (error) {\n                    logger.error('Error forcing unpublish for Stream ' + stream.streamId, error);\n                    if (error.code === 401) {\n                        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to force an unpublishing\"));\n                    }\n                    else {\n                        return reject(error);\n                    }\n                }\n                else {\n                    logger.info('Forcing unpublish correctly for Stream ' + stream.streamId);\n                    return resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Sends one signal. `signal` object has the following optional properties:\n     * ```json\n     * {data:string, to:Connection[], type:string}\n     * ```\n     * All users subscribed to that signal (`session.on('signal:type', ...)` or `session.on('signal', ...)` for all signals) and whose Connection objects are in `to` array will receive it. Their local\n     * Session objects will dispatch a `signal` or `signal:type` event. See {@link SignalEvent} to learn more.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the message successfully reached openvidu-server and rejected with an Error object if not. _This doesn't\n     * mean that openvidu-server could resend the message to all the listed receivers._\n     */\n    Session.prototype.signal = function (signal) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (!_this.sessionConnected()) {\n                return reject(_this.notConnectedError());\n            }\n            var signalMessage = {};\n            if (signal.to && signal.to.length > 0) {\n                var connectionIds_1 = [];\n                signal.to.forEach(function (connection) {\n                    if (!!connection.connectionId) {\n                        connectionIds_1.push(connection.connectionId);\n                    }\n                });\n                signalMessage['to'] = connectionIds_1;\n            }\n            else {\n                signalMessage['to'] = [];\n            }\n            signalMessage['data'] = signal.data ? signal.data : '';\n            var typeAux = signal.type ? signal.type : 'signal';\n            if (!!typeAux) {\n                if (typeAux.substring(0, 7) !== 'signal:') {\n                    typeAux = 'signal:' + typeAux;\n                }\n            }\n            signalMessage['type'] = typeAux;\n            _this.openvidu.sendRequest('sendMessage', {\n                message: JSON.stringify(signalMessage)\n            }, function (error, response) {\n                if (!!error) {\n                    return reject(error);\n                }\n                else {\n                    return resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Subscribe to the Speech-To-Text events for this {@link Stream}. The Session object will emit {@link SpeechToTextEvent} for the Stream\n     * when speech is detected in its audio track.\n     *\n     * @param stream - The Stream for which you want to start receiving {@link SpeechToTextEvent}.\n     * @param lang - The language of the Stream's audio track. It must be a valid [BCP-47](https://tools.ietf.org/html/bcp47) language tag like \"en-US\" or \"es-ES\".\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the speech-to-text subscription\n     * was successful and rejected with an Error object if not.\n     */\n    Session.prototype.subscribeToSpeechToText = function (stream, lang) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.openvidu.sendRequest('subscribeToSpeechToText', {\n                connectionId: stream.connection.connectionId,\n                lang: lang\n            }, function (error, response) {\n                if (!!error) {\n                    return reject(error);\n                }\n                else {\n                    return resolve();\n                }\n            });\n        });\n    };\n    /**\n     * Unsubscribe from the Speech-To-Text events for this {@link Stream}.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the speech-to-text subscription\n     * was successful and rejected with an Error object if not.\n     */\n    Session.prototype.unsubscribeFromSpeechToText = function (stream) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.openvidu.sendRequest('unsubscribeFromSpeechToText', {\n                connectionId: stream.connection.connectionId\n            }, function (error, response) {\n                if (!!error) {\n                    return reject(error);\n                }\n                else {\n                    return resolve();\n                }\n            });\n        });\n    };\n    /**\n     * See {@link EventDispatcher.on}\n     */\n    Session.prototype.on = function (type, handler) {\n        var _a, _b, _c, _d;\n        _super.prototype.onAux.call(this, type, \"Event '\" + type + \"' triggered by 'Session'\", handler);\n        if (type === 'publisherStartSpeaking') {\n            // If there are already available remote streams with audio, enable hark 'speaking' event in all of them\n            this.remoteConnections.forEach(function (remoteConnection) {\n                var _a;\n                if (!!((_a = remoteConnection.stream) === null || _a === void 0 ? void 0 : _a.hasAudio)) {\n                    remoteConnection.stream.enableHarkSpeakingEvent();\n                }\n            });\n            if (!!((_b = (_a = this.connection) === null || _a === void 0 ? void 0 : _a.stream) === null || _b === void 0 ? void 0 : _b.hasAudio)) {\n                // If connected to the Session and publishing with audio, also enable hark 'speaking' event for the Publisher\n                this.connection.stream.enableHarkSpeakingEvent();\n            }\n        }\n        if (type === 'publisherStopSpeaking') {\n            // If there are already available remote streams with audio, enable hark 'stopped_speaking' event in all of them\n            this.remoteConnections.forEach(function (remoteConnection) {\n                var _a;\n                if (!!((_a = remoteConnection.stream) === null || _a === void 0 ? void 0 : _a.hasAudio)) {\n                    remoteConnection.stream.enableHarkStoppedSpeakingEvent();\n                }\n            });\n            if (!!((_d = (_c = this.connection) === null || _c === void 0 ? void 0 : _c.stream) === null || _d === void 0 ? void 0 : _d.hasAudio)) {\n                // If connected to the Session and publishing with audio, also enable hark 'stopped_speaking' event for the Publisher\n                this.connection.stream.enableHarkStoppedSpeakingEvent();\n            }\n        }\n        return this;\n    };\n    /**\n     * See {@link EventDispatcher.once}\n     */\n    Session.prototype.once = function (type, handler) {\n        var _a, _b, _c, _d;\n        _super.prototype.onceAux.call(this, type, \"Event '\" + type + \"' triggered once by 'Session'\", handler);\n        if (type === 'publisherStartSpeaking') {\n            // If there are already available remote streams with audio, enable hark 'speaking' event (once) in all of them once\n            this.remoteConnections.forEach(function (remoteConnection) {\n                var _a;\n                if (!!((_a = remoteConnection.stream) === null || _a === void 0 ? void 0 : _a.hasAudio)) {\n                    remoteConnection.stream.enableOnceHarkSpeakingEvent();\n                }\n            });\n            if (!!((_b = (_a = this.connection) === null || _a === void 0 ? void 0 : _a.stream) === null || _b === void 0 ? void 0 : _b.hasAudio)) {\n                // If connected to the Session and publishing with audio, also enable hark 'speaking' event (once) for the Publisher\n                this.connection.stream.enableOnceHarkSpeakingEvent();\n            }\n        }\n        if (type === 'publisherStopSpeaking') {\n            // If there are already available remote streams with audio, enable hark 'stopped_speaking' event (once) in all of them once\n            this.remoteConnections.forEach(function (remoteConnection) {\n                var _a;\n                if (!!((_a = remoteConnection.stream) === null || _a === void 0 ? void 0 : _a.hasAudio)) {\n                    remoteConnection.stream.enableOnceHarkStoppedSpeakingEvent();\n                }\n            });\n            if (!!((_d = (_c = this.connection) === null || _c === void 0 ? void 0 : _c.stream) === null || _d === void 0 ? void 0 : _d.hasAudio)) {\n                // If connected to the Session and publishing with audio, also enable hark 'stopped_speaking' event (once) for the Publisher\n                this.connection.stream.enableOnceHarkStoppedSpeakingEvent();\n            }\n        }\n        return this;\n    };\n    /**\n     * See {@link EventDispatcher.off}\n     */\n    Session.prototype.off = function (type, handler) {\n        var _this = this;\n        var _a, _b, _c, _d;\n        _super.prototype.offAux.call(this, type, handler);\n        if (type === 'publisherStartSpeaking') {\n            // Check if Session object still has some listener for the event\n            if (!this.anySpeechEventListenerEnabled('publisherStartSpeaking', false)) {\n                this.remoteConnections.forEach(function (remoteConnection) {\n                    var _a;\n                    if (!!((_a = remoteConnection.stream) === null || _a === void 0 ? void 0 : _a.streamManager)) {\n                        // Check if Subscriber object still has some listener for the event\n                        if (!_this.anySpeechEventListenerEnabled('publisherStartSpeaking', false, remoteConnection.stream.streamManager)) {\n                            remoteConnection.stream.disableHarkSpeakingEvent(false);\n                        }\n                    }\n                });\n                if (!!((_b = (_a = this.connection) === null || _a === void 0 ? void 0 : _a.stream) === null || _b === void 0 ? void 0 : _b.streamManager)) {\n                    // Check if Publisher object still has some listener for the event\n                    if (!this.anySpeechEventListenerEnabled('publisherStartSpeaking', false, this.connection.stream.streamManager)) {\n                        this.connection.stream.disableHarkSpeakingEvent(false);\n                    }\n                }\n            }\n        }\n        if (type === 'publisherStopSpeaking') {\n            // Check if Session object still has some listener for the event\n            if (!this.anySpeechEventListenerEnabled('publisherStopSpeaking', false)) {\n                this.remoteConnections.forEach(function (remoteConnection) {\n                    var _a;\n                    if (!!((_a = remoteConnection.stream) === null || _a === void 0 ? void 0 : _a.streamManager)) {\n                        // Check if Subscriber object still has some listener for the event\n                        if (!_this.anySpeechEventListenerEnabled('publisherStopSpeaking', false, remoteConnection.stream.streamManager)) {\n                            remoteConnection.stream.disableHarkStoppedSpeakingEvent(false);\n                        }\n                    }\n                });\n                if (!!((_d = (_c = this.connection) === null || _c === void 0 ? void 0 : _c.stream) === null || _d === void 0 ? void 0 : _d.streamManager)) {\n                    // Check if Publisher object still has some listener for the event\n                    if (!this.anySpeechEventListenerEnabled('publisherStopSpeaking', false, this.connection.stream.streamManager)) {\n                        this.connection.stream.disableHarkStoppedSpeakingEvent(false);\n                    }\n                }\n            }\n        }\n        return this;\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    Session.prototype.onParticipantJoined = function (event) {\n        var _this = this;\n        // Connection shouldn't exist\n        this.getConnection(event.id, '')\n            .then(function (connection) {\n            logger.warn('Connection ' + connection.connectionId + ' already exists in connections list');\n        })\n            .catch(function (openViduError) {\n            var connection = new Connection_1.Connection(_this, event);\n            _this.remoteConnections.set(event.id, connection);\n            _this.ee.emitEvent('connectionCreated', [new ConnectionEvent_1.ConnectionEvent(false, _this, 'connectionCreated', connection, '')]);\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onParticipantLeft = function (event) {\n        var _this = this;\n        this.getRemoteConnection(event.connectionId, 'onParticipantLeft')\n            .then(function (connection) {\n            if (!!connection.stream) {\n                var stream = connection.stream;\n                var streamEvent = new StreamEvent_1.StreamEvent(true, _this, 'streamDestroyed', stream, event.reason);\n                _this.ee.emitEvent('streamDestroyed', [streamEvent]);\n                streamEvent.callDefaultBehavior();\n                _this.remoteStreamsCreated.delete(stream.streamId);\n            }\n            connection.dispose();\n            _this.remoteConnections.delete(connection.connectionId);\n            _this.ee.emitEvent('connectionDestroyed', [\n                new ConnectionEvent_1.ConnectionEvent(false, _this, 'connectionDestroyed', connection, event.reason)\n            ]);\n        })\n            .catch(function (openViduError) {\n            logger.error(openViduError);\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onParticipantPublished = function (event) {\n        var _this = this;\n        var afterConnectionFound = function (connection) {\n            _this.remoteConnections.set(connection.connectionId, connection);\n            if (!_this.remoteStreamsCreated.get(connection.stream.streamId)) {\n                // Avoid race condition between stream.subscribe() in \"onParticipantPublished\" and in \"joinRoom\" rpc callback\n                // This condition is false if openvidu-server sends \"participantPublished\" event to a subscriber participant that has\n                // already subscribed to certain stream in the callback of \"joinRoom\" method\n                _this.ee.emitEvent('streamCreated', [new StreamEvent_1.StreamEvent(false, _this, 'streamCreated', connection.stream, '')]);\n            }\n            _this.remoteStreamsCreated.set(connection.stream.streamId, true);\n        };\n        // Get the existing Connection created on 'onParticipantJoined' for\n        // existing participants or create a new one for new participants\n        var connection;\n        this.getRemoteConnection(event.id, 'onParticipantPublished')\n            .then(function (con) {\n            // Update existing Connection\n            connection = con;\n            event.metadata = con.data;\n            connection.remoteOptions = event;\n            connection.initRemoteStreams(event.streams);\n            afterConnectionFound(connection);\n        })\n            .catch(function (openViduError) {\n            // Create new Connection\n            connection = new Connection_1.Connection(_this, event);\n            afterConnectionFound(connection);\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onParticipantUnpublished = function (event) {\n        var _this = this;\n        if (event.connectionId === this.connection.connectionId) {\n            // Your stream has been forcedly unpublished from the session\n            this.stopPublisherStream(event.reason);\n        }\n        else {\n            this.getRemoteConnection(event.connectionId, 'onParticipantUnpublished')\n                .then(function (connection) {\n                var streamEvent = new StreamEvent_1.StreamEvent(true, _this, 'streamDestroyed', connection.stream, event.reason);\n                _this.ee.emitEvent('streamDestroyed', [streamEvent]);\n                streamEvent.callDefaultBehavior();\n                // Deleting the remote stream if it exists\n                if (connection.stream != null) {\n                    var streamId = connection.stream.streamId;\n                    _this.remoteStreamsCreated.delete(streamId);\n                    connection.removeStream();\n                }\n            })\n                .catch(function (openViduError) {\n                logger.error(openViduError);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onParticipantEvicted = function (event) {\n        if (event.connectionId === this.connection.connectionId) {\n            // You have been evicted from the session\n            if (!!this.sessionId && !this.connection.disposed) {\n                this.leave(true, event.reason);\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onNewMessage = function (event) {\n        var _this = this;\n        logger.info('New signal: ' + JSON.stringify(event));\n        var strippedType = !!event.type ? event.type.replace(/^(signal:)/, '') : undefined;\n        if (!!event.from) {\n            // Signal sent by other client\n            this.getConnection(event.from, \"Connection '\" +\n                event.from +\n                \"' unknown when 'onNewMessage'. Existing remote connections: \" +\n                JSON.stringify(this.remoteConnections.keys()) +\n                '. Existing local connection: ' +\n                this.connection.connectionId)\n                .then(function (connection) {\n                _this.ee.emitEvent('signal', [new SignalEvent_1.SignalEvent(_this, strippedType, event.data, connection)]);\n                if (!!event.type && event.type !== 'signal') {\n                    _this.ee.emitEvent(event.type, [new SignalEvent_1.SignalEvent(_this, strippedType, event.data, connection)]);\n                }\n            })\n                .catch(function (openViduError) {\n                logger.error(openViduError);\n            });\n        }\n        else {\n            // Signal sent by server\n            this.ee.emitEvent('signal', [new SignalEvent_1.SignalEvent(this, strippedType, event.data, undefined)]);\n            if (!!event.type && event.type !== 'signal') {\n                this.ee.emitEvent(event.type, [new SignalEvent_1.SignalEvent(this, strippedType, event.data, undefined)]);\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onStreamPropertyChanged = function (event) {\n        var _this = this;\n        var callback = function (connection) {\n            var _a, _b;\n            if (!!connection.stream && connection.stream.streamId === event.streamId) {\n                var stream = connection.stream;\n                var oldValue = void 0;\n                switch (event.property) {\n                    case 'audioActive':\n                        oldValue = stream.audioActive;\n                        event.newValue = event.newValue === 'true';\n                        stream.audioActive = event.newValue;\n                        break;\n                    case 'videoActive':\n                        oldValue = stream.videoActive;\n                        event.newValue = event.newValue === 'true';\n                        stream.videoActive = event.newValue;\n                        var videoTrack = (_b = (_a = stream === null || stream === void 0 ? void 0 : stream.getMediaStream()) === null || _a === void 0 ? void 0 : _a.getVideoTracks()) === null || _b === void 0 ? void 0 : _b[0];\n                        if (videoTrack && !videoTrack.enabled && stream.videoActive) {\n                            videoTrack.enabled = true;\n                        }\n                        break;\n                    case 'videoTrack':\n                        event.newValue = JSON.parse(event.newValue);\n                        break;\n                    case 'audioTrack':\n                        event.newValue = JSON.parse(event.newValue);\n                        break;\n                    case 'videoDimensions':\n                        oldValue = stream.videoDimensions;\n                        event.newValue = JSON.parse(JSON.parse(event.newValue));\n                        stream.videoDimensions = event.newValue;\n                        break;\n                    case 'filter':\n                        oldValue = stream.filter;\n                        event.newValue = Object.keys(event.newValue).length > 0 ? event.newValue : undefined;\n                        if (event.newValue !== undefined) {\n                            stream.filter = new Filter_1.Filter(event.newValue.type, event.newValue.options);\n                            stream.filter.stream = stream;\n                            if (event.newValue.lastExecMethod) {\n                                stream.filter.lastExecMethod = event.newValue.lastExecMethod;\n                            }\n                        }\n                        else {\n                            delete stream.filter;\n                        }\n                        event.newValue = stream.filter;\n                        break;\n                }\n                _this.ee.emitEvent('streamPropertyChanged', [\n                    new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this, stream, event.property, event.newValue, oldValue, event.reason)\n                ]);\n                if (!!stream.streamManager) {\n                    stream.streamManager.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(stream.streamManager, stream, event.property, event.newValue, oldValue, event.reason)\n                    ]);\n                }\n            }\n            else {\n                logger.error(\"No stream with streamId '\" +\n                    event.streamId +\n                    \"' found for connection '\" +\n                    event.connectionId +\n                    \"' on 'streamPropertyChanged' event\");\n            }\n        };\n        if (event.connectionId === this.connection.connectionId) {\n            // Your stream has been forcedly changed (filter feature)\n            callback(this.connection);\n        }\n        else {\n            this.getRemoteConnection(event.connectionId, 'onStreamPropertyChanged')\n                .then(function (connection) {\n                callback(connection);\n            })\n                .catch(function (openViduError) {\n                logger.error(openViduError);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onConnectionPropertyChanged = function (event) {\n        var oldValue;\n        switch (event.property) {\n            case 'role':\n                oldValue = this.connection.role.slice();\n                this.connection.role = event.newValue;\n                this.connection.localOptions.role = event.newValue;\n                break;\n            case 'record':\n                oldValue = this.connection.record;\n                event.newValue = event.newValue === 'true';\n                this.connection.record = event.newValue;\n                this.connection.localOptions.record = event.newValue;\n                break;\n        }\n        this.ee.emitEvent('connectionPropertyChanged', [\n            new ConnectionPropertyChangedEvent_1.ConnectionPropertyChangedEvent(this, this.connection, event.property, event.newValue, oldValue)\n        ]);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onNetworkQualityLevelChangedChanged = function (event) {\n        var _this = this;\n        if (event.connectionId === this.connection.connectionId) {\n            this.ee.emitEvent('networkQualityLevelChanged', [\n                new NetworkQualityLevelChangedEvent_1.NetworkQualityLevelChangedEvent(this, event.newValue, event.oldValue, this.connection)\n            ]);\n        }\n        else {\n            this.getConnection(event.connectionId, 'Connection not found for connectionId ' + event.connectionId)\n                .then(function (connection) {\n                _this.ee.emitEvent('networkQualityLevelChanged', [\n                    new NetworkQualityLevelChangedEvent_1.NetworkQualityLevelChangedEvent(_this, event.newValue, event.oldValue, connection)\n                ]);\n            })\n                .catch(function (openViduError) {\n                logger.error(openViduError);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.recvIceCandidate = function (event) {\n        // The event contains fields that can be used to obtain a proper candidate,\n        // using the RTCIceCandidate constructor:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n        var candidateInit = {\n            candidate: event.candidate,\n            sdpMLineIndex: event.sdpMLineIndex,\n            sdpMid: event.sdpMid\n        };\n        var iceCandidate = new RTCIceCandidate(candidateInit);\n        this.getConnection(event.senderConnectionId, 'Connection not found for connectionId ' +\n            event.senderConnectionId +\n            ' owning endpoint ' +\n            event.endpointName +\n            '. Ice candidate will be ignored: ' +\n            iceCandidate)\n            .then(function (connection) {\n            var stream = connection.stream;\n            stream\n                .getWebRtcPeer()\n                .addIceCandidate(iceCandidate)\n                .catch(function (error) {\n                logger.error('Error adding candidate for ' + stream.streamId + ' stream of endpoint ' + event.endpointName + ': ' + error);\n            });\n        })\n            .catch(function (openViduError) {\n            logger.error(openViduError);\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onSessionClosed = function (msg) {\n        logger.info('Session closed: ' + JSON.stringify(msg));\n        var s = msg.sessionId;\n        if (s !== undefined) {\n            this.ee.emitEvent('session-closed', [\n                {\n                    session: s\n                }\n            ]);\n        }\n        else {\n            logger.warn('Session undefined on session closed', msg);\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onLostConnection = function (reason) {\n        logger.warn('Lost connection in Session ' + this.sessionId);\n        if (!!this.sessionId && !!this.connection && !this.connection.disposed) {\n            this.leave(true, reason);\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onRecoveredConnection = function () {\n        logger.info('Recovered connection in Session ' + this.sessionId);\n        this.reconnectBrokenStreams();\n        this.ee.emitEvent('reconnected', []);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onMediaError = function (event) {\n        logger.error('Media error: ' + JSON.stringify(event));\n        var err = event.error;\n        if (err) {\n            this.ee.emitEvent('error-media', [{ error: err }]);\n        }\n        else {\n            logger.warn('Received undefined media error:', event);\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onRecordingStarted = function (event) {\n        this.ee.emitEvent('recordingStarted', [new RecordingEvent_1.RecordingEvent(this, 'recordingStarted', event.id, event.name)]);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onRecordingStopped = function (event) {\n        this.ee.emitEvent('recordingStopped', [new RecordingEvent_1.RecordingEvent(this, 'recordingStopped', event.id, event.name, event.reason)]);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onBroadcastStarted = function () {\n        this.ee.emitEvent('broadcastStarted', []);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onBroadcastStopped = function () {\n        this.ee.emitEvent('broadcastStopped', []);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onFilterEventDispatched = function (event) {\n        var _this = this;\n        var connectionId = event.connectionId;\n        this.getConnection(connectionId, 'No connection found for connectionId ' + connectionId).then(function (connection) {\n            logger.info(\"Filter event of type \\\"\".concat(event.eventType, \"\\\" dispatched\"));\n            var stream = connection.stream;\n            if (!stream || !stream.filter) {\n                return logger.error(\"Filter event of type \\\"\".concat(event.eventType, \"\\\" dispatched for stream \").concat(stream.streamId, \" but there is no \").concat(!stream ? 'stream' : 'filter', \" defined\"));\n            }\n            var eventHandler = stream.filter.handlers.get(event.eventType);\n            if (!eventHandler || typeof eventHandler !== 'function') {\n                var actualHandlers = Array.from(stream.filter.handlers.keys());\n                return logger.error(\"Filter event of type \\\"\".concat(event.eventType, \"\\\" not handled or not a function! Active filter events: \").concat(actualHandlers.join(',')));\n            }\n            else {\n                eventHandler.call(_this, new FilterEvent_1.FilterEvent(stream.filter, event.eventType, event.data));\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onForciblyReconnectSubscriber = function (event) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.getRemoteConnection(event.connectionId, 'onForciblyReconnectSubscriber')\n                .then(function (connection) {\n                if (!!connection.stream && connection.stream.streamId === event.streamId) {\n                    var stream_1 = connection.stream;\n                    if (stream_1.setupReconnectionEventEmitter(resolve, reject)) {\n                        // Ongoing reconnection\n                        // Wait for the event emitter to be free (with success or error) and call the method again\n                        if (stream_1.reconnectionEventEmitter['onForciblyReconnectSubscriberLastEvent'] != null) {\n                            // Two or more onForciblyReconnectSubscriber events were received while a reconnection process\n                            // of the subscriber was already taking place. Always use the last one to retry the re-subscription\n                            // process, as that SDP offer will be the only one available at the server side. Ignore previous ones\n                            stream_1.reconnectionEventEmitter['onForciblyReconnectSubscriberLastEvent'] = event;\n                            return reject('Ongoing forced subscriber reconnection');\n                        }\n                        else {\n                            // One onForciblyReconnectSubscriber even has been received while a reconnection process\n                            // of the subscriber was already taking place. Set up a listener to wait for it to retry the\n                            // forced reconnection process\n                            stream_1.reconnectionEventEmitter['onForciblyReconnectSubscriberLastEvent'] = event;\n                            var callback_1 = function () {\n                                var eventAux = stream_1.reconnectionEventEmitter['onForciblyReconnectSubscriberLastEvent'];\n                                delete stream_1.reconnectionEventEmitter['onForciblyReconnectSubscriberLastEvent'];\n                                _this.onForciblyReconnectSubscriber(eventAux);\n                            };\n                            stream_1.reconnectionEventEmitter.once('success', function () {\n                                callback_1();\n                            });\n                            stream_1.reconnectionEventEmitter.once('error', function () {\n                                callback_1();\n                            });\n                        }\n                        return;\n                    }\n                    stream_1\n                        .completeWebRtcPeerReceive(true, true, event.sdpOffer)\n                        .then(function () { return stream_1.finalResolveForSubscription(true, resolve); })\n                        .catch(function (error) {\n                        return stream_1.finalRejectForSubscription(true, \"Error while forcibly reconnecting remote stream \".concat(event.streamId, \": \").concat(error.toString()), reject);\n                    });\n                }\n                else {\n                    var errMsg = \"No stream with streamId '\" +\n                        event.streamId +\n                        \"' found for connection '\" +\n                        event.connectionId +\n                        \"' on 'streamPropertyChanged' event\";\n                    logger.error(errMsg);\n                    return reject(errMsg);\n                }\n            })\n                .catch(function (openViduError) {\n                logger.error(openViduError);\n                return reject(openViduError);\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.reconnectBrokenStreams = function () {\n        logger.info('Re-establishing media connections...');\n        var someReconnection = false;\n        // Re-establish Publisher stream\n        if (!!this.connection.stream && this.connection.stream.streamIceConnectionStateBroken()) {\n            logger.warn('Re-establishing Publisher ' + this.connection.stream.streamId);\n            this.connection.stream.initWebRtcPeerSend(true);\n            someReconnection = true;\n        }\n        // Re-establish Subscriber streams\n        this.remoteConnections.forEach(function (remoteConnection) {\n            if (!!remoteConnection.stream && remoteConnection.stream.streamIceConnectionStateBroken()) {\n                logger.warn('Re-establishing Subscriber ' + remoteConnection.stream.streamId);\n                remoteConnection.stream.initWebRtcPeerReceive(true);\n                someReconnection = true;\n            }\n        });\n        if (!someReconnection) {\n            logger.info('There were no media streams in need of a reconnection');\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onSpeechToTextMessage = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var connection, ev;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getConnection(event.connectionId, 'No connection found for connectionId ' + event.connectionId)];\n                    case 1:\n                        connection = _a.sent();\n                        ev = new SpeechToTextEvent_1.SpeechToTextEvent(this, connection, event.text, (event.reason).toLowerCase(), event.raw, event.lang);\n                        this.ee.emitEvent('speechToTextMessage', [ev]);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.onSpeechToTextDisconnected = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.emitEvent('exception', [new ExceptionEvent_1.ExceptionEvent(this, ExceptionEvent_1.ExceptionEventName.SPEECH_TO_TEXT_DISCONNECTED, this, event.message)]);\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.emitEvent = function (type, eventArray) {\n        this.ee.emitEvent(type, eventArray);\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.leave = function (forced, reason) {\n        var _this = this;\n        forced = !!forced;\n        logger.info('Leaving Session (forced=' + forced + ')');\n        this.stopVideoDataIntervals();\n        if (!!this.connection) {\n            if (!this.connection.disposed && !forced) {\n                this.openvidu.sendRequest('leaveRoom', function (error, response) {\n                    if (error) {\n                        logger.error(\"leaveRoom error: \".concat(JSON.stringify(error)));\n                    }\n                    _this.openvidu.closeWs();\n                });\n            }\n            else {\n                this.openvidu.closeWs();\n            }\n            this.stopPublisherStream(reason);\n            if (!this.connection.disposed) {\n                // Make Session object dispatch 'sessionDisconnected' event (if it is not already disposed)\n                var sessionDisconnectEvent = new SessionDisconnectedEvent_1.SessionDisconnectedEvent(this, reason);\n                this.ee.emitEvent('sessionDisconnected', [sessionDisconnectEvent]);\n                sessionDisconnectEvent.callDefaultBehavior();\n            }\n        }\n        else {\n            logger.warn('You were not connected to the session ' + this.sessionId);\n        }\n        logger.flush();\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.initializeParams = function (token) {\n        var joinParams = {\n            token: !!token ? token : '',\n            session: this.sessionId,\n            platform: !!platform.getDescription() ? platform.getDescription() : 'unknown',\n            sdkVersion: this.openvidu.libraryVersion,\n            metadata: !!this.options.metadata ? this.options.metadata : '',\n            secret: this.openvidu.getSecret(),\n            recorder: this.openvidu.getRecorder(),\n            stt: this.openvidu.getStt()\n        };\n        return joinParams;\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.sendVideoData = function (streamManager, intervalSeconds, doInterval, maxLoops) {\n        var _this = this;\n        var _a, _b;\n        if (intervalSeconds === void 0) { intervalSeconds = 1; }\n        if (doInterval === void 0) { doInterval = false; }\n        if (maxLoops === void 0) { maxLoops = 1; }\n        if (platform.isChromeBrowser() ||\n            platform.isChromeMobileBrowser() ||\n            platform.isOperaBrowser() ||\n            platform.isOperaMobileBrowser() ||\n            platform.isEdgeBrowser() ||\n            platform.isEdgeMobileBrowser() ||\n            platform.isElectron() ||\n            (platform.isSafariBrowser() && !platform.isIonicIos()) ||\n            platform.isAndroidBrowser() ||\n            platform.isSamsungBrowser() ||\n            platform.isIonicAndroid() ||\n            platform.isIOSWithSafari()) {\n            var obtainAndSendVideo_1 = function () { return __awaiter(_this, void 0, void 0, function () {\n                var pc, statsMap, arr_1;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            pc = streamManager.stream.getRTCPeerConnection();\n                            if (!(pc.connectionState === 'connected')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, pc.getStats()];\n                        case 1:\n                            statsMap = _a.sent();\n                            arr_1 = [];\n                            statsMap.forEach(function (stats) {\n                                if ('frameWidth' in stats && 'frameHeight' in stats && arr_1.length === 0) {\n                                    arr_1.push(stats);\n                                }\n                            });\n                            if (arr_1.length > 0) {\n                                this.openvidu.sendRequest('videoData', {\n                                    height: arr_1[0].frameHeight,\n                                    width: arr_1[0].frameWidth,\n                                    videoActive: streamManager.stream.videoActive != null ? streamManager.stream.videoActive : false,\n                                    audioActive: streamManager.stream.audioActive != null ? streamManager.stream.audioActive : false\n                                }, function (error, response) {\n                                    if (error) {\n                                        logger.error(\"Error sending 'videoData' event\", error);\n                                    }\n                                });\n                            }\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            }); };\n            if (doInterval) {\n                var loops_1 = 1;\n                this.videoDataInterval = setInterval(function () {\n                    if (loops_1 < maxLoops) {\n                        loops_1++;\n                        obtainAndSendVideo_1();\n                    }\n                    else {\n                        clearInterval(_this.videoDataInterval);\n                    }\n                }, intervalSeconds * 1000);\n            }\n            else {\n                this.videoDataTimeout = setTimeout(obtainAndSendVideo_1, intervalSeconds * 1000);\n            }\n        }\n        else if (platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser() || platform.isIonicIos() || platform.isReactNative()) {\n            // Basic version for Firefox and Ionic iOS. They do not support stats\n            this.openvidu.sendRequest('videoData', {\n                height: ((_a = streamManager.stream.videoDimensions) === null || _a === void 0 ? void 0 : _a.height) || 0,\n                width: ((_b = streamManager.stream.videoDimensions) === null || _b === void 0 ? void 0 : _b.width) || 0,\n                videoActive: streamManager.stream.videoActive != null ? streamManager.stream.videoActive : false,\n                audioActive: streamManager.stream.audioActive != null ? streamManager.stream.audioActive : false\n            }, function (error, response) {\n                if (error) {\n                    logger.error(\"Error sending 'videoData' event\", error);\n                }\n            });\n        }\n        else {\n            logger.error('Browser ' +\n                platform.getName() +\n                ' (version ' +\n                platform.getVersion() +\n                ') for ' +\n                platform.getFamily() +\n                ' is not supported in OpenVidu for Network Quality');\n        }\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.sessionConnected = function () {\n        return this.connection != null;\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.notConnectedError = function () {\n        return new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_NOT_CONNECTED, \"There is no connection to the session. Method 'Session.connect' must be successfully completed first\");\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.anySpeechEventListenerEnabled = function (event, onlyOnce, streamManager) {\n        var handlersInSession = this.ee.getListeners(event);\n        if (onlyOnce) {\n            handlersInSession = handlersInSession.filter(function (h) { return h.once; });\n        }\n        var listenersInSession = handlersInSession.length;\n        if (listenersInSession > 0)\n            return true;\n        var listenersInStreamManager = 0;\n        if (!!streamManager) {\n            var handlersInStreamManager = streamManager.ee.getListeners(event);\n            if (onlyOnce) {\n                handlersInStreamManager = handlersInStreamManager.filter(function (h) { return h.once; });\n            }\n            listenersInStreamManager = handlersInStreamManager.length;\n        }\n        return listenersInStreamManager > 0;\n    };\n    /**\n     * @hidden\n     */\n    Session.prototype.getTokenParams = function (token) {\n        var match = token.match(/^(wss?)\\:\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)([\\/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);\n        if (!!match) {\n            var url = {\n                protocol: match[1],\n                host: match[2],\n                hostname: match[3],\n                port: match[4],\n                pathname: match[5],\n                search: match[6],\n                hash: match[7]\n            };\n            var params = token.split('?');\n            var queryParams = decodeURI(params[1])\n                .split('&')\n                .map(function (param) { return param.split('='); })\n                .reduce(function (values, _a) {\n                var key = _a[0], value = _a[1];\n                values[key] = value;\n                return values;\n            }, {});\n            return {\n                sessionId: queryParams['sessionId'],\n                secret: queryParams['secret'],\n                recorder: queryParams['recorder'],\n                stt: queryParams['stt'],\n                webrtcStatsInterval: queryParams['webrtcStatsInterval'],\n                sendBrowserLogs: queryParams['sendBrowserLogs'],\n                edition: queryParams['edition'],\n                wsUri: url.protocol + '://' + url.host + '/openvidu',\n                httpUri: 'https://' + url.host\n            };\n        }\n        else {\n            throw new Error(\"Token not valid: \\\"\".concat(token, \"\\\"\"));\n        }\n    };\n    /* Private methods */\n    Session.prototype.connectAux = function (token) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.openvidu.startWs(function (error) {\n                if (!!error) {\n                    return reject(error);\n                }\n                else {\n                    var joinParams = _this.initializeParams(token);\n                    _this.openvidu.sendRequest('joinRoom', joinParams, function (error, response) {\n                        if (!!error) {\n                            return reject(error);\n                        }\n                        else {\n                            // Process join room response\n                            _this.processJoinRoomResponse(response, token);\n                            // Initialize local Connection object with values returned by openvidu-server\n                            _this.connection = new Connection_1.Connection(_this, response);\n                            // Initialize remote Connections with value returned by openvidu-server\n                            var events_1 = {\n                                connections: new Array(),\n                                streams: new Array()\n                            };\n                            var existingParticipants = response.value;\n                            existingParticipants.forEach(function (remoteConnectionOptions) {\n                                var connection = new Connection_1.Connection(_this, remoteConnectionOptions);\n                                _this.remoteConnections.set(connection.connectionId, connection);\n                                events_1.connections.push(connection);\n                                if (!!connection.stream) {\n                                    _this.remoteStreamsCreated.set(connection.stream.streamId, true);\n                                    events_1.streams.push(connection.stream);\n                                }\n                            });\n                            // Own 'connectionCreated' event\n                            _this.ee.emitEvent('connectionCreated', [\n                                new ConnectionEvent_1.ConnectionEvent(false, _this, 'connectionCreated', _this.connection, '')\n                            ]);\n                            // One 'connectionCreated' event for each existing connection in the session\n                            events_1.connections.forEach(function (connection) {\n                                _this.ee.emitEvent('connectionCreated', [\n                                    new ConnectionEvent_1.ConnectionEvent(false, _this, 'connectionCreated', connection, '')\n                                ]);\n                            });\n                            // One 'streamCreated' event for each active stream in the session\n                            events_1.streams.forEach(function (stream) {\n                                _this.ee.emitEvent('streamCreated', [new StreamEvent_1.StreamEvent(false, _this, 'streamCreated', stream, '')]);\n                            });\n                            if (!!response.recordingId && !!response.recordingName) {\n                                _this.ee.emitEvent('recordingStarted', [\n                                    new RecordingEvent_1.RecordingEvent(_this, 'recordingStarted', response.recordingId, response.recordingName)\n                                ]);\n                            }\n                            return resolve();\n                        }\n                    });\n                }\n            });\n        });\n    };\n    Session.prototype.stopPublisherStream = function (reason) {\n        if (!!this.connection.stream) {\n            // Dispose Publisher's  local stream\n            this.connection.stream.disposeWebRtcPeer();\n            if (this.connection.stream.isLocalStreamPublished) {\n                // Make Publisher object dispatch 'streamDestroyed' event if the Stream was published\n                this.connection.stream.ee.emitEvent('local-stream-destroyed', [reason]);\n            }\n        }\n    };\n    Session.prototype.stopVideoDataIntervals = function () {\n        clearInterval(this.videoDataInterval);\n        clearTimeout(this.videoDataTimeout);\n    };\n    Session.prototype.stringClientMetadata = function (metadata) {\n        if (typeof metadata !== 'string') {\n            return JSON.stringify(metadata);\n        }\n        else {\n            return metadata;\n        }\n    };\n    Session.prototype.getConnection = function (connectionId, errorMessage) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var connection = _this.remoteConnections.get(connectionId);\n            if (!!connection) {\n                // Resolve remote connection\n                return resolve(connection);\n            }\n            else {\n                if (_this.connection.connectionId === connectionId) {\n                    // Resolve local connection\n                    return resolve(_this.connection);\n                }\n                else {\n                    // Connection not found. Reject with OpenViduError\n                    return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, errorMessage));\n                }\n            }\n        });\n    };\n    Session.prototype.getRemoteConnection = function (connectionId, operation) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var connection = _this.remoteConnections.get(connectionId);\n            if (!!connection) {\n                // Resolve remote connection\n                return resolve(connection);\n            }\n            else {\n                // Remote connection not found. Reject with OpenViduError\n                var errorMessage = 'Remote connection ' +\n                    connectionId +\n                    \" unknown when '\" +\n                    operation +\n                    \"'. \" +\n                    'Existing remote connections: ' +\n                    JSON.stringify(_this.remoteConnections.keys());\n                return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, errorMessage));\n            }\n        });\n    };\n    Session.prototype.processToken = function (token) {\n        var tokenParams = this.getTokenParams(token);\n        this.sessionId = tokenParams.sessionId;\n        if (!!tokenParams.secret) {\n            this.openvidu.secret = tokenParams.secret;\n        }\n        if (!!tokenParams.recorder) {\n            this.openvidu.recorder = true;\n        }\n        if (!!tokenParams.stt) {\n            this.openvidu.stt = true;\n        }\n        if (!!tokenParams.webrtcStatsInterval) {\n            this.openvidu.webrtcStatsInterval = tokenParams.webrtcStatsInterval;\n        }\n        if (!!tokenParams.sendBrowserLogs) {\n            this.openvidu.sendBrowserLogs = tokenParams.sendBrowserLogs;\n        }\n        this.openvidu.isAtLeastPro = tokenParams.edition === 'pro' || tokenParams.edition === 'enterprise';\n        this.openvidu.isEnterprise = tokenParams.edition === 'enterprise';\n        this.openvidu.wsUri = tokenParams.wsUri;\n        this.openvidu.httpUri = tokenParams.httpUri;\n    };\n    Session.prototype.processJoinRoomResponse = function (opts, token) {\n        this.sessionId = opts.session;\n        if (opts.customIceServers != null && opts.customIceServers.length > 0) {\n            this.openvidu.iceServers = [];\n            for (var _i = 0, _a = opts.customIceServers; _i < _a.length; _i++) {\n                var iceServer = _a[_i];\n                var rtcIceServer = {\n                    urls: [iceServer.url]\n                };\n                logger.log('STUN/TURN server IP: ' + iceServer.url);\n                if (iceServer.username != null && iceServer.credential != null) {\n                    rtcIceServer.username = iceServer.username;\n                    rtcIceServer.credential = iceServer.credential;\n                    logger.log('TURN credentials [' + iceServer.username + ':' + iceServer.credential + ']');\n                }\n                this.openvidu.iceServers.push(rtcIceServer);\n            }\n        }\n        this.openvidu.role = opts.role;\n        this.openvidu.finalUserId = opts.finalUserId;\n        this.openvidu.mediaServer = opts.mediaServer;\n        this.openvidu.videoSimulcast = opts.videoSimulcast;\n        this.capabilities = {\n            subscribe: true,\n            publish: this.openvidu.role !== 'SUBSCRIBER',\n            forceUnpublish: this.openvidu.role === 'MODERATOR',\n            forceDisconnect: this.openvidu.role === 'MODERATOR'\n        };\n        logger.info('openvidu-server version: ' + opts.version);\n        if (opts.life != null) {\n            this.openvidu.life = opts.life;\n        }\n        var minorDifference = semverMinor(opts.version) - semverMinor(this.openvidu.libraryVersion);\n        if (semverMajor(opts.version) !== semverMajor(this.openvidu.libraryVersion) || !(minorDifference == 0 || minorDifference == 1)) {\n            logger.error(\"openvidu-browser (\".concat(this.openvidu.libraryVersion, \") and openvidu-server (\").concat(opts.version, \") versions are incompatible. \") +\n                'Errors are likely to occur. openvidu-browser SDK is only compatible with the same version or the immediately following minor version of an OpenVidu deployment');\n        }\n        else if (minorDifference == 1) {\n            logger.warn(\"openvidu-browser version \".concat(this.openvidu.libraryVersion, \" does not match openvidu-server version \").concat(opts.version, \". \") +\n                \"These versions are still compatible with each other, but openvidu-browser version must be updated as soon as possible to \".concat(semverMajor(opts.version), \".\").concat(semverMinor(opts.version), \".x. \") +\n                \"This client using openvidu-browser \".concat(this.openvidu.libraryVersion, \" will become incompatible with the next release of openvidu-server\"));\n        }\n        // Configure JSNLogs\n        OpenViduLogger_1.OpenViduLogger.configureJSNLog(this.openvidu, token);\n        // Store token\n        this.token = token;\n    };\n    return Session;\n}(EventDispatcher_1.EventDispatcher));\nexports.Session = Session;\n//# sourceMappingURL=Session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Stream.js":
/*!**************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/Stream.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stream = void 0;\nvar Filter_1 = __webpack_require__(/*! ./Filter */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Filter.js\");\nvar Subscriber_1 = __webpack_require__(/*! ./Subscriber */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Subscriber.js\");\nvar WebRtcPeer_1 = __webpack_require__(/*! ../OpenViduInternal/WebRtcPeer/WebRtcPeer */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcPeer/WebRtcPeer.js\");\nvar WebRtcStats_1 = __webpack_require__(/*! ../OpenViduInternal/WebRtcStats/WebRtcStats */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/WebRtcStats/WebRtcStats.js\");\nvar ExceptionEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/ExceptionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\");\nvar PublisherSpeakingEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/PublisherSpeakingEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/PublisherSpeakingEvent.js\");\nvar StreamManagerEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamManagerEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamManagerEvent.js\");\nvar StreamPropertyChangedEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\");\nvar OpenViduError_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/OpenViduError */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\");\nvar TypeOfVideo_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/TypeOfVideo */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/TypeOfVideo.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../OpenViduInternal/Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\nvar uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\n/**\n * @hidden\n */\nvar hark = __webpack_require__(/*! hark */ \"(ssr)/./node_modules/hark/hark.js\");\n/**\n * @hidden\n */\nvar EventEmitter = __webpack_require__(/*! wolfy87-eventemitter */ \"(ssr)/./node_modules/wolfy87-eventemitter/EventEmitter.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Represents each one of the media streams available in OpenVidu Server for certain session.\n * Each {@link Publisher} and {@link Subscriber} has an attribute of type Stream, as they give access\n * to one of them (sending and receiving it, respectively)\n */\nvar Stream = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function Stream(session, options) {\n        var _this = this;\n        this.isSubscribeToRemote = false;\n        /**\n         * @hidden\n         */\n        this.isLocalStreamReadyToPublish = false;\n        /**\n         * @hidden\n         */\n        this.isLocalStreamPublished = false;\n        /**\n         * @hidden\n         */\n        this.publishedOnce = false;\n        /**\n         * @hidden\n         */\n        this.harkSpeakingEnabled = false;\n        /**\n         * @hidden\n         */\n        this.harkSpeakingEnabledOnce = false;\n        /**\n         * @hidden\n         */\n        this.harkStoppedSpeakingEnabled = false;\n        /**\n         * @hidden\n         */\n        this.harkStoppedSpeakingEnabledOnce = false;\n        /**\n         * @hidden\n         */\n        this.harkVolumeChangeEnabled = false;\n        /**\n         * @hidden\n         */\n        this.harkVolumeChangeEnabledOnce = false;\n        /**\n         * @hidden\n         */\n        this.ee = new EventEmitter();\n        platform = Platform_1.PlatformUtils.getInstance();\n        this.session = session;\n        if (options.hasOwnProperty('id')) {\n            // InboundStreamOptions: stream belongs to a Subscriber\n            this.inboundStreamOpts = options;\n            this.streamId = this.inboundStreamOpts.id;\n            this.creationTime = this.inboundStreamOpts.createdAt;\n            this.hasAudio = this.inboundStreamOpts.hasAudio;\n            this.hasVideo = this.inboundStreamOpts.hasVideo;\n            if (this.hasAudio) {\n                this.audioActive = this.inboundStreamOpts.audioActive;\n            }\n            if (this.hasVideo) {\n                this.videoActive = this.inboundStreamOpts.videoActive;\n                this.typeOfVideo = !this.inboundStreamOpts.typeOfVideo ? undefined : this.inboundStreamOpts.typeOfVideo;\n                this.frameRate = this.inboundStreamOpts.frameRate === -1 ? undefined : this.inboundStreamOpts.frameRate;\n                this.videoDimensions = this.inboundStreamOpts.videoDimensions;\n            }\n            if (!!this.inboundStreamOpts.filter && Object.keys(this.inboundStreamOpts.filter).length > 0) {\n                if (!!this.inboundStreamOpts.filter.lastExecMethod &&\n                    Object.keys(this.inboundStreamOpts.filter.lastExecMethod).length === 0) {\n                    delete this.inboundStreamOpts.filter.lastExecMethod;\n                }\n                this.filter = this.inboundStreamOpts.filter;\n            }\n        }\n        else {\n            // OutboundStreamOptions: stream belongs to a Publisher\n            this.outboundStreamOpts = options;\n            this.hasAudio = this.isSendAudio();\n            this.hasVideo = this.isSendVideo();\n            if (this.hasAudio) {\n                this.audioActive = !!this.outboundStreamOpts.publisherProperties.publishAudio;\n            }\n            if (this.hasVideo) {\n                this.videoActive = !!this.outboundStreamOpts.publisherProperties.publishVideo;\n                this.frameRate = this.outboundStreamOpts.publisherProperties.frameRate;\n                if (typeof MediaStreamTrack !== 'undefined' &&\n                    this.outboundStreamOpts.publisherProperties.videoSource instanceof MediaStreamTrack) {\n                    this.typeOfVideo = TypeOfVideo_1.TypeOfVideo.CUSTOM;\n                }\n                else {\n                    this.typeOfVideo = this.isSendScreen() ? TypeOfVideo_1.TypeOfVideo.SCREEN : TypeOfVideo_1.TypeOfVideo.CAMERA;\n                }\n            }\n            if (!!this.outboundStreamOpts.publisherProperties.filter) {\n                this.filter = this.outboundStreamOpts.publisherProperties.filter;\n            }\n        }\n        this.ee.on('mediastream-updated', function () {\n            var _a;\n            _this.streamManager.updateMediaStream(_this.mediaStream);\n            logger.debug('Video srcObject [' + ((_a = _this.mediaStream) === null || _a === void 0 ? void 0 : _a.id) + '] updated in stream [' + _this.streamId + ']');\n        });\n    }\n    /**\n     * Recreates the media connection with the server. This entails the disposal of the previous RTCPeerConnection and the re-negotiation\n     * of a new one, that will apply the same properties.\n     *\n     * This method can be useful in those situations were there the media connection breaks and OpenVidu is not able to recover on its own\n     * for any kind of unanticipated reason (see [Automatic reconnection](/en/stable/advanced-features/automatic-reconnection/)).\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the reconnection operation was successful and rejected with an Error object if not\n     */\n    Stream.prototype.reconnect = function () {\n        return this.reconnectStream('API');\n    };\n    /**\n     * Applies an audio/video filter to the stream.\n     *\n     * @param type Type of filter applied. See {@link Filter.type}\n     * @param options Parameters used to initialize the filter. See {@link Filter.options}\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved to the applied filter if success and rejected with an Error object if not\n     */\n    Stream.prototype.applyFilter = function (type, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n            var resolveApplyFilter, openviduToken_1, tokenParams_1, afterScriptLoaded_1, script, optionsString;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (!!this.filter) {\n                    return [2 /*return*/, reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, 'There is already a filter applied to Stream ' + this.streamId))];\n                }\n                resolveApplyFilter = function (error, triggerEvent) {\n                    if (error) {\n                        logger.error('Error applying filter for Stream ' + _this.streamId, error);\n                        if (error.code === 401) {\n                            return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to apply a filter\"));\n                        }\n                        else {\n                            return reject(error);\n                        }\n                    }\n                    else {\n                        logger.info('Filter successfully applied on Stream ' + _this.streamId);\n                        var oldValue = _this.filter;\n                        _this.filter = new Filter_1.Filter(type, options);\n                        _this.filter.stream = _this;\n                        if (triggerEvent) {\n                            _this.session.emitEvent('streamPropertyChanged', [\n                                new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, _this, 'filter', _this.filter, oldValue, 'applyFilter')\n                            ]);\n                            _this.streamManager.emitEvent('streamPropertyChanged', [\n                                new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.streamManager, _this, 'filter', _this.filter, oldValue, 'applyFilter')\n                            ]);\n                        }\n                        return resolve(_this.filter);\n                    }\n                };\n                if (type.startsWith('VB:')) {\n                    // Client filters\n                    if (!this.hasVideo) {\n                        return [2 /*return*/, reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'The Virtual Background filter requires a video track to be applied'))];\n                    }\n                    if (!this.mediaStream || this.streamManager.videos.length === 0) {\n                        return [2 /*return*/, reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'The StreamManager requires some video element to be attached to it in order to apply a Virtual Background filter'))];\n                    }\n                    if (!!this.session.token) {\n                        openviduToken_1 = this.session.token;\n                    }\n                    else {\n                        openviduToken_1 = options['token'];\n                    }\n                    if (!openviduToken_1) {\n                        return [2 /*return*/, reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'Virtual Background requires the client to be connected to a Session or to have a \"token\" property available in \"options\" parameter with a valid OpenVidu token'))];\n                    }\n                    tokenParams_1 = this.session.getTokenParams(openviduToken_1);\n                    if (tokenParams_1.edition !== 'pro' && tokenParams_1.edition !== 'enterprise') {\n                        return [2 /*return*/, reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, 'OpenVidu Virtual Background API is available from OpenVidu Pro edition onwards'))];\n                    }\n                    openviduToken_1 = encodeURIComponent(btoa(openviduToken_1));\n                    logger.info('Applying Virtual Background to stream ' + this.streamId);\n                    afterScriptLoaded_1 = function () { return __awaiter(_this, void 0, void 0, function () {\n                        var id, mediaStreamClone, videoClone, VB, filteredVideo, _a, error_1;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    _b.trys.push([0, 8, , 9]);\n                                    id = this.streamId + '_' + (0, uuid_1.v4)();\n                                    mediaStreamClone = this.mediaStream.clone();\n                                    videoClone = this.streamManager.videos[0].video.cloneNode(false);\n                                    // @ts-ignore\n                                    videoClone.id = VirtualBackground.VirtualBackground.SOURCE_VIDEO_PREFIX + id;\n                                    videoClone.srcObject = mediaStreamClone;\n                                    videoClone.muted = true;\n                                    this.virtualBackgroundSourceElements = { videoClone: videoClone, mediaStreamClone: mediaStreamClone };\n                                    // @ts-ignore\n                                    VirtualBackground.VirtualBackground.hideHtmlElement(videoClone, false);\n                                    // @ts-ignore\n                                    VirtualBackground.VirtualBackground.appendHtmlElementToHiddenContainer(videoClone, id);\n                                    return [4 /*yield*/, videoClone.play()];\n                                case 1:\n                                    _b.sent();\n                                    VB = new VirtualBackground.VirtualBackground({\n                                        id: id,\n                                        openviduServerUrl: new URL(tokenParams_1.httpUri),\n                                        openviduToken: openviduToken_1,\n                                        inputVideo: videoClone,\n                                        inputResolution: '160x96',\n                                        outputFramerate: 24\n                                    });\n                                    filteredVideo = void 0;\n                                    _a = type;\n                                    switch (_a) {\n                                        case 'VB:blur': return [3 /*break*/, 2];\n                                        case 'VB:image': return [3 /*break*/, 4];\n                                    }\n                                    return [3 /*break*/, 6];\n                                case 2: return [4 /*yield*/, VB.backgroundBlur(options)];\n                                case 3:\n                                    filteredVideo = _b.sent();\n                                    return [3 /*break*/, 7];\n                                case 4: return [4 /*yield*/, VB.backgroundImage(options)];\n                                case 5:\n                                    filteredVideo = _b.sent();\n                                    return [3 /*break*/, 7];\n                                case 6: throw new Error('Unknown Virtual Background filter: ' + type);\n                                case 7:\n                                    this.virtualBackgroundSinkElements = { VB: VB, video: filteredVideo };\n                                    videoClone.style.display = 'none';\n                                    if (this.streamManager.remote) {\n                                        this.streamManager.replaceTrackInMediaStream(this.virtualBackgroundSinkElements.video.srcObject.getVideoTracks()[0], false);\n                                    }\n                                    else {\n                                        this.streamManager.replaceTrackAux(this.virtualBackgroundSinkElements.video.srcObject.getVideoTracks()[0], false);\n                                    }\n                                    resolveApplyFilter(undefined, false);\n                                    return [3 /*break*/, 9];\n                                case 8:\n                                    error_1 = _b.sent();\n                                    if (error_1.name === OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR) {\n                                        resolveApplyFilter(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.VIRTUAL_BACKGROUND_ERROR, error_1.message), false);\n                                    }\n                                    else {\n                                        resolveApplyFilter(error_1, false);\n                                    }\n                                    return [3 /*break*/, 9];\n                                case 9: return [2 /*return*/];\n                            }\n                        });\n                    }); };\n                    // @ts-ignore\n                    if (typeof VirtualBackground === 'undefined') {\n                        script = document.createElement('script');\n                        script.type = 'text/javascript';\n                        script.src = tokenParams_1.httpUri + '/openvidu/virtual-background/openvidu-virtual-background.js?token=' + openviduToken_1;\n                        script.onload = function () { return __awaiter(_this, void 0, void 0, function () {\n                            var error_2;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        _a.trys.push([0, 2, , 3]);\n                                        return [4 /*yield*/, afterScriptLoaded_1()];\n                                    case 1:\n                                        _a.sent();\n                                        resolve(new Filter_1.Filter(type, options));\n                                        return [3 /*break*/, 3];\n                                    case 2:\n                                        error_2 = _a.sent();\n                                        reject(error_2);\n                                        return [3 /*break*/, 3];\n                                    case 3: return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        document.body.appendChild(script);\n                    }\n                    else {\n                        afterScriptLoaded_1()\n                            .then(function () { return resolve(new Filter_1.Filter(type, options)); })\n                            .catch(function (error) { return reject(error); });\n                    }\n                }\n                else {\n                    // Server filters\n                    if (!this.session.sessionConnected()) {\n                        return [2 /*return*/, reject(this.session.notConnectedError())];\n                    }\n                    logger.info('Applying server filter to stream ' + this.streamId);\n                    options = options != null ? options : {};\n                    optionsString = options;\n                    if (typeof optionsString !== 'string') {\n                        optionsString = JSON.stringify(optionsString);\n                    }\n                    this.session.openvidu.sendRequest('applyFilter', { streamId: this.streamId, type: type, options: optionsString }, function (error, response) {\n                        resolveApplyFilter(error, true);\n                    });\n                }\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    /**\n     * Removes an audio/video filter previously applied.\n     *\n     * @returns A Promise (to which you can optionally subscribe to) that is resolved if the previously applied filter has been successfully removed and rejected with an Error object in other case\n     */\n    Stream.prototype.removeFilter = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.removeFilterAux(false)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the internal RTCPeerConnection object associated to this stream (https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection)\n     *\n     * @returns Native RTCPeerConnection Web API object\n     */\n    Stream.prototype.getRTCPeerConnection = function () {\n        return this.webRtcPeer.pc;\n    };\n    /**\n     * Returns the internal MediaStream object associated to this stream (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n     *\n     * @returns Native MediaStream Web API object\n     */\n    Stream.prototype.getMediaStream = function () {\n        return this.mediaStream;\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    Stream.prototype.removeFilterAux = function (isDisposing) {\n        var _this = this;\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\n            var resolveRemoveFilter, mediaStreamClone, error_3;\n            var _this = this;\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resolveRemoveFilter = function (error, triggerEvent) {\n                            if (error) {\n                                delete _this.filter;\n                                logger.error('Error removing filter for Stream ' + _this.streamId, error);\n                                if (error.code === 401) {\n                                    return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to remove a filter\"));\n                                }\n                                else {\n                                    return reject(error);\n                                }\n                            }\n                            else {\n                                logger.info('Filter successfully removed from Stream ' + _this.streamId);\n                                var oldValue = _this.filter;\n                                delete _this.filter;\n                                if (triggerEvent) {\n                                    _this.session.emitEvent('streamPropertyChanged', [\n                                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, _this, 'filter', _this.filter, oldValue, 'applyFilter')\n                                    ]);\n                                    _this.streamManager.emitEvent('streamPropertyChanged', [\n                                        new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.streamManager, _this, 'filter', _this.filter, oldValue, 'applyFilter')\n                                    ]);\n                                }\n                                return resolve();\n                            }\n                        };\n                        if (!!!this.filter) return [3 /*break*/, 11];\n                        if (!((_a = this.filter) === null || _a === void 0 ? void 0 : _a.type.startsWith('VB:'))) return [3 /*break*/, 9];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 7, , 8]);\n                        mediaStreamClone = this.virtualBackgroundSourceElements.mediaStreamClone;\n                        if (!!isDisposing) return [3 /*break*/, 5];\n                        if (!this.streamManager.remote) return [3 /*break*/, 2];\n                        this.streamManager.replaceTrackInMediaStream(mediaStreamClone.getVideoTracks()[0], false);\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this.streamManager.replaceTrackAux(mediaStreamClone.getVideoTracks()[0], false)];\n                    case 3:\n                        _b.sent();\n                        _b.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        mediaStreamClone.getTracks().forEach(function (track) { return track.stop(); });\n                        _b.label = 6;\n                    case 6:\n                        this.virtualBackgroundSinkElements.VB.cleanUp();\n                        delete this.virtualBackgroundSinkElements;\n                        delete this.virtualBackgroundSourceElements;\n                        return [2 /*return*/, resolveRemoveFilter(undefined, false)];\n                    case 7:\n                        error_3 = _b.sent();\n                        return [2 /*return*/, resolveRemoveFilter(error_3, false)];\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        // Server filters\n                        if (!this.session.sessionConnected()) {\n                            return [2 /*return*/, reject(this.session.notConnectedError())];\n                        }\n                        logger.info('Removing filter of stream ' + this.streamId);\n                        this.session.openvidu.sendRequest('removeFilter', { streamId: this.streamId }, function (error, response) {\n                            return resolveRemoveFilter(error, true);\n                        });\n                        _b.label = 10;\n                    case 10: return [3 /*break*/, 12];\n                    case 11: \n                    // There is no filter applied\n                    return [2 /*return*/, reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, 'Stream ' + this.streamId + ' has no filter applied'))];\n                    case 12: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.setMediaStream = function (mediaStream) {\n        this.mediaStream = mediaStream;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.updateMediaStreamInVideos = function () {\n        this.ee.emitEvent('mediastream-updated', []);\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.getWebRtcPeer = function () {\n        return this.webRtcPeer;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.subscribeToMyRemote = function (value) {\n        this.isSubscribeToRemote = value;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.setOutboundStreamOptions = function (outboundStreamOpts) {\n        this.outboundStreamOpts = outboundStreamOpts;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.subscribe = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.initWebRtcPeerReceive(false)\n                .then(function () { return resolve(); })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.publish = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.isLocalStreamReadyToPublish) {\n                _this.initWebRtcPeerSend(false)\n                    .then(function () { return resolve(); })\n                    .catch(function (error) { return reject(error); });\n            }\n            else {\n                _this.ee.once('stream-ready-to-publish', function () {\n                    _this.publish()\n                        .then(function () { return resolve(); })\n                        .catch(function (error) { return reject(error); });\n                });\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.disposeWebRtcPeer = function () {\n        var webrtcId;\n        if (!!this.webRtcPeer) {\n            this.webRtcPeer.dispose();\n            webrtcId = this.webRtcPeer.getId();\n        }\n        this.stopWebRtcStats();\n        logger.info((!!this.outboundStreamOpts ? 'Outbound ' : 'Inbound ') +\n            'RTCPeerConnection with id [' +\n            webrtcId +\n            \"] from 'Stream' with id [\" +\n            this.streamId +\n            '] is now closed');\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.disposeMediaStream = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(!!this.filter && this.filter.type.startsWith('VB:'))) return [3 /*break*/, 4];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.removeFilterAux(true)];\n                    case 2:\n                        _a.sent();\n                        console.debug(\"Success removing Virtual Background filter for stream \".concat(this.streamId));\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_4 = _a.sent();\n                        console.error(\"Error removing Virtual Background filter for stream \".concat(this.streamId), error_4);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        if (this.mediaStream) {\n                            this.mediaStream.getAudioTracks().forEach(function (track) {\n                                track.stop();\n                            });\n                            this.mediaStream.getVideoTracks().forEach(function (track) {\n                                track.stop();\n                            });\n                            delete this.mediaStream;\n                        }\n                        // If subscribeToRemote local MediaStream must be stopped\n                        if (this.localMediaStreamWhenSubscribedToRemote) {\n                            this.localMediaStreamWhenSubscribedToRemote.getAudioTracks().forEach(function (track) {\n                                track.stop();\n                            });\n                            this.localMediaStreamWhenSubscribedToRemote.getVideoTracks().forEach(function (track) {\n                                track.stop();\n                            });\n                            delete this.localMediaStreamWhenSubscribedToRemote;\n                        }\n                        if (!!this.speechEvent) {\n                            if (!!this.speechEvent.stop) {\n                                this.speechEvent.stop();\n                            }\n                            delete this.speechEvent;\n                        }\n                        logger.info((!!this.outboundStreamOpts ? 'Local ' : 'Remote ') + \"MediaStream from 'Stream' with id [\" + this.streamId + '] is now disposed');\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.displayMyRemote = function () {\n        return this.isSubscribeToRemote;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.isSendAudio = function () {\n        return (!!this.outboundStreamOpts &&\n            this.outboundStreamOpts.publisherProperties.audioSource !== null &&\n            this.outboundStreamOpts.publisherProperties.audioSource !== false);\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.isSendVideo = function () {\n        return (!!this.outboundStreamOpts &&\n            this.outboundStreamOpts.publisherProperties.videoSource !== null &&\n            this.outboundStreamOpts.publisherProperties.videoSource !== false);\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.isSendScreen = function () {\n        var screen = false;\n        if (typeof MediaStreamTrack !== 'undefined' &&\n            this.outboundStreamOpts.publisherProperties.videoSource instanceof MediaStreamTrack) {\n            var trackSettings = this.outboundStreamOpts.publisherProperties.videoSource.getSettings();\n            if (trackSettings.displaySurface) {\n                screen = [\"monitor\", \"window\", \"browser\"].includes(trackSettings.displaySurface);\n            }\n        }\n        if (!screen && platform.isElectron()) {\n            screen =\n                typeof this.outboundStreamOpts.publisherProperties.videoSource === 'string' &&\n                    this.outboundStreamOpts.publisherProperties.videoSource.startsWith('screen:');\n        }\n        if (!screen) {\n            screen = this.outboundStreamOpts.publisherProperties.videoSource === 'screen';\n        }\n        return !!this.outboundStreamOpts && screen;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.enableHarkSpeakingEvent = function () {\n        var _this = this;\n        this.setHarkListenerIfNotExists();\n        if (!this.harkSpeakingEnabled && !!this.speechEvent) {\n            this.harkSpeakingEnabled = true;\n            this.speechEvent.on('speaking', function () {\n                _this.session.emitEvent('publisherStartSpeaking', [\n                    new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.session, 'publisherStartSpeaking', _this.connection, _this.streamId)\n                ]);\n                _this.streamManager.emitEvent('publisherStartSpeaking', [\n                    new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.streamManager, 'publisherStartSpeaking', _this.connection, _this.streamId)\n                ]);\n                _this.harkSpeakingEnabledOnce = false; // Disable 'once' version if 'on' version was triggered\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.enableOnceHarkSpeakingEvent = function () {\n        var _this = this;\n        this.setHarkListenerIfNotExists();\n        if (!this.harkSpeakingEnabledOnce && !!this.speechEvent) {\n            this.harkSpeakingEnabledOnce = true;\n            this.speechEvent.once('speaking', function () {\n                if (_this.harkSpeakingEnabledOnce) {\n                    // If the listener has been disabled in the meantime (for example by the 'on' version) do not trigger the event\n                    _this.session.emitEvent('publisherStartSpeaking', [\n                        new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.session, 'publisherStartSpeaking', _this.connection, _this.streamId)\n                    ]);\n                    _this.streamManager.emitEvent('publisherStartSpeaking', [\n                        new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.streamManager, 'publisherStartSpeaking', _this.connection, _this.streamId)\n                    ]);\n                }\n                _this.disableHarkSpeakingEvent(true);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.disableHarkSpeakingEvent = function (disabledByOnce) {\n        if (!!this.speechEvent) {\n            this.harkSpeakingEnabledOnce = false;\n            if (disabledByOnce) {\n                if (this.harkSpeakingEnabled) {\n                    // The 'on' version of this same event is enabled too. Do not remove the hark listener\n                    return;\n                }\n            }\n            else {\n                this.harkSpeakingEnabled = false;\n            }\n            // Shutting down the hark event\n            if (this.harkVolumeChangeEnabled ||\n                this.harkVolumeChangeEnabledOnce ||\n                this.harkStoppedSpeakingEnabled ||\n                this.harkStoppedSpeakingEnabledOnce) {\n                // Some other hark event is enabled. Cannot stop the hark process, just remove the specific listener\n                this.speechEvent.off('speaking');\n            }\n            else {\n                // No other hark event is enabled. We can get entirely rid of it\n                this.speechEvent.stop();\n                delete this.speechEvent;\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.enableHarkStoppedSpeakingEvent = function () {\n        var _this = this;\n        this.setHarkListenerIfNotExists();\n        if (!this.harkStoppedSpeakingEnabled && !!this.speechEvent) {\n            this.harkStoppedSpeakingEnabled = true;\n            this.speechEvent.on('stopped_speaking', function () {\n                _this.session.emitEvent('publisherStopSpeaking', [\n                    new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.session, 'publisherStopSpeaking', _this.connection, _this.streamId)\n                ]);\n                _this.streamManager.emitEvent('publisherStopSpeaking', [\n                    new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.streamManager, 'publisherStopSpeaking', _this.connection, _this.streamId)\n                ]);\n                _this.harkStoppedSpeakingEnabledOnce = false; // Disable 'once' version if 'on' version was triggered\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.enableOnceHarkStoppedSpeakingEvent = function () {\n        var _this = this;\n        this.setHarkListenerIfNotExists();\n        if (!this.harkStoppedSpeakingEnabledOnce && !!this.speechEvent) {\n            this.harkStoppedSpeakingEnabledOnce = true;\n            this.speechEvent.once('stopped_speaking', function () {\n                if (_this.harkStoppedSpeakingEnabledOnce) {\n                    // If the listener has been disabled in the meantime (for example by the 'on' version) do not trigger the event\n                    _this.session.emitEvent('publisherStopSpeaking', [\n                        new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.session, 'publisherStopSpeaking', _this.connection, _this.streamId)\n                    ]);\n                    _this.streamManager.emitEvent('publisherStopSpeaking', [\n                        new PublisherSpeakingEvent_1.PublisherSpeakingEvent(_this.streamManager, 'publisherStopSpeaking', _this.connection, _this.streamId)\n                    ]);\n                }\n                _this.disableHarkStoppedSpeakingEvent(true);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.disableHarkStoppedSpeakingEvent = function (disabledByOnce) {\n        if (!!this.speechEvent) {\n            this.harkStoppedSpeakingEnabledOnce = false;\n            if (disabledByOnce) {\n                if (this.harkStoppedSpeakingEnabled) {\n                    // We are cancelling the 'once' listener for this event, but the 'on' version\n                    // of this same event is enabled too. Do not remove the hark listener\n                    return;\n                }\n            }\n            else {\n                this.harkStoppedSpeakingEnabled = false;\n            }\n            // Shutting down the hark event\n            if (this.harkVolumeChangeEnabled ||\n                this.harkVolumeChangeEnabledOnce ||\n                this.harkSpeakingEnabled ||\n                this.harkSpeakingEnabledOnce) {\n                // Some other hark event is enabled. Cannot stop the hark process, just remove the specific listener\n                this.speechEvent.off('stopped_speaking');\n            }\n            else {\n                // No other hark event is enabled. We can get entirely rid of it\n                this.speechEvent.stop();\n                delete this.speechEvent;\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.enableHarkVolumeChangeEvent = function (force) {\n        var _this = this;\n        if (this.setHarkListenerIfNotExists()) {\n            if (!this.harkVolumeChangeEnabled || force) {\n                this.harkVolumeChangeEnabled = true;\n                this.speechEvent.on('volume_change', function (harkEvent) {\n                    var oldValue = _this.speechEvent.oldVolumeValue;\n                    var value = { newValue: harkEvent, oldValue: oldValue };\n                    _this.speechEvent.oldVolumeValue = harkEvent;\n                    _this.streamManager.emitEvent('streamAudioVolumeChange', [\n                        new StreamManagerEvent_1.StreamManagerEvent(_this.streamManager, 'streamAudioVolumeChange', value)\n                    ]);\n                });\n            }\n        }\n        else {\n            // This way whenever the MediaStream object is available, the event listener will be automatically added\n            this.harkVolumeChangeEnabled = true;\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.enableOnceHarkVolumeChangeEvent = function (force) {\n        var _this = this;\n        if (this.setHarkListenerIfNotExists()) {\n            if (!this.harkVolumeChangeEnabledOnce || force) {\n                this.harkVolumeChangeEnabledOnce = true;\n                this.speechEvent.once('volume_change', function (harkEvent) {\n                    var oldValue = _this.speechEvent.oldVolumeValue;\n                    var value = { newValue: harkEvent, oldValue: oldValue };\n                    _this.speechEvent.oldVolumeValue = harkEvent;\n                    _this.disableHarkVolumeChangeEvent(true);\n                    _this.streamManager.emitEvent('streamAudioVolumeChange', [\n                        new StreamManagerEvent_1.StreamManagerEvent(_this.streamManager, 'streamAudioVolumeChange', value)\n                    ]);\n                });\n            }\n        }\n        else {\n            // This way whenever the MediaStream object is available, the event listener will be automatically added\n            this.harkVolumeChangeEnabledOnce = true;\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.disableHarkVolumeChangeEvent = function (disabledByOnce) {\n        if (!!this.speechEvent) {\n            this.harkVolumeChangeEnabledOnce = false;\n            if (disabledByOnce) {\n                if (this.harkVolumeChangeEnabled) {\n                    // We are cancelling the 'once' listener for this event, but the 'on' version\n                    // of this same event is enabled too. Do not remove the hark listener\n                    return;\n                }\n            }\n            else {\n                this.harkVolumeChangeEnabled = false;\n            }\n            // Shutting down the hark event\n            if (this.harkSpeakingEnabled ||\n                this.harkSpeakingEnabledOnce ||\n                this.harkStoppedSpeakingEnabled ||\n                this.harkStoppedSpeakingEnabledOnce) {\n                // Some other hark event is enabled. Cannot stop the hark process, just remove the specific listener\n                this.speechEvent.off('volume_change');\n            }\n            else {\n                // No other hark event is enabled. We can get entirely rid of it\n                this.speechEvent.stop();\n                delete this.speechEvent;\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.isLocal = function () {\n        // inbound options undefined and outbound options defined\n        return !this.inboundStreamOpts && !!this.outboundStreamOpts;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.getSelectedIceCandidate = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.webRtcStats\n                .getSelectedIceCandidateInfo()\n                .then(function (report) { return resolve(report); })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.getRemoteIceCandidateList = function () {\n        return this.webRtcPeer.remoteCandidatesQueue;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.getLocalIceCandidateList = function () {\n        return this.webRtcPeer.localCandidatesQueue;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.streamIceConnectionStateBroken = function () {\n        if (!this.getWebRtcPeer() || !this.getRTCPeerConnection()) {\n            return false;\n        }\n        if (!!this.session.openvidu.advancedConfiguration.forceMediaReconnectionAfterNetworkDrop) {\n            logger.warn(\"OpenVidu Browser advanced configuration option \\\"forceMediaReconnectionAfterNetworkDrop\\\" is enabled. Stream \".concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") will force a reconnection\"));\n            return true;\n        }\n        else {\n            var iceConnectionState = this.getRTCPeerConnection().iceConnectionState;\n            return iceConnectionState !== 'connected' && iceConnectionState !== 'completed';\n        }\n    };\n    /* Private methods */\n    Stream.prototype.setHarkListenerIfNotExists = function () {\n        if (!!this.mediaStream) {\n            if (!this.speechEvent) {\n                var harkOptions = !!this.harkOptions\n                    ? this.harkOptions\n                    : this.session.openvidu.advancedConfiguration.publisherSpeakingEventsOptions || {};\n                harkOptions.interval = typeof harkOptions.interval === 'number' ? harkOptions.interval : 100;\n                harkOptions.threshold = typeof harkOptions.threshold === 'number' ? harkOptions.threshold : -50;\n                this.speechEvent = hark(this.mediaStream, harkOptions);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.setupReconnectionEventEmitter = function (resolve, reject) {\n        if (this.reconnectionEventEmitter == undefined) {\n            // There is no ongoing reconnection\n            this.reconnectionEventEmitter = new EventEmitter();\n            return false;\n        }\n        else {\n            // Ongoing reconnection\n            console.warn(\"Trying to reconnect stream \".concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") but an ongoing reconnection process is active. Waiting for response...\"));\n            this.reconnectionEventEmitter.once('success', function () { return resolve(); });\n            this.reconnectionEventEmitter.once('error', function (error) { return reject(error); });\n            return true;\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.initWebRtcPeerSend = function (reconnect) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var _a;\n            if (reconnect) {\n                if (_this.setupReconnectionEventEmitter(resolve, reject)) {\n                    // Ongoing reconnection\n                    return;\n                }\n            }\n            else {\n                // MediaStream will already have hark events for reconnected streams\n                _this.initHarkEvents(); // Init hark events for the local stream\n            }\n            var finalResolve = function () {\n                var _a;\n                if (reconnect) {\n                    (_a = _this.reconnectionEventEmitter) === null || _a === void 0 ? void 0 : _a.emitEvent('success');\n                    delete _this.reconnectionEventEmitter;\n                }\n                return resolve();\n            };\n            var finalReject = function (error) {\n                var _a;\n                if (reconnect) {\n                    (_a = _this.reconnectionEventEmitter) === null || _a === void 0 ? void 0 : _a.emitEvent('error', [error]);\n                    delete _this.reconnectionEventEmitter;\n                }\n                return reject(error);\n            };\n            var successOfferCallback = function (sdpOfferParam) {\n                logger.debug('Sending SDP offer to publish as ' + _this.streamId, sdpOfferParam);\n                var method = reconnect ? 'reconnectStream' : 'publishVideo';\n                var params;\n                if (reconnect) {\n                    params = {\n                        stream: _this.streamId,\n                        sdpString: sdpOfferParam\n                    };\n                }\n                else {\n                    var typeOfVideo = void 0;\n                    if (_this.isSendVideo()) {\n                        typeOfVideo =\n                            typeof MediaStreamTrack !== 'undefined' &&\n                                _this.outboundStreamOpts.publisherProperties.videoSource instanceof MediaStreamTrack\n                                ? TypeOfVideo_1.TypeOfVideo.CUSTOM\n                                : _this.isSendScreen()\n                                    ? TypeOfVideo_1.TypeOfVideo.SCREEN\n                                    : TypeOfVideo_1.TypeOfVideo.CAMERA;\n                    }\n                    params = {\n                        doLoopback: _this.displayMyRemote() || false,\n                        hasAudio: _this.isSendAudio(),\n                        hasVideo: _this.isSendVideo(),\n                        audioActive: _this.audioActive,\n                        videoActive: _this.videoActive,\n                        typeOfVideo: typeOfVideo,\n                        frameRate: !!_this.frameRate ? _this.frameRate : -1,\n                        videoDimensions: JSON.stringify(_this.videoDimensions),\n                        filter: _this.outboundStreamOpts.publisherProperties.filter,\n                        sdpOffer: sdpOfferParam\n                    };\n                }\n                _this.session.openvidu.sendRequest(method, params, function (error, response) {\n                    if (error) {\n                        if (error.code === 401) {\n                            finalReject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.OPENVIDU_PERMISSION_DENIED, \"You don't have permissions to publish\"));\n                        }\n                        else {\n                            finalReject('Error on publishVideo: ' + JSON.stringify(error));\n                        }\n                    }\n                    else {\n                        _this.webRtcPeer\n                            .processRemoteAnswer(response.sdpAnswer)\n                            .then(function () {\n                            _this.streamId = response.id;\n                            _this.creationTime = response.createdAt;\n                            _this.isLocalStreamPublished = true;\n                            _this.publishedOnce = true;\n                            if (_this.displayMyRemote()) {\n                                _this.localMediaStreamWhenSubscribedToRemote = _this.mediaStream;\n                                _this.remotePeerSuccessfullyEstablished(reconnect);\n                            }\n                            if (reconnect) {\n                                _this.ee.emitEvent('stream-reconnected-by-publisher', []);\n                            }\n                            else {\n                                _this.ee.emitEvent('stream-created-by-publisher', []);\n                            }\n                            _this.initWebRtcStats();\n                            logger.info(\"'Publisher' (\" +\n                                _this.streamId +\n                                ') successfully ' +\n                                (reconnect ? 'reconnected' : 'published') +\n                                ' to session');\n                            finalResolve();\n                        })\n                            .catch(function (error) {\n                            finalReject(error);\n                        });\n                    }\n                });\n            };\n            var config = {\n                mediaConstraints: {\n                    audio: _this.hasAudio,\n                    video: _this.hasVideo\n                },\n                simulcast: (_a = _this.outboundStreamOpts.publisherProperties.videoSimulcast) !== null && _a !== void 0 ? _a : _this.session.openvidu.videoSimulcast,\n                onIceCandidate: _this.connection.sendIceCandidate.bind(_this.connection),\n                onIceConnectionStateException: _this.onIceConnectionStateExceptionHandler.bind(_this),\n                iceServers: _this.getIceServersConf(),\n                rtcConfiguration: _this.session.openvidu.advancedConfiguration.rtcConfiguration,\n                mediaStream: _this.mediaStream,\n                mediaServer: _this.session.openvidu.mediaServer,\n                typeOfVideo: _this.typeOfVideo ? TypeOfVideo_1.TypeOfVideo[_this.typeOfVideo] : undefined\n            };\n            if (_this.session.openvidu.mediaServer !== 'mediasoup') {\n                // Simulcast is only supported by mediasoup\n                config.simulcast = false;\n            }\n            if (reconnect) {\n                _this.disposeWebRtcPeer();\n            }\n            if (_this.displayMyRemote()) {\n                _this.webRtcPeer = new WebRtcPeer_1.WebRtcPeerSendrecv(config);\n            }\n            else {\n                _this.webRtcPeer = new WebRtcPeer_1.WebRtcPeerSendonly(config);\n            }\n            _this.webRtcPeer.addIceConnectionStateChangeListener('publisher of ' + _this.connection.connectionId);\n            _this.webRtcPeer\n                .createOffer()\n                .then(function (sdpOffer) {\n                _this.webRtcPeer\n                    .processLocalOffer(sdpOffer)\n                    .then(function () {\n                    successOfferCallback(sdpOffer.sdp);\n                })\n                    .catch(function (error) {\n                    finalReject(new Error('(publish) SDP process local offer error: ' + JSON.stringify(error)));\n                });\n            })\n                .catch(function (error) {\n                finalReject(new Error('(publish) SDP create offer error: ' + JSON.stringify(error)));\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.finalResolveForSubscription = function (reconnect, resolve) {\n        var _a;\n        logger.info(\"'Subscriber' (\" + this.streamId + ') successfully ' + (reconnect ? 'reconnected' : 'subscribed'));\n        this.remotePeerSuccessfullyEstablished(reconnect);\n        this.initWebRtcStats();\n        if (reconnect) {\n            (_a = this.reconnectionEventEmitter) === null || _a === void 0 ? void 0 : _a.emitEvent('success');\n            delete this.reconnectionEventEmitter;\n        }\n        return resolve();\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.finalRejectForSubscription = function (reconnect, error, reject) {\n        var _a;\n        logger.error(\"Error for 'Subscriber' (\" +\n            this.streamId +\n            ') while trying to ' +\n            (reconnect ? 'reconnect' : 'subscribe') +\n            ': ' +\n            error.toString());\n        if (reconnect) {\n            (_a = this.reconnectionEventEmitter) === null || _a === void 0 ? void 0 : _a.emitEvent('error', [error]);\n            delete this.reconnectionEventEmitter;\n        }\n        return reject(error);\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.initWebRtcPeerReceive = function (reconnect) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (reconnect) {\n                if (_this.setupReconnectionEventEmitter(resolve, reject)) {\n                    // Ongoing reconnection\n                    return;\n                }\n            }\n            if (_this.session.openvidu.mediaServer === 'mediasoup') {\n                // Server initiates negotiation\n                _this.initWebRtcPeerReceiveFromServer(reconnect)\n                    .then(function () { return _this.finalResolveForSubscription(reconnect, resolve); })\n                    .catch(function (error) { return _this.finalRejectForSubscription(reconnect, error, reject); });\n            }\n            else {\n                // Client initiates negotiation\n                _this.initWebRtcPeerReceiveFromClient(reconnect)\n                    .then(function () { return _this.finalResolveForSubscription(reconnect, resolve); })\n                    .catch(function (error) { return _this.finalRejectForSubscription(reconnect, error, reject); });\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.initWebRtcPeerReceiveFromClient = function (reconnect) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.completeWebRtcPeerReceive(reconnect, false)\n                .then(function (response) {\n                _this.webRtcPeer\n                    .processRemoteAnswer(response.sdpAnswer)\n                    .then(function () { return resolve(); })\n                    .catch(function (error) { return reject(error); });\n            })\n                .catch(function (error) { return reject(error); });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.initWebRtcPeerReceiveFromServer = function (reconnect) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // Server initiates negotiation\n            _this.session.openvidu.sendRequest('prepareReceiveVideoFrom', { sender: _this.streamId, reconnect: reconnect }, function (error, response) {\n                if (error) {\n                    return reject(new Error('Error on prepareReceiveVideoFrom: ' + JSON.stringify(error)));\n                }\n                else {\n                    _this.completeWebRtcPeerReceive(reconnect, false, response.sdpOffer)\n                        .then(function () { return resolve(); })\n                        .catch(function (error) { return reject(error); });\n                }\n            });\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.completeWebRtcPeerReceive = function (reconnect, forciblyReconnect, sdpOfferByServer) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            logger.debug(\"'Session.subscribe(Stream)' called\");\n            var sendSdpToServer = function (sdpString) {\n                logger.debug(\"Sending local SDP \".concat(!!sdpOfferByServer ? 'answer' : 'offer', \" to subscribe to \").concat(_this.streamId), sdpString);\n                var method = reconnect ? 'reconnectStream' : 'receiveVideoFrom';\n                var params = {};\n                params[reconnect ? 'stream' : 'sender'] = _this.streamId;\n                if (!!sdpOfferByServer) {\n                    params[reconnect ? 'sdpString' : 'sdpAnswer'] = sdpString;\n                }\n                else {\n                    params['sdpOffer'] = sdpString;\n                }\n                if (reconnect) {\n                    params['forciblyReconnect'] = forciblyReconnect;\n                }\n                _this.session.openvidu.sendRequest(method, params, function (error, response) {\n                    if (error) {\n                        return reject(new Error('Error on ' + method + ' : ' + JSON.stringify(error)));\n                    }\n                    else {\n                        return resolve(response);\n                    }\n                });\n            };\n            var config = {\n                mediaConstraints: {\n                    audio: _this.hasAudio,\n                    video: _this.hasVideo\n                },\n                simulcast: false,\n                onIceCandidate: _this.connection.sendIceCandidate.bind(_this.connection),\n                onIceConnectionStateException: _this.onIceConnectionStateExceptionHandler.bind(_this),\n                iceServers: _this.getIceServersConf(),\n                rtcConfiguration: _this.session.openvidu.advancedConfiguration.rtcConfiguration,\n                mediaServer: _this.session.openvidu.mediaServer,\n                typeOfVideo: _this.typeOfVideo ? TypeOfVideo_1.TypeOfVideo[_this.typeOfVideo] : undefined\n            };\n            if (reconnect) {\n                _this.disposeWebRtcPeer();\n            }\n            _this.webRtcPeer = new WebRtcPeer_1.WebRtcPeerRecvonly(config);\n            _this.webRtcPeer.addIceConnectionStateChangeListener(_this.streamId);\n            if (!!sdpOfferByServer) {\n                _this.webRtcPeer\n                    .processRemoteOffer(sdpOfferByServer)\n                    .then(function () {\n                    _this.webRtcPeer\n                        .createAnswer()\n                        .then(function (sdpAnswer) {\n                        _this.webRtcPeer\n                            .processLocalAnswer(sdpAnswer)\n                            .then(function () {\n                            sendSdpToServer(sdpAnswer.sdp);\n                        })\n                            .catch(function (error) {\n                            return reject(new Error('(subscribe) SDP process local answer error: ' + JSON.stringify(error)));\n                        });\n                    })\n                        .catch(function (error) {\n                        return reject(new Error('(subscribe) SDP create answer error: ' + JSON.stringify(error)));\n                    });\n                })\n                    .catch(function (error) {\n                    return reject(new Error('(subscribe) SDP process remote offer error: ' + JSON.stringify(error)));\n                });\n            }\n            else {\n                _this.webRtcPeer\n                    .createOffer()\n                    .then(function (sdpOffer) {\n                    _this.webRtcPeer\n                        .processLocalOffer(sdpOffer)\n                        .then(function () {\n                        sendSdpToServer(sdpOffer.sdp);\n                    })\n                        .catch(function (error) {\n                        return reject(new Error('(subscribe) SDP process local offer error: ' + JSON.stringify(error)));\n                    });\n                })\n                    .catch(function (error) {\n                    return reject(new Error('(subscribe) SDP create offer error: ' + JSON.stringify(error)));\n                });\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.remotePeerSuccessfullyEstablished = function (reconnect) {\n        if (reconnect && this.mediaStream != null) {\n            // Now we can destroy the existing MediaStream\n            this.disposeMediaStream();\n        }\n        this.mediaStream = new MediaStream();\n        var receiver;\n        for (var _i = 0, _a = this.webRtcPeer.pc.getReceivers(); _i < _a.length; _i++) {\n            receiver = _a[_i];\n            if (!!receiver.track) {\n                this.mediaStream.addTrack(receiver.track);\n            }\n        }\n        logger.debug('Peer remote stream', this.mediaStream);\n        if (!!this.mediaStream) {\n            if (this.streamManager instanceof Subscriber_1.Subscriber) {\n                // Apply SubscriberProperties.subscribeToAudio and SubscriberProperties.subscribeToVideo\n                if (!!this.mediaStream.getAudioTracks()[0]) {\n                    var enabled = reconnect ? this.audioActive : !!this.streamManager.properties.subscribeToAudio;\n                    this.mediaStream.getAudioTracks()[0].enabled = enabled;\n                }\n                if (!!this.mediaStream.getVideoTracks()[0]) {\n                    var enabled = reconnect ? this.videoActive : !!this.videoActive && !!this.streamManager.properties.subscribeToVideo;\n                    this.mediaStream.getVideoTracks()[0].enabled = enabled;\n                }\n            }\n            this.updateMediaStreamInVideos();\n            this.initHarkEvents(); // Init hark events for the remote stream\n        }\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.initHarkEvents = function () {\n        if (!!this.mediaStream.getAudioTracks()[0]) {\n            // Hark events can only be set if audio track is available\n            if (this.session.anySpeechEventListenerEnabled('publisherStartSpeaking', true, this.streamManager)) {\n                this.enableOnceHarkSpeakingEvent();\n            }\n            if (this.session.anySpeechEventListenerEnabled('publisherStartSpeaking', false, this.streamManager)) {\n                this.enableHarkSpeakingEvent();\n            }\n            if (this.session.anySpeechEventListenerEnabled('publisherStopSpeaking', true, this.streamManager)) {\n                this.enableOnceHarkStoppedSpeakingEvent();\n            }\n            if (this.session.anySpeechEventListenerEnabled('publisherStopSpeaking', false, this.streamManager)) {\n                this.enableHarkStoppedSpeakingEvent();\n            }\n            if (this.harkVolumeChangeEnabledOnce) {\n                this.enableOnceHarkVolumeChangeEvent(true);\n            }\n            if (this.harkVolumeChangeEnabled) {\n                this.enableHarkVolumeChangeEvent(true);\n            }\n        }\n    };\n    Stream.prototype.onIceConnectionStateExceptionHandler = function (exceptionName, message, data) {\n        switch (exceptionName) {\n            case ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED:\n                this.onIceConnectionFailed();\n                break;\n            case ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED:\n                this.onIceConnectionDisconnected();\n                break;\n        }\n        this.session.emitEvent('exception', [new ExceptionEvent_1.ExceptionEvent(this.session, exceptionName, this, message, data)]);\n    };\n    Stream.prototype.onIceConnectionFailed = function () {\n        // Immediately reconnect, as this is a terminal error\n        logger.log(\"[ICE_CONNECTION_FAILED] Handling ICE_CONNECTION_FAILED event. Reconnecting stream \".concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \")\"));\n        this.reconnectStreamAndLogResultingIceConnectionState(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED);\n    };\n    Stream.prototype.onIceConnectionDisconnected = function () {\n        var _this = this;\n        // Wait to see if the ICE connection is able to reconnect\n        logger.log(\"[ICE_CONNECTION_DISCONNECTED] Handling ICE_CONNECTION_DISCONNECTED event. Waiting for ICE to be restored and reconnect stream \".concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") if not possible\"));\n        var timeout = this.session.openvidu.advancedConfiguration.iceConnectionDisconnectedExceptionTimeout || 4000;\n        this.awaitWebRtcPeerConnectionState(timeout).then(function (state) {\n            switch (state) {\n                case 'failed':\n                    // Do nothing, as an ICE_CONNECTION_FAILED event will have already raised\n                    logger.warn(\"[ICE_CONNECTION_DISCONNECTED] ICE connection of stream \".concat(_this.streamId, \" (\").concat(_this.isLocal() ? 'Publisher' : 'Subscriber', \") is now failed after ICE_CONNECTION_DISCONNECTED\"));\n                    break;\n                case 'connected':\n                case 'completed':\n                    logger.log(\"[ICE_CONNECTION_DISCONNECTED] ICE connection of stream \".concat(_this.streamId, \" (\").concat(_this.isLocal() ? 'Publisher' : 'Subscriber', \") automatically restored after ICE_CONNECTION_DISCONNECTED. Current ICE connection state: \").concat(state));\n                    break;\n                case 'closed':\n                case 'checking':\n                case 'new':\n                case 'disconnected':\n                    // Rest of states\n                    logger.warn(\"[ICE_CONNECTION_DISCONNECTED] ICE connection of stream \".concat(_this.streamId, \" (\").concat(_this.isLocal() ? 'Publisher' : 'Subscriber', \") couldn't be restored after ICE_CONNECTION_DISCONNECTED event. Current ICE connection state after \").concat(timeout, \" ms: \").concat(state));\n                    _this.reconnectStreamAndLogResultingIceConnectionState(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED);\n                    break;\n            }\n        });\n    };\n    Stream.prototype.reconnectStreamAndLogResultingIceConnectionState = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var finalIceStateAfterReconnection, error_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.reconnectStreamAndReturnIceConnectionState(event)];\n                    case 1:\n                        finalIceStateAfterReconnection = _a.sent();\n                        switch (finalIceStateAfterReconnection) {\n                            case 'connected':\n                            case 'completed':\n                                logger.log(\"[\".concat(event, \"] Stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") successfully reconnected after \").concat(event, \". Current ICE connection state: \").concat(finalIceStateAfterReconnection));\n                                break;\n                            default:\n                                logger.error(\"[\".concat(event, \"] Stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") failed to reconnect after \").concat(event, \". Current ICE connection state: \").concat(finalIceStateAfterReconnection));\n                                break;\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_5 = _a.sent();\n                        logger.error(\"[\".concat(event, \"] Error reconnecting stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") after \").concat(event, \": \").concat(error_5));\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Stream.prototype.reconnectStreamAndReturnIceConnectionState = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var timeout, error_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.log(\"[\".concat(event, \"] Reconnecting stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") after event \").concat(event));\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.reconnectStream(event)];\n                    case 2:\n                        _a.sent();\n                        timeout = this.session.openvidu.advancedConfiguration.iceConnectionDisconnectedExceptionTimeout || 4000;\n                        return [2 /*return*/, this.awaitWebRtcPeerConnectionState(timeout)];\n                    case 3:\n                        error_6 = _a.sent();\n                        logger.warn(\"[\".concat(event, \"] Error reconnecting stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \"). Reason: \").concat(error_6));\n                        return [2 /*return*/, this.awaitWebRtcPeerConnectionState(1)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Stream.prototype.awaitWebRtcPeerConnectionState = function (timeout) {\n        return __awaiter(this, void 0, void 0, function () {\n            var state, interval, intervals, i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        state = this.getRTCPeerConnection().iceConnectionState;\n                        interval = 150;\n                        intervals = Math.ceil(timeout / interval);\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < intervals)) return [3 /*break*/, 4];\n                        state = this.getRTCPeerConnection().iceConnectionState;\n                        if (state === 'connected' || state === 'completed') {\n                            return [3 /*break*/, 4];\n                        }\n                        // Sleep\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, interval); })];\n                    case 2:\n                        // Sleep\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, state];\n                }\n            });\n        });\n    };\n    Stream.prototype.reconnectStream = function (event) {\n        return __awaiter(this, void 0, void 0, function () {\n            var isWsConnected, errorMsg;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.isWebsocketConnected(event, 3000)];\n                    case 1:\n                        isWsConnected = _a.sent();\n                        if (isWsConnected) {\n                            // There is connection to openvidu-server. The RTCPeerConnection is the only one broken\n                            logger.log(\"[\".concat(event, \"] Trying to reconnect stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") and the websocket is opened\"));\n                            if (this.isLocal()) {\n                                return [2 /*return*/, this.initWebRtcPeerSend(true)];\n                            }\n                            else {\n                                return [2 /*return*/, this.initWebRtcPeerReceive(true)];\n                            }\n                        }\n                        else {\n                            errorMsg = \"[\".concat(event, \"] Trying to reconnect stream \").concat(this.streamId, \" (\").concat(this.isLocal() ? 'Publisher' : 'Subscriber', \") but the websocket wasn't opened\");\n                            logger.error(errorMsg);\n                            throw Error(errorMsg);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Stream.prototype.isWebsocketConnected = function (event, msResponseTimeout) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var wsReadyState = _this.session.openvidu.getWsReadyState();\n            if (wsReadyState === 1) {\n                var responseTimeout_1 = setTimeout(function () {\n                    console.warn(\"[\".concat(event, \"] Websocket timeout of \").concat(msResponseTimeout, \"ms\"));\n                    return resolve(false);\n                }, msResponseTimeout);\n                _this.session.openvidu.sendRequest('echo', {}, function (error, response) {\n                    clearTimeout(responseTimeout_1);\n                    if (!!error) {\n                        console.warn(\"[\".concat(event, \"] Websocket 'echo' returned error: \").concat(error));\n                        return resolve(false);\n                    }\n                    else {\n                        return resolve(true);\n                    }\n                });\n            }\n            else {\n                console.warn(\"[\".concat(event, \"] Websocket readyState is \").concat(wsReadyState));\n                return resolve(false);\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Stream.prototype.initWebRtcStats = function () {\n        this.webRtcStats = new WebRtcStats_1.WebRtcStats(this);\n        this.webRtcStats.initWebRtcStats();\n        //TODO: send common webrtc stats from client to openvidu-server\n        /*if (this.session.openvidu.webrtcStatsInterval > 0) {\n            setInterval(() => {\n                this.gatherStatsForPeer().then(jsonStats => {\n                    const body = {\n                        sessionId: this.session.sessionId,\n                        participantPrivateId: this.connection.rpcSessionId,\n                        stats: jsonStats\n                    }\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('POST', this.session.openvidu.httpUri + '/elasticsearch/webrtc-stats', true);\n                    xhr.setRequestHeader('Content-Type', 'application/json');\n                    xhr.send(JSON.stringify(body));\n                })\n            }, this.session.openvidu.webrtcStatsInterval * 1000);\n        }*/\n    };\n    Stream.prototype.stopWebRtcStats = function () {\n        if (!!this.webRtcStats && this.webRtcStats.isEnabled()) {\n            this.webRtcStats.stopWebRtcStats();\n        }\n    };\n    Stream.prototype.getIceServersConf = function () {\n        var _a;\n        var returnValue;\n        if (!!this.session.openvidu.advancedConfiguration.iceServers) {\n            returnValue =\n                this.session.openvidu.advancedConfiguration.iceServers === 'freeice'\n                    ? undefined\n                    : this.session.openvidu.advancedConfiguration.iceServers;\n        }\n        else if (!!((_a = this.session.openvidu.advancedConfiguration.rtcConfiguration) === null || _a === void 0 ? void 0 : _a.iceServers)) {\n            returnValue = this.session.openvidu.advancedConfiguration.rtcConfiguration.iceServers;\n        }\n        else if (this.session.openvidu.iceServers) {\n            returnValue = this.session.openvidu.iceServers;\n        }\n        else {\n            returnValue = undefined;\n        }\n        return returnValue;\n    };\n    Stream.prototype.gatherStatsForPeer = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.isLocal()) {\n                // Publisher stream stats\n                _this.getRTCPeerConnection()\n                    .getSenders()\n                    .forEach(function (sender) {\n                    return sender.getStats().then(function (response) {\n                        response.forEach(function (report) {\n                            if (_this.isReportWanted(report)) {\n                                var finalReport = {};\n                                finalReport['type'] = report.type;\n                                finalReport['timestamp'] = report.timestamp;\n                                finalReport['id'] = report.id;\n                                // Common to Chrome, Firefox and Safari\n                                if (report.type === 'outbound-rtp') {\n                                    finalReport['ssrc'] = report.ssrc;\n                                    finalReport['firCount'] = report.firCount;\n                                    finalReport['pliCount'] = report.pliCount;\n                                    finalReport['nackCount'] = report.nackCount;\n                                    finalReport['qpSum'] = report.qpSum;\n                                    // Set media type\n                                    if (!!report.kind) {\n                                        finalReport['mediaType'] = report.kind;\n                                    }\n                                    else if (!!report.mediaType) {\n                                        finalReport['mediaType'] = report.mediaType;\n                                    }\n                                    else {\n                                        // Safari does not have 'mediaType' defined for inbound-rtp. Must be inferred from 'id' field\n                                        finalReport['mediaType'] = report.id.indexOf('VideoStream') !== -1 ? 'video' : 'audio';\n                                    }\n                                    if (finalReport['mediaType'] === 'video') {\n                                        finalReport['framesEncoded'] = report.framesEncoded;\n                                    }\n                                    finalReport['packetsSent'] = report.packetsSent;\n                                    finalReport['bytesSent'] = report.bytesSent;\n                                }\n                                // Only for Chrome and Safari\n                                if (report.type === 'candidate-pair' && report.totalRoundTripTime !== undefined) {\n                                    // This is the final selected candidate pair\n                                    finalReport['availableOutgoingBitrate'] = report.availableOutgoingBitrate;\n                                    finalReport['rtt'] = report.currentRoundTripTime;\n                                    finalReport['averageRtt'] = report.totalRoundTripTime / report.responsesReceived;\n                                }\n                                // Only for Firefox >= 66.0\n                                if (report.type === 'remote-inbound-rtp' || report.type === 'remote-outbound-rtp') {\n                                }\n                                logger.log(finalReport);\n                            }\n                        });\n                    });\n                });\n            }\n            else {\n                // Subscriber stream stats\n                _this.getRTCPeerConnection()\n                    .getReceivers()\n                    .forEach(function (receiver) {\n                    return receiver.getStats().then(function (response) {\n                        response.forEach(function (report) {\n                            if (_this.isReportWanted(report)) {\n                                var finalReport = {};\n                                finalReport['type'] = report.type;\n                                finalReport['timestamp'] = report.timestamp;\n                                finalReport['id'] = report.id;\n                                // Common to Chrome, Firefox and Safari\n                                if (report.type === 'inbound-rtp') {\n                                    finalReport['ssrc'] = report.ssrc;\n                                    finalReport['firCount'] = report.firCount;\n                                    finalReport['pliCount'] = report.pliCount;\n                                    finalReport['nackCount'] = report.nackCount;\n                                    finalReport['qpSum'] = report.qpSum;\n                                    // Set media type\n                                    if (!!report.kind) {\n                                        finalReport['mediaType'] = report.kind;\n                                    }\n                                    else if (!!report.mediaType) {\n                                        finalReport['mediaType'] = report.mediaType;\n                                    }\n                                    else {\n                                        // Safari does not have 'mediaType' defined for inbound-rtp. Must be inferred from 'id' field\n                                        finalReport['mediaType'] = report.id.indexOf('VideoStream') !== -1 ? 'video' : 'audio';\n                                    }\n                                    if (finalReport['mediaType'] === 'video') {\n                                        finalReport['framesDecoded'] = report.framesDecoded;\n                                    }\n                                    finalReport['packetsReceived'] = report.packetsReceived;\n                                    finalReport['packetsLost'] = report.packetsLost;\n                                    finalReport['jitter'] = report.jitter;\n                                    finalReport['bytesReceived'] = report.bytesReceived;\n                                }\n                                // Only for Chrome and Safari\n                                if (report.type === 'candidate-pair' && report.totalRoundTripTime !== undefined) {\n                                    // This is the final selected candidate pair\n                                    finalReport['availableIncomingBitrate'] = report.availableIncomingBitrate;\n                                    finalReport['rtt'] = report.currentRoundTripTime;\n                                    finalReport['averageRtt'] = report.totalRoundTripTime / report.responsesReceived;\n                                }\n                                // Only for Firefox >= 66.0\n                                if (report.type === 'remote-inbound-rtp' || report.type === 'remote-outbound-rtp') {\n                                }\n                                logger.log(finalReport);\n                            }\n                        });\n                    });\n                });\n            }\n        });\n    };\n    Stream.prototype.isReportWanted = function (report) {\n        return ((report.type === 'inbound-rtp' && !this.isLocal()) ||\n            (report.type === 'outbound-rtp' && this.isLocal()) ||\n            (report.type === 'candidate-pair' && report.nominated && report.bytesSent > 0));\n    };\n    return Stream;\n}());\nexports.Stream = Stream;\n//# sourceMappingURL=Stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/StreamManager.js":
/*!*********************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/StreamManager.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamManager = void 0;\nvar EventDispatcher_1 = __webpack_require__(/*! ./EventDispatcher */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/EventDispatcher.js\");\nvar StreamManagerEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/StreamManagerEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamManagerEvent.js\");\nvar VideoElementEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/VideoElementEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/VideoElementEvent.js\");\nvar ExceptionEvent_1 = __webpack_require__(/*! ../OpenViduInternal/Events/ExceptionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\");\nvar VideoInsertMode_1 = __webpack_require__(/*! ../OpenViduInternal/Enums/VideoInsertMode */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\nvar Platform_1 = __webpack_require__(/*! ../OpenViduInternal/Utils/Platform */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Utils/Platform.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Interface in charge of displaying the media streams in the HTML DOM. This wraps any {@link Publisher} and {@link Subscriber} object.\n * You can insert as many video players fo the same Stream as you want by calling {@link StreamManager.addVideoElement} or\n * {@link StreamManager.createVideoElement}.\n * The use of StreamManager wrapper is particularly useful when you don't need to differentiate between Publisher or Subscriber streams or just\n * want to directly manage your own video elements (even more than one video element per Stream). This scenario is pretty common in\n * declarative, MVC frontend frameworks such as Angular, React or Vue.js\n *\n * See available event listeners at {@link StreamManagerEventMap}.\n */\nvar StreamManager = /** @class */ (function (_super) {\n    __extends(StreamManager, _super);\n    /**\n     * @hidden\n     */\n    function StreamManager(stream, targetElement) {\n        var _this = _super.call(this) || this;\n        /**\n         * All the videos displaying the Stream of this Publisher/Subscriber\n         */\n        _this.videos = [];\n        /**\n         * @hidden\n         */\n        _this.lazyLaunchVideoElementCreatedEvent = false;\n        platform = Platform_1.PlatformUtils.getInstance();\n        _this.stream = stream;\n        _this.stream.streamManager = _this;\n        _this.remote = !_this.stream.isLocal();\n        if (!!targetElement) {\n            var targEl = void 0;\n            if (typeof targetElement === 'string') {\n                targEl = document.getElementById(targetElement);\n            }\n            else if (targetElement instanceof HTMLElement) {\n                targEl = targetElement;\n            }\n            if (!!targEl) {\n                _this.firstVideoElement = {\n                    targetElement: targEl,\n                    video: document.createElement('video'),\n                    id: '',\n                    canplayListenerAdded: false\n                };\n                if (platform.isSafariBrowser() ||\n                    (platform.isIPhoneOrIPad() &&\n                        (platform.isChromeMobileBrowser() ||\n                            platform.isEdgeMobileBrowser() ||\n                            platform.isOperaMobileBrowser() ||\n                            platform.isFirefoxMobileBrowser()))) {\n                    _this.firstVideoElement.video.playsInline = true;\n                }\n                _this.targetElement = targEl;\n                _this.element = targEl;\n            }\n        }\n        _this.canPlayListener = function () {\n            _this.deactivateStreamPlayingEventExceptionTimeout();\n            _this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(_this, 'streamPlaying', undefined)]);\n        };\n        return _this;\n    }\n    /**\n     * See {@link EventDispatcher.on}\n     */\n    StreamManager.prototype.on = function (type, handler) {\n        _super.prototype.onAux.call(this, type, \"Event '\" + type + \"' triggered by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n        if (type === 'videoElementCreated') {\n            if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n                this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n                this.lazyLaunchVideoElementCreatedEvent = false;\n            }\n        }\n        if (type === 'streamPlaying') {\n            if (this.videos[0] &&\n                this.videos[0].video &&\n                this.videos[0].video.currentTime > 0 &&\n                this.videos[0].video.paused === false &&\n                this.videos[0].video.ended === false &&\n                this.videos[0].video.readyState === 4) {\n                this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(this, 'streamPlaying', undefined)]);\n            }\n        }\n        if (this.stream.hasAudio) {\n            if (type === 'publisherStartSpeaking') {\n                this.stream.enableHarkSpeakingEvent();\n            }\n            if (type === 'publisherStopSpeaking') {\n                this.stream.enableHarkStoppedSpeakingEvent();\n            }\n            if (type === 'streamAudioVolumeChange') {\n                this.stream.enableHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    };\n    /**\n     * See {@link EventDispatcher.once}\n     */\n    StreamManager.prototype.once = function (type, handler) {\n        _super.prototype.onceAux.call(this, type, \"Event '\" + type + \"' triggered once by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n        if (type === 'videoElementCreated') {\n            if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n                this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n            }\n        }\n        if (type === 'streamPlaying') {\n            if (this.videos[0] &&\n                this.videos[0].video &&\n                this.videos[0].video.currentTime > 0 &&\n                this.videos[0].video.paused === false &&\n                this.videos[0].video.ended === false &&\n                this.videos[0].video.readyState === 4) {\n                this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(this, 'streamPlaying', undefined)]);\n            }\n        }\n        if (this.stream.hasAudio) {\n            if (type === 'publisherStartSpeaking') {\n                this.stream.enableOnceHarkSpeakingEvent();\n            }\n            if (type === 'publisherStopSpeaking') {\n                this.stream.enableOnceHarkStoppedSpeakingEvent();\n            }\n            if (type === 'streamAudioVolumeChange') {\n                this.stream.enableOnceHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    };\n    /**\n     * See {@link EventDispatcher.off}\n     */\n    StreamManager.prototype.off = function (type, handler) {\n        _super.prototype.offAux.call(this, type, handler);\n        if (type === 'publisherStartSpeaking') {\n            // Both StreamManager and Session can have \"publisherStartSpeaking\" event listeners\n            var remainingStartSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n            if (remainingStartSpeakingEventListeners === 0) {\n                this.stream.disableHarkSpeakingEvent(false);\n            }\n        }\n        if (type === 'publisherStopSpeaking') {\n            // Both StreamManager and Session can have \"publisherStopSpeaking\" event listeners\n            var remainingStopSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n            if (remainingStopSpeakingEventListeners === 0) {\n                this.stream.disableHarkStoppedSpeakingEvent(false);\n            }\n        }\n        if (type === 'streamAudioVolumeChange') {\n            // Only StreamManager can have \"streamAudioVolumeChange\" event listeners\n            var remainingVolumeEventListeners = this.ee.getListeners(type).length;\n            if (remainingVolumeEventListeners === 0) {\n                this.stream.disableHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    };\n    /**\n     * Makes `video` element parameter display this {@link stream}. This is useful when you are\n     * [managing the video elements on your own](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)\n     *\n     * Calling this method with a video already added to other Publisher/Subscriber will cause the video element to be\n     * disassociated from that previous Publisher/Subscriber and to be associated to this one.\n     *\n     * @returns 1 if the video wasn't associated to any other Publisher/Subscriber and has been successfully added to this one.\n     * 0 if the video was already added to this Publisher/Subscriber. -1 if the video was previously associated to any other\n     * Publisher/Subscriber and has been successfully disassociated from that one and properly added to this one.\n     */\n    StreamManager.prototype.addVideoElement = function (video) {\n        this.initializeVideoProperties(video);\n        if (!this.remote && this.stream.displayMyRemote()) {\n            if (video.srcObject !== this.stream.getMediaStream()) {\n                video.srcObject = this.stream.getMediaStream();\n            }\n        }\n        // If the video element is already part of this StreamManager do nothing\n        for (var _i = 0, _a = this.videos; _i < _a.length; _i++) {\n            var v = _a[_i];\n            if (v.video === video) {\n                return 0;\n            }\n        }\n        var returnNumber = 1;\n        for (var _b = 0, _c = this.stream.session.streamManagers; _b < _c.length; _b++) {\n            var streamManager = _c[_b];\n            if (streamManager.disassociateVideo(video)) {\n                returnNumber = -1;\n                break;\n            }\n        }\n        this.stream.session.streamManagers.forEach(function (streamManager) {\n            streamManager.disassociateVideo(video);\n        });\n        this.pushNewStreamManagerVideo({\n            video: video,\n            id: video.id,\n            canplayListenerAdded: false\n        });\n        logger.info('New video element associated to ', this);\n        return returnNumber;\n    };\n    /**\n     * Creates a new video element displaying this {@link stream}. This allows you to have multiple video elements displaying the same media stream.\n     *\n     * #### Events dispatched\n     *\n     * The Publisher/Subscriber object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM. See {@link VideoElementEvent}\n     *\n     * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Publisher/Subscriber will be inserted\n     * @param insertMode How the video element will be inserted accordingly to `targetElemet`\n     *\n     * @returns The created HTMLVideoElement\n     */\n    StreamManager.prototype.createVideoElement = function (targetElement, insertMode) {\n        var targEl;\n        if (typeof targetElement === 'string') {\n            targEl = document.getElementById(targetElement);\n            if (!targEl) {\n                throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n            }\n        }\n        else if (targetElement instanceof HTMLElement) {\n            targEl = targetElement;\n        }\n        else {\n            throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n        }\n        var video = this.createVideo();\n        this.initializeVideoProperties(video);\n        var insMode = !!insertMode ? insertMode : VideoInsertMode_1.VideoInsertMode.APPEND;\n        switch (insMode) {\n            case VideoInsertMode_1.VideoInsertMode.AFTER:\n                targEl.parentNode.insertBefore(video, targEl.nextSibling);\n                break;\n            case VideoInsertMode_1.VideoInsertMode.APPEND:\n                targEl.appendChild(video);\n                break;\n            case VideoInsertMode_1.VideoInsertMode.BEFORE:\n                targEl.parentNode.insertBefore(video, targEl);\n                break;\n            case VideoInsertMode_1.VideoInsertMode.PREPEND:\n                targEl.insertBefore(video, targEl.childNodes[0]);\n                break;\n            case VideoInsertMode_1.VideoInsertMode.REPLACE:\n                targEl.parentNode.replaceChild(video, targEl);\n                break;\n            default:\n                insMode = VideoInsertMode_1.VideoInsertMode.APPEND;\n                targEl.appendChild(video);\n                break;\n        }\n        var v = {\n            targetElement: targEl,\n            video: video,\n            insertMode: insMode,\n            id: video.id,\n            canplayListenerAdded: false\n        };\n        this.pushNewStreamManagerVideo(v);\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(v.video, this, 'videoElementCreated')]);\n        this.lazyLaunchVideoElementCreatedEvent = !!this.firstVideoElement;\n        return video;\n    };\n    /**\n     * Updates the current configuration for the {@link PublisherSpeakingEvent} feature and the [StreamManagerEvent.streamAudioVolumeChange](/en/stable/api/openvidu-browser/classes/StreamManagerEvent.html) feature for this specific\n     * StreamManager audio stream, overriding the global options set with {@link OpenVidu.setAdvancedConfiguration}. This way you can customize the audio events options\n     * for each specific StreamManager and change them dynamically.\n     *\n     * @param publisherSpeakingEventsOptions New options to be applied to this StreamManager's audio stream. It is an object which includes the following optional properties:\n     * - `interval`: (number) how frequently the analyser polls the audio stream to check if speaking has started/stopped or audio volume has changed. Default **100** (ms)\n     * - `threshold`: (number) the volume at which _publisherStartSpeaking_, _publisherStopSpeaking_ events will be fired. Default **-50** (dB)\n     */\n    StreamManager.prototype.updatePublisherSpeakingEventsOptions = function (publisherSpeakingEventsOptions) {\n        var currentHarkOptions = !!this.stream.harkOptions\n            ? this.stream.harkOptions\n            : this.stream.session.openvidu.advancedConfiguration.publisherSpeakingEventsOptions || {};\n        var newInterval = typeof publisherSpeakingEventsOptions.interval === 'number'\n            ? publisherSpeakingEventsOptions.interval\n            : typeof currentHarkOptions.interval === 'number'\n                ? currentHarkOptions.interval\n                : 100;\n        var newThreshold = typeof publisherSpeakingEventsOptions.threshold === 'number'\n            ? publisherSpeakingEventsOptions.threshold\n            : typeof currentHarkOptions.threshold === 'number'\n                ? currentHarkOptions.threshold\n                : -50;\n        this.stream.harkOptions = {\n            interval: newInterval,\n            threshold: newThreshold\n        };\n        if (!!this.stream.speechEvent) {\n            this.stream.speechEvent.setInterval(newInterval);\n            this.stream.speechEvent.setThreshold(newThreshold);\n        }\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.initializeVideoProperties = function (video) {\n        if (!(!this.remote && this.stream.displayMyRemote())) {\n            // Avoid setting the MediaStream into the srcObject if remote subscription before publishing\n            if (video.srcObject !== this.stream.getMediaStream()) {\n                // If srcObject already set don't do it again\n                video.srcObject = this.stream.getMediaStream();\n            }\n        }\n        video.autoplay = true;\n        video.controls = false;\n        if (platform.isSafariBrowser() ||\n            (platform.isIPhoneOrIPad() &&\n                (platform.isChromeMobileBrowser() ||\n                    platform.isEdgeMobileBrowser() ||\n                    platform.isOperaMobileBrowser() ||\n                    platform.isFirefoxMobileBrowser()))) {\n            video.playsInline = true;\n        }\n        if (!video.id) {\n            video.id = (this.remote ? 'remote-' : 'local-') + 'video-' + this.stream.streamId;\n            // DEPRECATED property: assign once the property id if the user provided a valid targetElement\n            if (!this.id && !!this.targetElement) {\n                this.id = video.id;\n            }\n        }\n        if (this.remote && this.isMirroredVideo(video)) {\n            // Subscriber video associated to a previously mirrored video element\n            this.removeMirrorVideo(video);\n        }\n        else if (!this.remote && !this.stream.displayMyRemote()) {\n            // Publisher video\n            video.muted = true;\n            if (this.isMirroredVideo(video) && !this.stream.outboundStreamOpts.publisherProperties.mirror) {\n                // If the video was already rotated and now is set to not mirror\n                this.removeMirrorVideo(video);\n            }\n            else if (this.stream.outboundStreamOpts.publisherProperties.mirror && !this.stream.isSendScreen()) {\n                // If the video is now set to mirror and is not screen share\n                this.mirrorVideo(video);\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.removeAllVideos = function () {\n        var _this = this;\n        for (var i = this.stream.session.streamManagers.length - 1; i >= 0; --i) {\n            if (this.stream.session.streamManagers[i] === this) {\n                this.stream.session.streamManagers.splice(i, 1);\n            }\n        }\n        this.videos.forEach(function (streamManagerVideo) {\n            // Remove oncanplay event listener (only OpenVidu browser listener, not the user ones)\n            if (!!streamManagerVideo.video && !!streamManagerVideo.video.removeEventListener) {\n                streamManagerVideo.video.removeEventListener('canplay', _this.canPlayListener);\n            }\n            streamManagerVideo.canplayListenerAdded = false;\n            if (!!streamManagerVideo.targetElement) {\n                // Only remove from DOM videos created by OpenVidu Browser (those generated by passing a valid targetElement in OpenVidu.initPublisher\n                // and Session.subscribe or those created by StreamManager.createVideoElement). All this videos triggered a videoElementCreated event\n                streamManagerVideo.video.parentNode.removeChild(streamManagerVideo.video);\n                _this.ee.emitEvent('videoElementDestroyed', [\n                    new VideoElementEvent_1.VideoElementEvent(streamManagerVideo.video, _this, 'videoElementDestroyed')\n                ]);\n            }\n            // Remove srcObject from the video\n            _this.removeSrcObject(streamManagerVideo);\n            // Remove from collection of videos every video managed by OpenVidu Browser\n            _this.videos = _this.videos.filter(function (v) { return !v.targetElement; });\n        });\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.disassociateVideo = function (video) {\n        var disassociated = false;\n        for (var i = 0; i < this.videos.length; i++) {\n            if (this.videos[i].video === video) {\n                this.videos[i].video.removeEventListener('canplay', this.canPlayListener);\n                this.videos.splice(i, 1);\n                disassociated = true;\n                logger.info('Video element disassociated from ', this);\n                break;\n            }\n        }\n        return disassociated;\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.addPlayEventToFirstVideo = function () {\n        if (!!this.videos[0] && !!this.videos[0].video && !this.videos[0].canplayListenerAdded) {\n            this.activateStreamPlayingEventExceptionTimeout();\n            this.videos[0].video.addEventListener('canplay', this.canPlayListener);\n            this.videos[0].canplayListenerAdded = true;\n        }\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.updateMediaStream = function (mediaStream) {\n        this.videos.forEach(function (streamManagerVideo) {\n            streamManagerVideo.video.srcObject = mediaStream;\n            if (platform.isIonicIos()) {\n                // iOS Ionic. LIMITATION: must reinsert the video in the DOM for\n                // the media stream to be updated\n                var vParent = streamManagerVideo.video.parentElement;\n                var newVideo = streamManagerVideo.video;\n                vParent.replaceChild(newVideo, streamManagerVideo.video);\n                streamManagerVideo.video = newVideo;\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.emitEvent = function (type, eventArray) {\n        this.ee.emitEvent(type, eventArray);\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.createVideo = function () {\n        return document.createElement('video');\n    };\n    /**\n     * @hidden\n     */\n    StreamManager.prototype.removeSrcObject = function (streamManagerVideo) {\n        streamManagerVideo.video.srcObject = null;\n        this.deactivateStreamPlayingEventExceptionTimeout();\n    };\n    /* Private methods */\n    StreamManager.prototype.pushNewStreamManagerVideo = function (streamManagerVideo) {\n        this.videos.push(streamManagerVideo);\n        this.addPlayEventToFirstVideo();\n        if (this.stream.session.streamManagers.indexOf(this) === -1) {\n            this.stream.session.streamManagers.push(this);\n        }\n    };\n    StreamManager.prototype.mirrorVideo = function (video) {\n        if (!platform.isIonicIos()) {\n            video.style.transform = 'rotateY(180deg)';\n            video.style.webkitTransform = 'rotateY(180deg)';\n        }\n    };\n    StreamManager.prototype.removeMirrorVideo = function (video) {\n        video.style.transform = 'unset';\n        video.style.webkitTransform = 'unset';\n    };\n    StreamManager.prototype.isMirroredVideo = function (video) {\n        return video.style.transform === 'rotateY(180deg)' || video.style.webkitTransform === 'rotateY(180deg)';\n    };\n    StreamManager.prototype.activateStreamPlayingEventExceptionTimeout = function () {\n        var _this = this;\n        if (!this.remote) {\n            // ExceptionEvent NO_STREAM_PLAYING_EVENT is only for subscribers\n            return;\n        }\n        if (this.streamPlayingEventExceptionTimeout != null) {\n            // The timeout is already activated\n            return;\n        }\n        // Trigger ExceptionEvent NO_STREAM_PLAYING_EVENT if after timeout there is no 'canplay' event\n        var msTimeout = this.stream.session.openvidu.advancedConfiguration.noStreamPlayingEventExceptionTimeout || 4000;\n        this.streamPlayingEventExceptionTimeout = setTimeout(function () {\n            var msg = 'StreamManager of Stream ' +\n                _this.stream.streamId +\n                ' (' +\n                (_this.remote ? 'Subscriber' : 'Publisher') +\n                ') did not trigger \"streamPlaying\" event in ' +\n                msTimeout +\n                ' ms';\n            logger.warn(msg);\n            _this.stream.session.emitEvent('exception', [\n                new ExceptionEvent_1.ExceptionEvent(_this.stream.session, ExceptionEvent_1.ExceptionEventName.NO_STREAM_PLAYING_EVENT, _this, msg)\n            ]);\n            delete _this.streamPlayingEventExceptionTimeout;\n        }, msTimeout);\n    };\n    StreamManager.prototype.deactivateStreamPlayingEventExceptionTimeout = function () {\n        clearTimeout(this.streamPlayingEventExceptionTimeout);\n        delete this.streamPlayingEventExceptionTimeout;\n    };\n    return StreamManager;\n}(EventDispatcher_1.EventDispatcher));\nexports.StreamManager = StreamManager;\n//# sourceMappingURL=StreamManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/StreamManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Subscriber.js":
/*!******************************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/OpenVidu/Subscriber.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Subscriber = void 0;\nvar StreamManager_1 = __webpack_require__(/*! ./StreamManager */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/StreamManager.js\");\nvar OpenViduLogger_1 = __webpack_require__(/*! ../OpenViduInternal/Logger/OpenViduLogger */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Logger/OpenViduLogger.js\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Packs remote media streams. Participants automatically receive them when others publish their streams. Initialized with {@link Session.subscribe} method\n *\n * See available event listeners at {@link StreamManagerEventMap}.\n */\nvar Subscriber = /** @class */ (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @hidden\n     */\n    function Subscriber(stream, targEl, properties) {\n        var _this = _super.call(this, stream, targEl) || this;\n        _this.element = _this.targetElement;\n        _this.stream = stream;\n        _this.properties = properties;\n        return _this;\n    }\n    /**\n     * Subscribe or unsubscribe from the audio stream (if available). Calling this method twice in a row passing same value will have no effect\n     * @param value `true` to subscribe to the audio stream, `false` to unsubscribe from it\n     */\n    Subscriber.prototype.subscribeToAudio = function (value) {\n        this.stream\n            .getMediaStream()\n            .getAudioTracks()\n            .forEach(function (track) {\n            track.enabled = value;\n        });\n        this.stream.audioActive = value;\n        logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its audio stream');\n        return this;\n    };\n    /**\n     * Subscribe or unsubscribe from the video stream (if available). Calling this method twice in a row passing same value will have no effect\n     * @param value `true` to subscribe to the video stream, `false` to unsubscribe from it\n     */\n    Subscriber.prototype.subscribeToVideo = function (value) {\n        this.stream\n            .getMediaStream()\n            .getVideoTracks()\n            .forEach(function (track) {\n            track.enabled = value;\n        });\n        this.stream.videoActive = value;\n        logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its video stream');\n        return this;\n    };\n    /* Hidden methods */\n    /**\n     * @hidden\n     */\n    Subscriber.prototype.replaceTrackInMediaStream = function (track, updateLastConstraints) {\n        var mediaStream = this.stream.getMediaStream();\n        var removedTrack;\n        if (track.kind === 'video') {\n            removedTrack = mediaStream.getVideoTracks()[0];\n            if (updateLastConstraints) {\n                this.stream.lastVideoTrackConstraints = track.getConstraints();\n            }\n        }\n        else {\n            removedTrack = mediaStream.getAudioTracks()[0];\n        }\n        mediaStream.removeTrack(removedTrack);\n        removedTrack.stop();\n        mediaStream.addTrack(track);\n    };\n    return Subscriber;\n}(StreamManager_1.StreamManager));\nexports.Subscriber = Subscriber;\n//# sourceMappingURL=Subscriber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHUvU3Vic2NyaWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBaUI7QUFDL0MsdUJBQXVCLG1CQUFPLENBQUMsc0lBQTJDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SEFBNEgseUJBQXlCO0FBQ3JKO0FBQ0EscUNBQXFDLDRCQUE0QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnZpZHUtcmVhY3QvLi9ub2RlX21vZHVsZXMvb3BlbnZpZHUtYnJvd3Nlci9saWIvT3BlblZpZHUvU3Vic2NyaWJlci5qcz9hOGU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIChDKSBDb3B5cmlnaHQgMjAxNy0yMDIyIE9wZW5WaWR1IChodHRwczovL29wZW52aWR1LmlvKVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gdm9pZCAwO1xudmFyIFN0cmVhbU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL1N0cmVhbU1hbmFnZXJcIik7XG52YXIgT3BlblZpZHVMb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi9PcGVuVmlkdUludGVybmFsL0xvZ2dlci9PcGVuVmlkdUxvZ2dlclwiKTtcbi8qKlxuICogQGhpZGRlblxuICovXG52YXIgbG9nZ2VyID0gT3BlblZpZHVMb2dnZXJfMS5PcGVuVmlkdUxvZ2dlci5nZXRJbnN0YW5jZSgpO1xuLyoqXG4gKiBQYWNrcyByZW1vdGUgbWVkaWEgc3RyZWFtcy4gUGFydGljaXBhbnRzIGF1dG9tYXRpY2FsbHkgcmVjZWl2ZSB0aGVtIHdoZW4gb3RoZXJzIHB1Ymxpc2ggdGhlaXIgc3RyZWFtcy4gSW5pdGlhbGl6ZWQgd2l0aCB7QGxpbmsgU2Vzc2lvbi5zdWJzY3JpYmV9IG1ldGhvZFxuICpcbiAqIFNlZSBhdmFpbGFibGUgZXZlbnQgbGlzdGVuZXJzIGF0IHtAbGluayBTdHJlYW1NYW5hZ2VyRXZlbnRNYXB9LlxuICovXG52YXIgU3Vic2NyaWJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihzdHJlYW0sIHRhcmdFbCwgcHJvcGVydGllcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzdHJlYW0sIHRhcmdFbCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZWxlbWVudCA9IF90aGlzLnRhcmdldEVsZW1lbnQ7XG4gICAgICAgIF90aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgX3RoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIGZyb20gdGhlIGF1ZGlvIHN0cmVhbSAoaWYgYXZhaWxhYmxlKS4gQ2FsbGluZyB0aGlzIG1ldGhvZCB0d2ljZSBpbiBhIHJvdyBwYXNzaW5nIHNhbWUgdmFsdWUgd2lsbCBoYXZlIG5vIGVmZmVjdFxuICAgICAqIEBwYXJhbSB2YWx1ZSBgdHJ1ZWAgdG8gc3Vic2NyaWJlIHRvIHRoZSBhdWRpbyBzdHJlYW0sIGBmYWxzZWAgdG8gdW5zdWJzY3JpYmUgZnJvbSBpdFxuICAgICAqL1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZVRvQXVkaW8gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1cbiAgICAgICAgICAgIC5nZXRNZWRpYVN0cmVhbSgpXG4gICAgICAgICAgICAuZ2V0QXVkaW9UcmFja3MoKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHRyYWNrKSB7XG4gICAgICAgICAgICB0cmFjay5lbmFibGVkID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0cmVhbS5hdWRpb0FjdGl2ZSA9IHZhbHVlO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIidTdWJzY3JpYmVyJyBoYXMgXCIgKyAodmFsdWUgPyAnc3Vic2NyaWJlZCB0bycgOiAndW5zdWJzY3JpYmVkIGZyb20nKSArICcgaXRzIGF1ZGlvIHN0cmVhbScpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSBvciB1bnN1YnNjcmliZSBmcm9tIHRoZSB2aWRlbyBzdHJlYW0gKGlmIGF2YWlsYWJsZSkuIENhbGxpbmcgdGhpcyBtZXRob2QgdHdpY2UgaW4gYSByb3cgcGFzc2luZyBzYW1lIHZhbHVlIHdpbGwgaGF2ZSBubyBlZmZlY3RcbiAgICAgKiBAcGFyYW0gdmFsdWUgYHRydWVgIHRvIHN1YnNjcmliZSB0byB0aGUgdmlkZW8gc3RyZWFtLCBgZmFsc2VgIHRvIHVuc3Vic2NyaWJlIGZyb20gaXRcbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5zdWJzY3JpYmVUb1ZpZGVvID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtXG4gICAgICAgICAgICAuZ2V0TWVkaWFTdHJlYW0oKVxuICAgICAgICAgICAgLmdldFZpZGVvVHJhY2tzKClcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICAgICAgdHJhY2suZW5hYmxlZCA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdHJlYW0udmlkZW9BY3RpdmUgPSB2YWx1ZTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCInU3Vic2NyaWJlcicgaGFzIFwiICsgKHZhbHVlID8gJ3N1YnNjcmliZWQgdG8nIDogJ3Vuc3Vic2NyaWJlZCBmcm9tJykgKyAnIGl0cyB2aWRlbyBzdHJlYW0nKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKiBIaWRkZW4gbWV0aG9kcyAqL1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5yZXBsYWNlVHJhY2tJbk1lZGlhU3RyZWFtID0gZnVuY3Rpb24gKHRyYWNrLCB1cGRhdGVMYXN0Q29uc3RyYWludHMpIHtcbiAgICAgICAgdmFyIG1lZGlhU3RyZWFtID0gdGhpcy5zdHJlYW0uZ2V0TWVkaWFTdHJlYW0oKTtcbiAgICAgICAgdmFyIHJlbW92ZWRUcmFjaztcbiAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIHJlbW92ZWRUcmFjayA9IG1lZGlhU3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgICAgICAgICBpZiAodXBkYXRlTGFzdENvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0ubGFzdFZpZGVvVHJhY2tDb25zdHJhaW50cyA9IHRyYWNrLmdldENvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhY2sgPSBtZWRpYVN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdO1xuICAgICAgICB9XG4gICAgICAgIG1lZGlhU3RyZWFtLnJlbW92ZVRyYWNrKHJlbW92ZWRUcmFjayk7XG4gICAgICAgIHJlbW92ZWRUcmFjay5zdG9wKCk7XG4gICAgICAgIG1lZGlhU3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdHJlYW1NYW5hZ2VyXzEuU3RyZWFtTWFuYWdlcikpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Subscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/openvidu-browser/lib/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventDispatcher = exports.ExceptionEventName = exports.ExceptionEvent = exports.SpeechToTextEvent = exports.NetworkQualityLevelChangedEvent = exports.FilterEvent = exports.ConnectionPropertyChangedEvent = exports.StreamPropertyChangedEvent = exports.VideoElementEvent = exports.StreamManagerEvent = exports.StreamEvent = exports.SignalEvent = exports.SessionDisconnectedEvent = exports.RecordingEvent = exports.PublisherSpeakingEvent = exports.ConnectionEvent = exports.Event = exports.VideoInsertMode = exports.TypeOfVideo = exports.OpenViduErrorName = exports.OpenViduError = exports.LocalRecorderState = exports.Filter = exports.LocalRecorder = exports.Connection = exports.Stream = exports.StreamManager = exports.Subscriber = exports.Publisher = exports.Session = exports.OpenVidu = void 0;\nvar jsnlog_1 = __webpack_require__(/*! jsnlog */ \"(ssr)/./node_modules/jsnlog/jsnlog.js\");\nvar OpenVidu_1 = __webpack_require__(/*! ./OpenVidu/OpenVidu */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/OpenVidu.js\");\nObject.defineProperty(exports, \"OpenVidu\", ({ enumerable: true, get: function () { return OpenVidu_1.OpenVidu; } }));\nvar Session_1 = __webpack_require__(/*! ./OpenVidu/Session */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Session.js\");\nObject.defineProperty(exports, \"Session\", ({ enumerable: true, get: function () { return Session_1.Session; } }));\nvar Publisher_1 = __webpack_require__(/*! ./OpenVidu/Publisher */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Publisher.js\");\nObject.defineProperty(exports, \"Publisher\", ({ enumerable: true, get: function () { return Publisher_1.Publisher; } }));\nvar Subscriber_1 = __webpack_require__(/*! ./OpenVidu/Subscriber */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Subscriber.js\");\nObject.defineProperty(exports, \"Subscriber\", ({ enumerable: true, get: function () { return Subscriber_1.Subscriber; } }));\nvar StreamManager_1 = __webpack_require__(/*! ./OpenVidu/StreamManager */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/StreamManager.js\");\nObject.defineProperty(exports, \"StreamManager\", ({ enumerable: true, get: function () { return StreamManager_1.StreamManager; } }));\nvar Stream_1 = __webpack_require__(/*! ./OpenVidu/Stream */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Stream.js\");\nObject.defineProperty(exports, \"Stream\", ({ enumerable: true, get: function () { return Stream_1.Stream; } }));\nvar Connection_1 = __webpack_require__(/*! ./OpenVidu/Connection */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Connection.js\");\nObject.defineProperty(exports, \"Connection\", ({ enumerable: true, get: function () { return Connection_1.Connection; } }));\nvar LocalRecorder_1 = __webpack_require__(/*! ./OpenVidu/LocalRecorder */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/LocalRecorder.js\");\nObject.defineProperty(exports, \"LocalRecorder\", ({ enumerable: true, get: function () { return LocalRecorder_1.LocalRecorder; } }));\nvar Filter_1 = __webpack_require__(/*! ./OpenVidu/Filter */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/Filter.js\");\nObject.defineProperty(exports, \"Filter\", ({ enumerable: true, get: function () { return Filter_1.Filter; } }));\nvar LocalRecorderState_1 = __webpack_require__(/*! ./OpenViduInternal/Enums/LocalRecorderState */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/LocalRecorderState.js\");\nObject.defineProperty(exports, \"LocalRecorderState\", ({ enumerable: true, get: function () { return LocalRecorderState_1.LocalRecorderState; } }));\nvar OpenViduError_1 = __webpack_require__(/*! ./OpenViduInternal/Enums/OpenViduError */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/OpenViduError.js\");\nObject.defineProperty(exports, \"OpenViduError\", ({ enumerable: true, get: function () { return OpenViduError_1.OpenViduError; } }));\nObject.defineProperty(exports, \"OpenViduErrorName\", ({ enumerable: true, get: function () { return OpenViduError_1.OpenViduErrorName; } }));\nvar TypeOfVideo_1 = __webpack_require__(/*! ./OpenViduInternal/Enums/TypeOfVideo */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/TypeOfVideo.js\");\nObject.defineProperty(exports, \"TypeOfVideo\", ({ enumerable: true, get: function () { return TypeOfVideo_1.TypeOfVideo; } }));\nvar VideoInsertMode_1 = __webpack_require__(/*! ./OpenViduInternal/Enums/VideoInsertMode */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Enums/VideoInsertMode.js\");\nObject.defineProperty(exports, \"VideoInsertMode\", ({ enumerable: true, get: function () { return VideoInsertMode_1.VideoInsertMode; } }));\nvar Event_1 = __webpack_require__(/*! ./OpenViduInternal/Events/Event */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Event.js\");\nObject.defineProperty(exports, \"Event\", ({ enumerable: true, get: function () { return Event_1.Event; } }));\nvar ConnectionEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/ConnectionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionEvent.js\");\nObject.defineProperty(exports, \"ConnectionEvent\", ({ enumerable: true, get: function () { return ConnectionEvent_1.ConnectionEvent; } }));\nvar PublisherSpeakingEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/PublisherSpeakingEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/PublisherSpeakingEvent.js\");\nObject.defineProperty(exports, \"PublisherSpeakingEvent\", ({ enumerable: true, get: function () { return PublisherSpeakingEvent_1.PublisherSpeakingEvent; } }));\nvar RecordingEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/RecordingEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/RecordingEvent.js\");\nObject.defineProperty(exports, \"RecordingEvent\", ({ enumerable: true, get: function () { return RecordingEvent_1.RecordingEvent; } }));\nvar SessionDisconnectedEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/SessionDisconnectedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SessionDisconnectedEvent.js\");\nObject.defineProperty(exports, \"SessionDisconnectedEvent\", ({ enumerable: true, get: function () { return SessionDisconnectedEvent_1.SessionDisconnectedEvent; } }));\nvar SignalEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/SignalEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SignalEvent.js\");\nObject.defineProperty(exports, \"SignalEvent\", ({ enumerable: true, get: function () { return SignalEvent_1.SignalEvent; } }));\nvar StreamEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/StreamEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamEvent.js\");\nObject.defineProperty(exports, \"StreamEvent\", ({ enumerable: true, get: function () { return StreamEvent_1.StreamEvent; } }));\nvar StreamManagerEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/StreamManagerEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamManagerEvent.js\");\nObject.defineProperty(exports, \"StreamManagerEvent\", ({ enumerable: true, get: function () { return StreamManagerEvent_1.StreamManagerEvent; } }));\nvar VideoElementEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/VideoElementEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/VideoElementEvent.js\");\nObject.defineProperty(exports, \"VideoElementEvent\", ({ enumerable: true, get: function () { return VideoElementEvent_1.VideoElementEvent; } }));\nvar StreamPropertyChangedEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/StreamPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/StreamPropertyChangedEvent.js\");\nObject.defineProperty(exports, \"StreamPropertyChangedEvent\", ({ enumerable: true, get: function () { return StreamPropertyChangedEvent_1.StreamPropertyChangedEvent; } }));\nvar ConnectionPropertyChangedEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/ConnectionPropertyChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ConnectionPropertyChangedEvent.js\");\nObject.defineProperty(exports, \"ConnectionPropertyChangedEvent\", ({ enumerable: true, get: function () { return ConnectionPropertyChangedEvent_1.ConnectionPropertyChangedEvent; } }));\nvar FilterEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/FilterEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/FilterEvent.js\");\nObject.defineProperty(exports, \"FilterEvent\", ({ enumerable: true, get: function () { return FilterEvent_1.FilterEvent; } }));\nvar NetworkQualityLevelChangedEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/NetworkQualityLevelChangedEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/NetworkQualityLevelChangedEvent.js\");\nObject.defineProperty(exports, \"NetworkQualityLevelChangedEvent\", ({ enumerable: true, get: function () { return NetworkQualityLevelChangedEvent_1.NetworkQualityLevelChangedEvent; } }));\nvar SpeechToTextEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/SpeechToTextEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/SpeechToTextEvent.js\");\nObject.defineProperty(exports, \"SpeechToTextEvent\", ({ enumerable: true, get: function () { return SpeechToTextEvent_1.SpeechToTextEvent; } }));\nvar ExceptionEvent_1 = __webpack_require__(/*! ./OpenViduInternal/Events/ExceptionEvent */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/ExceptionEvent.js\");\nObject.defineProperty(exports, \"ExceptionEvent\", ({ enumerable: true, get: function () { return ExceptionEvent_1.ExceptionEvent; } }));\nObject.defineProperty(exports, \"ExceptionEventName\", ({ enumerable: true, get: function () { return ExceptionEvent_1.ExceptionEventName; } }));\nvar EventDispatcher_1 = __webpack_require__(/*! ./OpenVidu/EventDispatcher */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenVidu/EventDispatcher.js\");\nObject.defineProperty(exports, \"EventDispatcher\", ({ enumerable: true, get: function () { return EventDispatcher_1.EventDispatcher; } }));\n__exportStar(__webpack_require__(/*! ./OpenViduInternal/Events/Types/Types */ \"(ssr)/./node_modules/openvidu-browser/lib/OpenViduInternal/Events/Types/Types.js\"), exports);\n// Disable jsnlog when library is loaded\njsnlog_1.JL.setOptions({ enabled: false });\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/openvidu-browser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/openvidu-browser/package.json":
/*!****************************************************!*\
  !*** ./node_modules/openvidu-browser/package.json ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"author":"OpenVidu","dependencies":{"events":"3.3.0","freeice":"2.2.2","hark":"1.2.3","inherits":"2.0.4","jsnlog":"2.30.0","mime":"3.0.0","platform":"1.3.6","semver":"7.6.2","uuid":"9.0.1","wolfy87-eventemitter":"5.2.9"},"description":"OpenVidu Browser","devDependencies":{"@types/node":"18.11.9","@types/platform":"1.3.4","browserify":"17.0.0","terser":"5.15.1","tsify":"5.0.4","tslint":"6.1.3","typedoc":"0.23.21","typescript":"4.9.3"},"license":"Apache-2.0","main":"lib/index.js","name":"openvidu-browser","repository":{"type":"git","url":"git://github.com/OpenVidu/openvidu"},"scripts":{"browserify":"VERSION=${VERSION:-dev}; mkdir -p static/js/ && cd src && ../node_modules/browserify/bin/cmd.js Main.ts -p [ tsify ] --exclude kurento-browser-extensions --debug -o ../static/js/openvidu-browser-$VERSION.js -v","browserify-prod":"VERSION=${VERSION:-dev}; mkdir -p static/js/ && cd src && ../node_modules/browserify/bin/cmd.js --debug Main.ts -p [ tsify ] --exclude kurento-browser-extensions | ../node_modules/terser/bin/terser --source-map content=inline --output ../static/js/openvidu-browser-$VERSION.min.js","build":"cd src/OpenVidu && ./../../node_modules/typescript/bin/tsc && cd ../.. && ./node_modules/typescript/bin/tsc --declaration src/index.ts --outDir ./lib --sourceMap --target es5 --lib dom,es5,es2015.promise,scripthost && rm -rf ./ts4.4 && mkdir -p ./ts4.4/lib && cp -r ./lib ./ts4.4 && find ./ts4.4/lib -type f ! -iname \'*.d.ts\' -delete && ./config/replace_for_ts44.sh","docs":"./generate-docs.sh"},"types":"lib/index.d.ts","typesVersions":{"<4.4":{"*":["ts4.4/*"]}},"version":"2.30.1"}');

/***/ })

};
;